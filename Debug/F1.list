
F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003c9c  08003c9c  00013c9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  20000000  08003df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000013b4  200001c4  08003fb8  000201c4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001578  08003fb8  00021578  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d28e  00000000  00000000  000201ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003df4  00000000  00000000  0003d47b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000823d  00000000  00000000  0004126f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c40  00000000  00000000  000494b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001078  00000000  00000000  0004a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e3e  00000000  00000000  0004b168  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000042d8  00000000  00000000  00051fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005627e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002494  00000000  00000000  000562fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c4 	.word	0x200001c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c84 	.word	0x08003c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c8 	.word	0x200001c8
 8000148:	08003c84 	.word	0x08003c84

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89e 	bl	80002a4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000118 	.word	0x20000118
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 fde6 	bl	8002d7c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000041c 	.word	0x2000041c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000041c 	.word	0x2000041c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028c:	2301      	movs	r3, #1
 800028e:	0942      	lsrs	r2, r0, #5
 8000290:	f000 001f 	and.w	r0, r0, #31
 8000294:	fa03 f000 	lsl.w	r0, r3, r0
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_NVIC_EnableIRQ+0x14>)
 800029a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a4:	3801      	subs	r0, #1
 80002a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002aa:	d20a      	bcs.n	80002c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002d2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	bf0c      	ite	eq
 80002d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002dc:	f022 0204 	bicne.w	r2, r2, #4
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	4770      	bx	lr
 80002e4:	e000e010 	.word	0xe000e010

080002e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002e8:	4770      	bx	lr

080002ea <HAL_SYSTICK_IRQHandler>:
{
 80002ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002ec:	f7ff fffc 	bl	80002e8 <HAL_SYSTICK_Callback>
 80002f0:	bd08      	pop	{r3, pc}
	...

080002f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002f8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002fa:	4616      	mov	r6, r2
 80002fc:	4b65      	ldr	r3, [pc, #404]	; (8000494 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002fe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004a4 <HAL_GPIO_Init+0x1b0>
 8000302:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004a8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000306:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800030a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800030c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000310:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000314:	45a0      	cmp	r8, r4
 8000316:	d17f      	bne.n	8000418 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000318:	684d      	ldr	r5, [r1, #4]
 800031a:	2d12      	cmp	r5, #18
 800031c:	f000 80af 	beq.w	800047e <HAL_GPIO_Init+0x18a>
 8000320:	f200 8088 	bhi.w	8000434 <HAL_GPIO_Init+0x140>
 8000324:	2d02      	cmp	r5, #2
 8000326:	f000 80a7 	beq.w	8000478 <HAL_GPIO_Init+0x184>
 800032a:	d87c      	bhi.n	8000426 <HAL_GPIO_Init+0x132>
 800032c:	2d00      	cmp	r5, #0
 800032e:	f000 808e 	beq.w	800044e <HAL_GPIO_Init+0x15a>
 8000332:	2d01      	cmp	r5, #1
 8000334:	f000 809e 	beq.w	8000474 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000338:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033c:	2cff      	cmp	r4, #255	; 0xff
 800033e:	bf93      	iteet	ls
 8000340:	4682      	movls	sl, r0
 8000342:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000346:	3d08      	subhi	r5, #8
 8000348:	f8d0 b000 	ldrls.w	fp, [r0]
 800034c:	bf92      	itee	ls
 800034e:	00b5      	lslls	r5, r6, #2
 8000350:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000354:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000356:	fa09 f805 	lsl.w	r8, r9, r5
 800035a:	ea2b 0808 	bic.w	r8, fp, r8
 800035e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000362:	bf88      	it	hi
 8000364:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000368:	ea48 0505 	orr.w	r5, r8, r5
 800036c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000370:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000374:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000378:	d04e      	beq.n	8000418 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4d47      	ldr	r5, [pc, #284]	; (8000498 <HAL_GPIO_Init+0x1a4>)
 800037c:	4f46      	ldr	r7, [pc, #280]	; (8000498 <HAL_GPIO_Init+0x1a4>)
 800037e:	69ad      	ldr	r5, [r5, #24]
 8000380:	f026 0803 	bic.w	r8, r6, #3
 8000384:	f045 0501 	orr.w	r5, r5, #1
 8000388:	61bd      	str	r5, [r7, #24]
 800038a:	69bd      	ldr	r5, [r7, #24]
 800038c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000390:	f005 0501 	and.w	r5, r5, #1
 8000394:	9501      	str	r5, [sp, #4]
 8000396:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800039a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a8:	fa09 f90b 	lsl.w	r9, r9, fp
 80003ac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003b0:	4d3a      	ldr	r5, [pc, #232]	; (800049c <HAL_GPIO_Init+0x1a8>)
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	d068      	beq.n	8000488 <HAL_GPIO_Init+0x194>
 80003b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	d066      	beq.n	800048c <HAL_GPIO_Init+0x198>
 80003be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c2:	42a8      	cmp	r0, r5
 80003c4:	d064      	beq.n	8000490 <HAL_GPIO_Init+0x19c>
 80003c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ca:	42a8      	cmp	r0, r5
 80003cc:	bf0c      	ite	eq
 80003ce:	2503      	moveq	r5, #3
 80003d0:	2504      	movne	r5, #4
 80003d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003da:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003de:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003e4:	bf14      	ite	ne
 80003e6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e8:	43a5      	biceq	r5, r4
 80003ea:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003ec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003f2:	bf14      	ite	ne
 80003f4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003f6:	43a5      	biceq	r5, r4
 80003f8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003fa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000400:	bf14      	ite	ne
 8000402:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000404:	43a5      	biceq	r5, r4
 8000406:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000408:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800040a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800040e:	bf14      	ite	ne
 8000410:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000412:	ea25 0404 	biceq.w	r4, r5, r4
 8000416:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000418:	3601      	adds	r6, #1
 800041a:	2e10      	cmp	r6, #16
 800041c:	f47f af73 	bne.w	8000306 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000420:	b003      	add	sp, #12
 8000422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000426:	2d03      	cmp	r5, #3
 8000428:	d022      	beq.n	8000470 <HAL_GPIO_Init+0x17c>
 800042a:	2d11      	cmp	r5, #17
 800042c:	d184      	bne.n	8000338 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800042e:	68ca      	ldr	r2, [r1, #12]
 8000430:	3204      	adds	r2, #4
          break;
 8000432:	e781      	b.n	8000338 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000434:	4f1a      	ldr	r7, [pc, #104]	; (80004a0 <HAL_GPIO_Init+0x1ac>)
 8000436:	42bd      	cmp	r5, r7
 8000438:	d009      	beq.n	800044e <HAL_GPIO_Init+0x15a>
 800043a:	d812      	bhi.n	8000462 <HAL_GPIO_Init+0x16e>
 800043c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004ac <HAL_GPIO_Init+0x1b8>
 8000440:	454d      	cmp	r5, r9
 8000442:	d004      	beq.n	800044e <HAL_GPIO_Init+0x15a>
 8000444:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000448:	454d      	cmp	r5, r9
 800044a:	f47f af75 	bne.w	8000338 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800044e:	688a      	ldr	r2, [r1, #8]
 8000450:	b1c2      	cbz	r2, 8000484 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000452:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000454:	bf0c      	ite	eq
 8000456:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800045a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800045e:	2208      	movs	r2, #8
 8000460:	e76a      	b.n	8000338 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000462:	4575      	cmp	r5, lr
 8000464:	d0f3      	beq.n	800044e <HAL_GPIO_Init+0x15a>
 8000466:	4565      	cmp	r5, ip
 8000468:	d0f1      	beq.n	800044e <HAL_GPIO_Init+0x15a>
 800046a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004b0 <HAL_GPIO_Init+0x1bc>
 800046e:	e7eb      	b.n	8000448 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000470:	2200      	movs	r2, #0
 8000472:	e761      	b.n	8000338 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000474:	68ca      	ldr	r2, [r1, #12]
          break;
 8000476:	e75f      	b.n	8000338 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000478:	68ca      	ldr	r2, [r1, #12]
 800047a:	3208      	adds	r2, #8
          break;
 800047c:	e75c      	b.n	8000338 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800047e:	68ca      	ldr	r2, [r1, #12]
 8000480:	320c      	adds	r2, #12
          break;
 8000482:	e759      	b.n	8000338 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000484:	2204      	movs	r2, #4
 8000486:	e757      	b.n	8000338 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000488:	2500      	movs	r5, #0
 800048a:	e7a2      	b.n	80003d2 <HAL_GPIO_Init+0xde>
 800048c:	2501      	movs	r5, #1
 800048e:	e7a0      	b.n	80003d2 <HAL_GPIO_Init+0xde>
 8000490:	2502      	movs	r5, #2
 8000492:	e79e      	b.n	80003d2 <HAL_GPIO_Init+0xde>
 8000494:	40010400 	.word	0x40010400
 8000498:	40021000 	.word	0x40021000
 800049c:	40010800 	.word	0x40010800
 80004a0:	10210000 	.word	0x10210000
 80004a4:	10310000 	.word	0x10310000
 80004a8:	10320000 	.word	0x10320000
 80004ac:	10110000 	.word	0x10110000
 80004b0:	10220000 	.word	0x10220000

080004b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80004b8:	4604      	mov	r4, r0
{
 80004ba:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80004bc:	2800      	cmp	r0, #0
 80004be:	d060      	beq.n	8000582 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80004c0:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80004c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004c8:	b91b      	cbnz	r3, 80004d2 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004ca:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004ce:	f002 fdc5 	bl	800305c <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004d2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004d4:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004d6:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80004d8:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004dc:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80004e0:	f001 fa3a 	bl	8001958 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004e8:	682b      	ldr	r3, [r5, #0]
 80004ea:	f104 0804 	add.w	r8, r4, #4
 80004ee:	6033      	str	r3, [r6, #0]
 80004f0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80004f4:	6820      	ldr	r0, [r4, #0]
 80004f6:	f001 fa1f 	bl	8001938 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004fa:	2100      	movs	r1, #0
 80004fc:	6820      	ldr	r0, [r4, #0]
 80004fe:	f001 fa35 	bl	800196c <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000502:	2100      	movs	r1, #0
 8000504:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000506:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000508:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800050a:	4608      	mov	r0, r1
 800050c:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000510:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000514:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000516:	3101      	adds	r1, #1
 8000518:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 800051a:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800051e:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000522:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000524:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000526:	6410      	str	r0, [r2, #64]	; 0x40
 8000528:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 800052c:	d1f0      	bne.n	8000510 <HAL_PCD_Init+0x5c>
 800052e:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000530:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000532:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000536:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000538:	3201      	adds	r2, #1
 800053a:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 800053c:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000540:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000544:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000548:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800054c:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000550:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000554:	d1ed      	bne.n	8000532 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000556:	466e      	mov	r6, sp
 8000558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800055c:	682b      	ldr	r3, [r5, #0]
 800055e:	6033      	str	r3, [r6, #0]
 8000560:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000564:	6820      	ldr	r0, [r4, #0]
 8000566:	f001 fa03 	bl	8001970 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 800056a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800056c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000570:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000572:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000576:	f001 fcd3 	bl	8001f20 <USB_DevDisconnect>
  return HAL_OK;
 800057a:	2000      	movs	r0, #0
}
 800057c:	b006      	add	sp, #24
 800057e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000582:	2001      	movs	r0, #1
 8000584:	e7fa      	b.n	800057c <HAL_PCD_Init+0xc8>

08000586 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000586:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800058a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800058c:	2b01      	cmp	r3, #1
{
 800058e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000590:	d00e      	beq.n	80005b0 <HAL_PCD_Start+0x2a>
 8000592:	2101      	movs	r1, #1
 8000594:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000598:	f002 fe95 	bl	80032c6 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800059c:	6820      	ldr	r0, [r4, #0]
 800059e:	f001 fcbd 	bl	8001f1c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005a2:	6820      	ldr	r0, [r4, #0]
 80005a4:	f001 f9cf 	bl	8001946 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80005ae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005b0:	2002      	movs	r0, #2
}
 80005b2:	bd10      	pop	{r4, pc}

080005b4 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005b4:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80005b8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005ba:	2a01      	cmp	r2, #1
{
 80005bc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005be:	d00b      	beq.n	80005d8 <HAL_PCD_SetAddress+0x24>
 80005c0:	2201      	movs	r2, #1
 80005c2:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80005c6:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80005ca:	6800      	ldr	r0, [r0, #0]
 80005cc:	f001 fca0 	bl	8001f10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80005d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005d8:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005da:	bd10      	pop	{r4, pc}

080005dc <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005dc:	b538      	push	{r3, r4, r5, lr}
 80005de:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80005e0:	b248      	sxtb	r0, r1
 80005e2:	2800      	cmp	r0, #0
 80005e4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005e8:	bfb5      	itete	lt
 80005ea:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005ee:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005f2:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005f4:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80005f8:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 80005fa:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80005fc:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80005fe:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000600:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000604:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000606:	2b01      	cmp	r3, #1
 8000608:	d009      	beq.n	800061e <HAL_PCD_EP_Open+0x42>
 800060a:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800060c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800060e:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000612:	f001 f9c9 	bl	80019a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000616:	2000      	movs	r0, #0
 8000618:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 800061c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800061e:	2002      	movs	r0, #2
}
 8000620:	bd38      	pop	{r3, r4, r5, pc}

08000622 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000622:	b24b      	sxtb	r3, r1
 8000624:	2b00      	cmp	r3, #0
 8000626:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800062a:	bfb5      	itete	lt
 800062c:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000630:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000634:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000636:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800063a:	0fdb      	lsrs	r3, r3, #31
{  
 800063c:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 800063e:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000640:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000642:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000646:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000648:	2b01      	cmp	r3, #1
 800064a:	d009      	beq.n	8000660 <HAL_PCD_EP_Close+0x3e>
 800064c:	2301      	movs	r3, #1
 800064e:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000652:	6800      	ldr	r0, [r0, #0]
 8000654:	f001 fb1a 	bl	8001c8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000658:	2000      	movs	r0, #0
 800065a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800065e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000660:	2002      	movs	r0, #2
}
 8000662:	bd10      	pop	{r4, pc}

08000664 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000664:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000666:	2600      	movs	r6, #0
 8000668:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800066c:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 800066e:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000670:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000674:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000678:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 800067a:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 800067e:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000682:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000686:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 800068a:	6800      	ldr	r0, [r0, #0]
 800068c:	f001 fc62 	bl	8001f54 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000690:	4630      	mov	r0, r6
 8000692:	bd70      	pop	{r4, r5, r6, pc}

08000694 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000694:	f001 010f 	and.w	r1, r1, #15
 8000698:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 800069c:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 80006a0:	4770      	bx	lr

080006a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80006a6:	b570      	push	{r4, r5, r6, lr}
 80006a8:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006aa:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80006ac:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80006ae:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80006b0:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80006b2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006b6:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006ba:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80006bc:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80006be:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80006c0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80006c4:	6800      	ldr	r0, [r0, #0]
 80006c6:	f001 fc45 	bl	8001f54 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006ca:	4630      	mov	r0, r6
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080006d0 <HAL_PCD_IRQHandler>:
{ 
 80006d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80006d4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80006d6:	6800      	ldr	r0, [r0, #0]
 80006d8:	f001 fc24 	bl	8001f24 <USB_ReadInterrupts>
 80006dc:	0400      	lsls	r0, r0, #16
 80006de:	f100 8098 	bmi.w	8000812 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80006e2:	6820      	ldr	r0, [r4, #0]
 80006e4:	f001 fc1e 	bl	8001f24 <USB_ReadInterrupts>
 80006e8:	0541      	lsls	r1, r0, #21
 80006ea:	d50f      	bpl.n	800070c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006ec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80006ee:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006f8:	041b      	lsls	r3, r3, #16
 80006fa:	0c1b      	lsrs	r3, r3, #16
 80006fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000700:	f002 fceb 	bl	80030da <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000704:	2100      	movs	r1, #0
 8000706:	4620      	mov	r0, r4
 8000708:	f7ff ff54 	bl	80005b4 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800070c:	6820      	ldr	r0, [r4, #0]
 800070e:	f001 fc09 	bl	8001f24 <USB_ReadInterrupts>
 8000712:	0447      	lsls	r7, r0, #17
 8000714:	d508      	bpl.n	8000728 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000716:	6822      	ldr	r2, [r4, #0]
 8000718:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800071c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000720:	041b      	lsls	r3, r3, #16
 8000722:	0c1b      	lsrs	r3, r3, #16
 8000724:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000728:	6820      	ldr	r0, [r4, #0]
 800072a:	f001 fbfb 	bl	8001f24 <USB_ReadInterrupts>
 800072e:	0486      	lsls	r6, r0, #18
 8000730:	d508      	bpl.n	8000744 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000732:	6822      	ldr	r2, [r4, #0]
 8000734:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800073c:	041b      	lsls	r3, r3, #16
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000744:	6820      	ldr	r0, [r4, #0]
 8000746:	f001 fbed 	bl	8001f24 <USB_ReadInterrupts>
 800074a:	04c5      	lsls	r5, r0, #19
 800074c:	d51c      	bpl.n	8000788 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800074e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000750:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000752:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000756:	f023 0304 	bic.w	r3, r3, #4
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	0c1b      	lsrs	r3, r3, #16
 800075e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000762:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000766:	f023 0308 	bic.w	r3, r3, #8
 800076a:	041b      	lsls	r3, r3, #16
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000772:	f002 fccf 	bl	8003114 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000776:	6822      	ldr	r2, [r4, #0]
 8000778:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800077c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000780:	041b      	lsls	r3, r3, #16
 8000782:	0c1b      	lsrs	r3, r3, #16
 8000784:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000788:	6820      	ldr	r0, [r4, #0]
 800078a:	f001 fbcb 	bl	8001f24 <USB_ReadInterrupts>
 800078e:	0500      	lsls	r0, r0, #20
 8000790:	d51d      	bpl.n	80007ce <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000792:	6820      	ldr	r0, [r4, #0]
 8000794:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000798:	b29b      	uxth	r3, r3
 800079a:	f043 0308 	orr.w	r3, r3, #8
 800079e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80007a2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80007a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007aa:	041b      	lsls	r3, r3, #16
 80007ac:	0c1b      	lsrs	r3, r3, #16
 80007ae:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80007b2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80007c0:	f001 fbb0 	bl	8001f24 <USB_ReadInterrupts>
 80007c4:	04c1      	lsls	r1, r0, #19
 80007c6:	d402      	bmi.n	80007ce <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80007c8:	4620      	mov	r0, r4
 80007ca:	f002 fc93 	bl	80030f4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80007ce:	6820      	ldr	r0, [r4, #0]
 80007d0:	f001 fba8 	bl	8001f24 <USB_ReadInterrupts>
 80007d4:	0582      	lsls	r2, r0, #22
 80007d6:	d50b      	bpl.n	80007f0 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007d8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80007da:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007dc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007e4:	041b      	lsls	r3, r3, #16
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80007ec:	f002 fc71 	bl	80030d2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80007f0:	6820      	ldr	r0, [r4, #0]
 80007f2:	f001 fb97 	bl	8001f24 <USB_ReadInterrupts>
 80007f6:	05c3      	lsls	r3, r0, #23
 80007f8:	d508      	bpl.n	800080c <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80007fa:	6822      	ldr	r2, [r4, #0]
 80007fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000804:	041b      	lsls	r3, r3, #16
 8000806:	0c1b      	lsrs	r3, r3, #16
 8000808:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800080c:	b002      	add	sp, #8
 800080e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000812:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000814:	4fc8      	ldr	r7, [pc, #800]	; (8000b38 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000816:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000b3c <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800081a:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000b40 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 800081e:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000822:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000826:	6820      	ldr	r0, [r4, #0]
 8000828:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800082c:	b29b      	uxth	r3, r3
 800082e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000832:	041b      	lsls	r3, r3, #16
 8000834:	f57f af55 	bpl.w	80006e2 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000838:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 800083c:	f015 050f 	ands.w	r5, r5, #15
 8000840:	f040 80ab 	bne.w	800099a <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000844:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000848:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800084a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800084e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000850:	d126      	bne.n	80008a0 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000852:	403b      	ands	r3, r7
 8000854:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000856:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800085a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800085e:	b29b      	uxth	r3, r3
 8000860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000864:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000868:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800086c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800086e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000872:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000874:	4413      	add	r3, r2
 8000876:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000878:	4620      	mov	r0, r4
 800087a:	f002 fc23 	bl	80030c4 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800087e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0cf      	beq.n	8000826 <HAL_PCD_IRQHandler+0x156>
 8000886:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000888:	2a00      	cmp	r2, #0
 800088a:	d1cc      	bne.n	8000826 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800088c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000890:	6821      	ldr	r1, [r4, #0]
 8000892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000896:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800089a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800089e:	e7c2      	b.n	8000826 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80008a0:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80008a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008a8:	051a      	lsls	r2, r3, #20
 80008aa:	d51f      	bpl.n	80008ec <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008ac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008b0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008c2:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ca:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008ce:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80008d2:	f001 fc3f 	bl	8002154 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008d6:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008d8:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008da:	8813      	ldrh	r3, [r2, #0]
 80008dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008e0:	051b      	lsls	r3, r3, #20
 80008e2:	0d1b      	lsrs	r3, r3, #20
 80008e4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008e6:	f002 fbdf 	bl	80030a8 <HAL_PCD_SetupStageCallback>
 80008ea:	e79c      	b.n	8000826 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80008ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008f0:	041b      	lsls	r3, r3, #16
 80008f2:	d598      	bpl.n	8000826 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008f4:	8803      	ldrh	r3, [r0, #0]
 80008f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008fa:	051b      	lsls	r3, r3, #20
 80008fc:	0d1b      	lsrs	r3, r3, #20
 80008fe:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000900:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000904:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000908:	b29b      	uxth	r3, r3
 800090a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800090e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000912:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800091a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 800091e:	b163      	cbz	r3, 800093a <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000920:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000924:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000928:	f001 fc14 	bl	8002154 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800092c:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000930:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000934:	4413      	add	r3, r2
 8000936:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800093a:	2100      	movs	r1, #0
 800093c:	4620      	mov	r0, r4
 800093e:	f002 fbb9 	bl	80030b4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000942:	6822      	ldr	r2, [r4, #0]
 8000944:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000948:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800094c:	2d3e      	cmp	r5, #62	; 0x3e
 800094e:	b289      	uxth	r1, r1
 8000950:	f101 0106 	add.w	r1, r1, #6
 8000954:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000958:	d917      	bls.n	800098a <HAL_PCD_IRQHandler+0x2ba>
 800095a:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800095e:	06ee      	lsls	r6, r5, #27
 8000960:	bf04      	itt	eq
 8000962:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000966:	b29b      	uxtheq	r3, r3
 8000968:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 800096c:	b29b      	uxth	r3, r3
 800096e:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000972:	8813      	ldrh	r3, [r2, #0]
 8000974:	b29b      	uxth	r3, r3
 8000976:	ea03 0308 	and.w	r3, r3, r8
 800097a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800097e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000986:	8013      	strh	r3, [r2, #0]
 8000988:	e74d      	b.n	8000826 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800098a:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800098e:	07ed      	lsls	r5, r5, #31
 8000990:	bf44      	itt	mi
 8000992:	3301      	addmi	r3, #1
 8000994:	b29b      	uxthmi	r3, r3
 8000996:	029b      	lsls	r3, r3, #10
 8000998:	e7e8      	b.n	800096c <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800099a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80009a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80009a8:	0419      	lsls	r1, r3, #16
 80009aa:	d53f      	bpl.n	8000a2c <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009ac:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009b0:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009b8:	051b      	lsls	r3, r3, #20
 80009ba:	0d1b      	lsrs	r3, r3, #20
 80009bc:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009c0:	eb04 010a 	add.w	r1, r4, sl
 80009c4:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d174      	bne.n	8000ab6 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009d0:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	3306      	adds	r3, #6
 80009d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009e0:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80009e4:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80009e8:	b136      	cbz	r6, 80009f8 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80009ea:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80009ee:	4633      	mov	r3, r6
 80009f0:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80009f4:	f001 fbae 	bl	8002154 <USB_ReadPMA>
 80009f8:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80009fc:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000a00:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000a04:	4433      	add	r3, r6
 8000a06:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a0a:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000a0e:	4432      	add	r2, r6
 8000a10:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a14:	b123      	cbz	r3, 8000a20 <HAL_PCD_IRQHandler+0x350>
 8000a16:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000a1a:	4286      	cmp	r6, r0
 8000a1c:	f080 8086 	bcs.w	8000b2c <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a20:	44a2      	add	sl, r4
 8000a22:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000a26:	4620      	mov	r0, r4
 8000a28:	f002 fb44 	bl	80030b4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a2c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a30:	061a      	lsls	r2, r3, #24
 8000a32:	f57f aef8 	bpl.w	8000826 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a36:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000a38:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a3a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a3e:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	403b      	ands	r3, r7
 8000a44:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a48:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000a4c:	3502      	adds	r5, #2
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d178      	bne.n	8000b44 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a52:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a56:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000a6a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a72:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000a74:	b11b      	cbz	r3, 8000a7e <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a76:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000a78:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a7a:	f001 fa59 	bl	8001f30 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	4426      	add	r6, r4
 8000a82:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000a86:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000a92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000a96:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000a9a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a9c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000aa0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000aa2:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000aa4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000aa6:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000aa8:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 8085 	bne.w	8000bba <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ab0:	f002 fb08 	bl	80030c4 <HAL_PCD_DataInStageCallback>
 8000ab4:	e6b7      	b.n	8000826 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000ab6:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000aba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ac4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000ac8:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000aca:	d021      	beq.n	8000b10 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000acc:	3202      	adds	r2, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ad4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000ad8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000adc:	b136      	cbz	r6, 8000aec <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ade:	4633      	mov	r3, r6
 8000ae0:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ae4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000ae8:	f001 fb34 	bl	8002154 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000aec:	eb04 030a 	add.w	r3, r4, sl
 8000af0:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000af4:	6822      	ldr	r2, [r4, #0]
 8000af6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000afe:	051b      	lsls	r3, r3, #20
 8000b00:	0d1b      	lsrs	r3, r3, #20
 8000b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b0a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b0e:	e773      	b.n	80009f8 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b10:	3206      	adds	r2, #6
 8000b12:	4413      	add	r3, r2
 8000b14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b18:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000b1c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000b20:	2e00      	cmp	r6, #0
 8000b22:	d0e3      	beq.n	8000aec <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b24:	4633      	mov	r3, r6
 8000b26:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000b2a:	e7db      	b.n	8000ae4 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b2c:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000b30:	4620      	mov	r0, r4
 8000b32:	f7ff fd97 	bl	8000664 <HAL_PCD_EP_Receive>
 8000b36:	e779      	b.n	8000a2c <HAL_PCD_IRQHandler+0x35c>
 8000b38:	ffff8f0f 	.word	0xffff8f0f
 8000b3c:	ffffbf8f 	.word	0xffffbf8f
 8000b40:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b44:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000b48:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b52:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000b56:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b58:	d020      	beq.n	8000b9c <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b5a:	3202      	adds	r2, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b62:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b66:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b6e:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000b70:	b11b      	cbz	r3, 8000b7a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000b72:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b74:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b76:	f001 f9db 	bl	8001f30 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000b7a:	19a3      	adds	r3, r4, r6
 8000b7c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000b80:	6822      	ldr	r2, [r4, #0]
 8000b82:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b8a:	051b      	lsls	r3, r3, #20
 8000b8c:	0d1b      	lsrs	r3, r3, #20
 8000b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b96:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b9a:	e770      	b.n	8000a7e <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b9c:	3206      	adds	r2, #6
 8000b9e:	4413      	add	r3, r2
 8000ba0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ba4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000ba8:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bb0:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0e1      	beq.n	8000b7a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000bb6:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000bb8:	e7dc      	b.n	8000b74 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000bba:	f7ff fd72 	bl	80006a2 <HAL_PCD_EP_Transmit>
 8000bbe:	e632      	b.n	8000826 <HAL_PCD_IRQHandler+0x156>

08000bc0 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000bc0:	2201      	movs	r2, #1
{
 8000bc2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000bc4:	b24b      	sxtb	r3, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bcc:	bfb5      	itete	lt
 8000bce:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000bd2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bd6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000bd8:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bdc:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000bde:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000be0:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000be2:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000be4:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000be6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000bea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d00e      	beq.n	8000c0e <HAL_PCD_EP_SetStall+0x4e>
 8000bf0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000bf4:	6800      	ldr	r0, [r0, #0]
 8000bf6:	f001 f917 	bl	8001e28 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000bfa:	b925      	cbnz	r5, 8000c06 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000bfc:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	f001 f993 	bl	8001f2c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000c06:	2000      	movs	r0, #0
 8000c08:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c0e:	2002      	movs	r0, #2
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}

08000c12 <HAL_PCD_EP_ClrStall>:
{
 8000c12:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000c14:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000c16:	b24b      	sxtb	r3, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c1e:	bfb5      	itete	lt
 8000c20:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000c24:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c28:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c2a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c2e:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000c30:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c32:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c34:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000c36:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c3a:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d009      	beq.n	8000c54 <HAL_PCD_EP_ClrStall+0x42>
 8000c40:	2301      	movs	r3, #1
 8000c42:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000c46:	6800      	ldr	r0, [r0, #0]
 8000c48:	f001 f920 	bl	8001e8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000c4c:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000c50:	4620      	mov	r0, r4
 8000c52:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000c54:	2002      	movs	r0, #2
}
 8000c56:	bd38      	pop	{r3, r4, r5, pc}

08000c58 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000c58:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c5c:	bf1b      	ittet	ne
 8000c5e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000c62:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c66:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c6a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c6c:	bf08      	it	eq
 8000c6e:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c72:	b91a      	cbnz	r2, 8000c7c <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000c74:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000c76:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000c78:	2000      	movs	r0, #0
 8000c7a:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c7c:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000c7e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c80:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c82:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c84:	8103      	strh	r3, [r0, #8]
 8000c86:	e7f7      	b.n	8000c78 <HAL_PCDEx_PMAConfig+0x20>

08000c88 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c88:	6803      	ldr	r3, [r0, #0]
{
 8000c8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	07db      	lsls	r3, r3, #31
{
 8000c90:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c92:	d410      	bmi.n	8000cb6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c94:	682b      	ldr	r3, [r5, #0]
 8000c96:	079f      	lsls	r7, r3, #30
 8000c98:	d45e      	bmi.n	8000d58 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c9a:	682b      	ldr	r3, [r5, #0]
 8000c9c:	0719      	lsls	r1, r3, #28
 8000c9e:	f100 8095 	bmi.w	8000dcc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ca2:	682b      	ldr	r3, [r5, #0]
 8000ca4:	075a      	lsls	r2, r3, #29
 8000ca6:	f100 80bf 	bmi.w	8000e28 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000caa:	69ea      	ldr	r2, [r5, #28]
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 812d 	bne.w	8000f0c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e014      	b.n	8000ce0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb6:	4c90      	ldr	r4, [pc, #576]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000cb8:	6863      	ldr	r3, [r4, #4]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d007      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc2:	6863      	ldr	r3, [r4, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d10c      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x5e>
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	03de      	lsls	r6, r3, #15
 8000cd0:	d509      	bpl.n	8000ce6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	039c      	lsls	r4, r3, #14
 8000cd6:	d5dd      	bpl.n	8000c94 <HAL_RCC_OscConfig+0xc>
 8000cd8:	686b      	ldr	r3, [r5, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1da      	bne.n	8000c94 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
}
 8000ce0:	b002      	add	sp, #8
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce6:	686b      	ldr	r3, [r5, #4]
 8000ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cec:	d110      	bne.n	8000d10 <HAL_RCC_OscConfig+0x88>
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fa6b 	bl	80001d0 <HAL_GetTick>
 8000cfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	0398      	lsls	r0, r3, #14
 8000d00:	d4c8      	bmi.n	8000c94 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d02:	f7ff fa65 	bl	80001d0 <HAL_GetTick>
 8000d06:	1b80      	subs	r0, r0, r6
 8000d08:	2864      	cmp	r0, #100	; 0x64
 8000d0a:	d9f7      	bls.n	8000cfc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	e7e7      	b.n	8000ce0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d10:	b99b      	cbnz	r3, 8000d3a <HAL_RCC_OscConfig+0xb2>
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d18:	6023      	str	r3, [r4, #0]
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d22:	f7ff fa55 	bl	80001d0 <HAL_GetTick>
 8000d26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	0399      	lsls	r1, r3, #14
 8000d2c:	d5b2      	bpl.n	8000c94 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d2e:	f7ff fa4f 	bl	80001d0 <HAL_GetTick>
 8000d32:	1b80      	subs	r0, r0, r6
 8000d34:	2864      	cmp	r0, #100	; 0x64
 8000d36:	d9f7      	bls.n	8000d28 <HAL_RCC_OscConfig+0xa0>
 8000d38:	e7e8      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	d103      	bne.n	8000d4a <HAL_RCC_OscConfig+0xc2>
 8000d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d46:	6023      	str	r3, [r4, #0]
 8000d48:	e7d1      	b.n	8000cee <HAL_RCC_OscConfig+0x66>
 8000d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4e:	6023      	str	r3, [r4, #0]
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d56:	e7cd      	b.n	8000cf4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d58:	4c67      	ldr	r4, [pc, #412]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	6863      	ldr	r3, [r4, #4]
 8000d5c:	f013 0f0c 	tst.w	r3, #12
 8000d60:	d007      	beq.n	8000d72 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d62:	6863      	ldr	r3, [r4, #4]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d110      	bne.n	8000d8e <HAL_RCC_OscConfig+0x106>
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	03da      	lsls	r2, r3, #15
 8000d70:	d40d      	bmi.n	8000d8e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	079b      	lsls	r3, r3, #30
 8000d76:	d502      	bpl.n	8000d7e <HAL_RCC_OscConfig+0xf6>
 8000d78:	692b      	ldr	r3, [r5, #16]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d1af      	bne.n	8000cde <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	696a      	ldr	r2, [r5, #20]
 8000d82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d8a:	6023      	str	r3, [r4, #0]
 8000d8c:	e785      	b.n	8000c9a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d8e:	692a      	ldr	r2, [r5, #16]
 8000d90:	4b5a      	ldr	r3, [pc, #360]	; (8000efc <HAL_RCC_OscConfig+0x274>)
 8000d92:	b16a      	cbz	r2, 8000db0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fa1a 	bl	80001d0 <HAL_GetTick>
 8000d9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	079f      	lsls	r7, r3, #30
 8000da2:	d4ec      	bmi.n	8000d7e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fa14 	bl	80001d0 <HAL_GetTick>
 8000da8:	1b80      	subs	r0, r0, r6
 8000daa:	2802      	cmp	r0, #2
 8000dac:	d9f7      	bls.n	8000d9e <HAL_RCC_OscConfig+0x116>
 8000dae:	e7ad      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000db0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db2:	f7ff fa0d 	bl	80001d0 <HAL_GetTick>
 8000db6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	0798      	lsls	r0, r3, #30
 8000dbc:	f57f af6d 	bpl.w	8000c9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fa06 	bl	80001d0 <HAL_GetTick>
 8000dc4:	1b80      	subs	r0, r0, r6
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d9f6      	bls.n	8000db8 <HAL_RCC_OscConfig+0x130>
 8000dca:	e79f      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dcc:	69aa      	ldr	r2, [r5, #24]
 8000dce:	4c4a      	ldr	r4, [pc, #296]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_RCC_OscConfig+0x278>)
 8000dd2:	b1da      	cbz	r2, 8000e0c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dd8:	f7ff f9fa 	bl	80001d0 <HAL_GetTick>
 8000ddc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de0:	079b      	lsls	r3, r3, #30
 8000de2:	d50d      	bpl.n	8000e00 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000de4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000de8:	4b46      	ldr	r3, [pc, #280]	; (8000f04 <HAL_RCC_OscConfig+0x27c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8000df0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000df2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000df4:	9b01      	ldr	r3, [sp, #4]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	9201      	str	r2, [sp, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f9      	bne.n	8000df2 <HAL_RCC_OscConfig+0x16a>
 8000dfe:	e750      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff f9e6 	bl	80001d0 <HAL_GetTick>
 8000e04:	1b80      	subs	r0, r0, r6
 8000e06:	2802      	cmp	r0, #2
 8000e08:	d9e9      	bls.n	8000dde <HAL_RCC_OscConfig+0x156>
 8000e0a:	e77f      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e0e:	f7ff f9df 	bl	80001d0 <HAL_GetTick>
 8000e12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e16:	079f      	lsls	r7, r3, #30
 8000e18:	f57f af43 	bpl.w	8000ca2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff f9d8 	bl	80001d0 <HAL_GetTick>
 8000e20:	1b80      	subs	r0, r0, r6
 8000e22:	2802      	cmp	r0, #2
 8000e24:	d9f6      	bls.n	8000e14 <HAL_RCC_OscConfig+0x18c>
 8000e26:	e771      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e28:	4c33      	ldr	r4, [pc, #204]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	69e3      	ldr	r3, [r4, #28]
 8000e2c:	00d8      	lsls	r0, r3, #3
 8000e2e:	d424      	bmi.n	8000e7a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e30:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	69e3      	ldr	r3, [r4, #28]
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	61e3      	str	r3, [r4, #28]
 8000e3a:	69e3      	ldr	r3, [r4, #28]
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	4e30      	ldr	r6, [pc, #192]	; (8000f08 <HAL_RCC_OscConfig+0x280>)
 8000e46:	6833      	ldr	r3, [r6, #0]
 8000e48:	05d9      	lsls	r1, r3, #23
 8000e4a:	d518      	bpl.n	8000e7e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4c:	68eb      	ldr	r3, [r5, #12]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d126      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x218>
 8000e52:	6a23      	ldr	r3, [r4, #32]
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e5a:	f7ff f9b9 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e5e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e64:	6a23      	ldr	r3, [r4, #32]
 8000e66:	079b      	lsls	r3, r3, #30
 8000e68:	d53f      	bpl.n	8000eea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e6a:	2f00      	cmp	r7, #0
 8000e6c:	f43f af1d 	beq.w	8000caa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e70:	69e3      	ldr	r3, [r4, #28]
 8000e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e76:	61e3      	str	r3, [r4, #28]
 8000e78:	e717      	b.n	8000caa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e7a:	2700      	movs	r7, #0
 8000e7c:	e7e2      	b.n	8000e44 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7e:	6833      	ldr	r3, [r6, #0]
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e86:	f7ff f9a3 	bl	80001d0 <HAL_GetTick>
 8000e8a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8c:	6833      	ldr	r3, [r6, #0]
 8000e8e:	05da      	lsls	r2, r3, #23
 8000e90:	d4dc      	bmi.n	8000e4c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e92:	f7ff f99d 	bl	80001d0 <HAL_GetTick>
 8000e96:	eba0 0008 	sub.w	r0, r0, r8
 8000e9a:	2864      	cmp	r0, #100	; 0x64
 8000e9c:	d9f6      	bls.n	8000e8c <HAL_RCC_OscConfig+0x204>
 8000e9e:	e735      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea0:	b9ab      	cbnz	r3, 8000ece <HAL_RCC_OscConfig+0x246>
 8000ea2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6223      	str	r3, [r4, #32]
 8000eae:	6a23      	ldr	r3, [r4, #32]
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eb6:	f7ff f98b 	bl	80001d0 <HAL_GetTick>
 8000eba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ebc:	6a23      	ldr	r3, [r4, #32]
 8000ebe:	0798      	lsls	r0, r3, #30
 8000ec0:	d5d3      	bpl.n	8000e6a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff f985 	bl	80001d0 <HAL_GetTick>
 8000ec6:	1b80      	subs	r0, r0, r6
 8000ec8:	4540      	cmp	r0, r8
 8000eca:	d9f7      	bls.n	8000ebc <HAL_RCC_OscConfig+0x234>
 8000ecc:	e71e      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	6a23      	ldr	r3, [r4, #32]
 8000ed2:	d103      	bne.n	8000edc <HAL_RCC_OscConfig+0x254>
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6223      	str	r3, [r4, #32]
 8000eda:	e7ba      	b.n	8000e52 <HAL_RCC_OscConfig+0x1ca>
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6223      	str	r3, [r4, #32]
 8000ee2:	6a23      	ldr	r3, [r4, #32]
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	e7b6      	b.n	8000e58 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f7ff f971 	bl	80001d0 <HAL_GetTick>
 8000eee:	eba0 0008 	sub.w	r0, r0, r8
 8000ef2:	42b0      	cmp	r0, r6
 8000ef4:	d9b6      	bls.n	8000e64 <HAL_RCC_OscConfig+0x1dc>
 8000ef6:	e709      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	42420000 	.word	0x42420000
 8000f00:	42420480 	.word	0x42420480
 8000f04:	20000118 	.word	0x20000118
 8000f08:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f0c:	4c22      	ldr	r4, [pc, #136]	; (8000f98 <HAL_RCC_OscConfig+0x310>)
 8000f0e:	6863      	ldr	r3, [r4, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	f43f aee2 	beq.w	8000cde <HAL_RCC_OscConfig+0x56>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	4e1f      	ldr	r6, [pc, #124]	; (8000f9c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f20:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f22:	d12b      	bne.n	8000f7c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f24:	f7ff f954 	bl	80001d0 <HAL_GetTick>
 8000f28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	0199      	lsls	r1, r3, #6
 8000f2e:	d41f      	bmi.n	8000f70 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f30:	6a2b      	ldr	r3, [r5, #32]
 8000f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f36:	d105      	bne.n	8000f44 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f38:	6862      	ldr	r2, [r4, #4]
 8000f3a:	68a9      	ldr	r1, [r5, #8]
 8000f3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f40:	430a      	orrs	r2, r1
 8000f42:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f44:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f46:	6862      	ldr	r2, [r4, #4]
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f52:	2301      	movs	r3, #1
 8000f54:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f56:	f7ff f93b 	bl	80001d0 <HAL_GetTick>
 8000f5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	019a      	lsls	r2, r3, #6
 8000f60:	f53f aea7 	bmi.w	8000cb2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff f934 	bl	80001d0 <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9f6      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2d4>
 8000f6e:	e6cd      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f70:	f7ff f92e 	bl	80001d0 <HAL_GetTick>
 8000f74:	1bc0      	subs	r0, r0, r7
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d9d7      	bls.n	8000f2a <HAL_RCC_OscConfig+0x2a2>
 8000f7a:	e6c7      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f7c:	f7ff f928 	bl	80001d0 <HAL_GetTick>
 8000f80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	f57f ae94 	bpl.w	8000cb2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8a:	f7ff f921 	bl	80001d0 <HAL_GetTick>
 8000f8e:	1b40      	subs	r0, r0, r5
 8000f90:	2802      	cmp	r0, #2
 8000f92:	d9f6      	bls.n	8000f82 <HAL_RCC_OscConfig+0x2fa>
 8000f94:	e6ba      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	42420060 	.word	0x42420060

08000fa0 <HAL_RCC_MCOConfig>:
{
 8000fa0:	b530      	push	{r4, r5, lr}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	2100      	movs	r1, #0
 8000faa:	a802      	add	r0, sp, #8
 8000fac:	f002 fa28 	bl	8003400 <memset>
  gpio.Mode      = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 8000fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
  MCO1_CLK_ENABLE();
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	; (8000fe8 <HAL_RCC_MCOConfig+0x48>)
  gpio.Pin       = MCO1_PIN;
 8000fbe:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8000fc0:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8000fc2:	a902      	add	r1, sp, #8
  MCO1_CLK_ENABLE();
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	61a3      	str	r3, [r4, #24]
 8000fca:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <HAL_RCC_MCOConfig+0x4c>)
  MCO1_CLK_ENABLE();
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8000fd6:	f7ff f98d 	bl	80002f4 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8000fda:	6861      	ldr	r1, [r4, #4]
 8000fdc:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8000fe0:	4329      	orrs	r1, r5
 8000fe2:	6061      	str	r1, [r4, #4]
}
 8000fe4:	b007      	add	sp, #28
 8000fe6:	bd30      	pop	{r4, r5, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800

08000ff0 <HAL_RCC_GetSysClockFreq>:
{
 8000ff0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000ff4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ff6:	ac02      	add	r4, sp, #8
 8000ff8:	f103 0510 	add.w	r5, r3, #16
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	6859      	ldr	r1, [r3, #4]
 8001002:	3308      	adds	r3, #8
 8001004:	c203      	stmia	r2!, {r0, r1}
 8001006:	42ab      	cmp	r3, r5
 8001008:	4614      	mov	r4, r2
 800100a:	d1f7      	bne.n	8000ffc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800100c:	2301      	movs	r3, #1
 800100e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001012:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001014:	4911      	ldr	r1, [pc, #68]	; (800105c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001016:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800101a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800101c:	f003 020c 	and.w	r2, r3, #12
 8001020:	2a08      	cmp	r2, #8
 8001022:	d117      	bne.n	8001054 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001024:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001028:	a806      	add	r0, sp, #24
 800102a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800102c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800102e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001032:	d50c      	bpl.n	800104e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001034:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001036:	480a      	ldr	r0, [pc, #40]	; (8001060 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001038:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800103c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800103e:	aa06      	add	r2, sp, #24
 8001040:	4413      	add	r3, r2
 8001042:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001046:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800104a:	b007      	add	sp, #28
 800104c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_RCC_GetSysClockFreq+0x74>)
 8001050:	4350      	muls	r0, r2
 8001052:	e7fa      	b.n	800104a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001056:	e7f8      	b.n	800104a <HAL_RCC_GetSysClockFreq+0x5a>
 8001058:	08003c9c 	.word	0x08003c9c
 800105c:	40021000 	.word	0x40021000
 8001060:	007a1200 	.word	0x007a1200
 8001064:	003d0900 	.word	0x003d0900

08001068 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001068:	4a4d      	ldr	r2, [pc, #308]	; (80011a0 <HAL_RCC_ClockConfig+0x138>)
{
 800106a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800106e:	6813      	ldr	r3, [r2, #0]
{
 8001070:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	428b      	cmp	r3, r1
{
 8001078:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800107a:	d328      	bcc.n	80010ce <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800107c:	682a      	ldr	r2, [r5, #0]
 800107e:	0791      	lsls	r1, r2, #30
 8001080:	d432      	bmi.n	80010e8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001082:	07d2      	lsls	r2, r2, #31
 8001084:	d438      	bmi.n	80010f8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001086:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_RCC_ClockConfig+0x138>)
 8001088:	6813      	ldr	r3, [r2, #0]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	429e      	cmp	r6, r3
 8001090:	d373      	bcc.n	800117a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001092:	682a      	ldr	r2, [r5, #0]
 8001094:	4c43      	ldr	r4, [pc, #268]	; (80011a4 <HAL_RCC_ClockConfig+0x13c>)
 8001096:	f012 0f04 	tst.w	r2, #4
 800109a:	d179      	bne.n	8001190 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800109c:	0713      	lsls	r3, r2, #28
 800109e:	d506      	bpl.n	80010ae <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010a0:	6863      	ldr	r3, [r4, #4]
 80010a2:	692a      	ldr	r2, [r5, #16]
 80010a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010ac:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ae:	f7ff ff9f 	bl	8000ff0 <HAL_RCC_GetSysClockFreq>
 80010b2:	6863      	ldr	r3, [r4, #4]
 80010b4:	4a3c      	ldr	r2, [pc, #240]	; (80011a8 <HAL_RCC_ClockConfig+0x140>)
 80010b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010ba:	5cd3      	ldrb	r3, [r2, r3]
 80010bc:	40d8      	lsrs	r0, r3
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <HAL_RCC_ClockConfig+0x144>)
 80010c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff f842 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80010c8:	2000      	movs	r0, #0
}
 80010ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f023 0307 	bic.w	r3, r3, #7
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010d8:	6813      	ldr	r3, [r2, #0]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	4299      	cmp	r1, r3
 80010e0:	d0cc      	beq.n	800107c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
 80010e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e8:	492e      	ldr	r1, [pc, #184]	; (80011a4 <HAL_RCC_ClockConfig+0x13c>)
 80010ea:	68a8      	ldr	r0, [r5, #8]
 80010ec:	684b      	ldr	r3, [r1, #4]
 80010ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010f2:	4303      	orrs	r3, r0
 80010f4:	604b      	str	r3, [r1, #4]
 80010f6:	e7c4      	b.n	8001082 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f8:	686a      	ldr	r2, [r5, #4]
 80010fa:	4c2a      	ldr	r4, [pc, #168]	; (80011a4 <HAL_RCC_ClockConfig+0x13c>)
 80010fc:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001100:	d11c      	bne.n	800113c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001106:	d0ec      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001108:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	4313      	orrs	r3, r2
 8001114:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001116:	f7ff f85b 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800111c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111e:	2b01      	cmp	r3, #1
 8001120:	d114      	bne.n	800114c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b04      	cmp	r3, #4
 800112a:	d0ac      	beq.n	8001086 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112c:	f7ff f850 	bl	80001d0 <HAL_GetTick>
 8001130:	1bc0      	subs	r0, r0, r7
 8001132:	4540      	cmp	r0, r8
 8001134:	d9f5      	bls.n	8001122 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001136:	2003      	movs	r0, #3
 8001138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113c:	2a02      	cmp	r2, #2
 800113e:	d102      	bne.n	8001146 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001140:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001144:	e7df      	b.n	8001106 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001146:	f013 0f02 	tst.w	r3, #2
 800114a:	e7dc      	b.n	8001106 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114c:	2b02      	cmp	r3, #2
 800114e:	d10f      	bne.n	8001170 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d095      	beq.n	8001086 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115a:	f7ff f839 	bl	80001d0 <HAL_GetTick>
 800115e:	1bc0      	subs	r0, r0, r7
 8001160:	4540      	cmp	r0, r8
 8001162:	d9f5      	bls.n	8001150 <HAL_RCC_ClockConfig+0xe8>
 8001164:	e7e7      	b.n	8001136 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001166:	f7ff f833 	bl	80001d0 <HAL_GetTick>
 800116a:	1bc0      	subs	r0, r0, r7
 800116c:	4540      	cmp	r0, r8
 800116e:	d8e2      	bhi.n	8001136 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001170:	6863      	ldr	r3, [r4, #4]
 8001172:	f013 0f0c 	tst.w	r3, #12
 8001176:	d1f6      	bne.n	8001166 <HAL_RCC_ClockConfig+0xfe>
 8001178:	e785      	b.n	8001086 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	f023 0307 	bic.w	r3, r3, #7
 8001180:	4333      	orrs	r3, r6
 8001182:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001184:	6813      	ldr	r3, [r2, #0]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	429e      	cmp	r6, r3
 800118c:	d1a9      	bne.n	80010e2 <HAL_RCC_ClockConfig+0x7a>
 800118e:	e780      	b.n	8001092 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001190:	6863      	ldr	r3, [r4, #4]
 8001192:	68e9      	ldr	r1, [r5, #12]
 8001194:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001198:	430b      	orrs	r3, r1
 800119a:	6063      	str	r3, [r4, #4]
 800119c:	e77e      	b.n	800109c <HAL_RCC_ClockConfig+0x34>
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	08003d40 	.word	0x08003d40
 80011ac:	20000118 	.word	0x20000118

080011b0 <HAL_RCC_GetHCLKFreq>:
}
 80011b0:	4b01      	ldr	r3, [pc, #4]	; (80011b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000118 	.word	0x20000118

080011bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011bc:	6803      	ldr	r3, [r0, #0]
{
 80011be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011c2:	07d9      	lsls	r1, r3, #31
{
 80011c4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011c6:	d520      	bpl.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c8:	4c35      	ldr	r4, [pc, #212]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011ca:	69e3      	ldr	r3, [r4, #28]
 80011cc:	00da      	lsls	r2, r3, #3
 80011ce:	d432      	bmi.n	8001236 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011d0:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	69e3      	ldr	r3, [r4, #28]
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61e3      	str	r3, [r4, #28]
 80011da:	69e3      	ldr	r3, [r4, #28]
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4e2f      	ldr	r6, [pc, #188]	; (80012a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011e6:	6833      	ldr	r3, [r6, #0]
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	d526      	bpl.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011ec:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011f2:	d136      	bne.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011f4:	6a23      	ldr	r3, [r4, #32]
 80011f6:	686a      	ldr	r2, [r5, #4]
 80011f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fc:	4313      	orrs	r3, r2
 80011fe:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001200:	b11f      	cbz	r7, 800120a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001202:	69e3      	ldr	r3, [r4, #28]
 8001204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001208:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800120a:	6828      	ldr	r0, [r5, #0]
 800120c:	0783      	lsls	r3, r0, #30
 800120e:	d506      	bpl.n	800121e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001210:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001212:	68a9      	ldr	r1, [r5, #8]
 8001214:	6853      	ldr	r3, [r2, #4]
 8001216:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800121a:	430b      	orrs	r3, r1
 800121c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800121e:	f010 0010 	ands.w	r0, r0, #16
 8001222:	d01b      	beq.n	800125c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001226:	68e9      	ldr	r1, [r5, #12]
 8001228:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800122a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800122c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001230:	430b      	orrs	r3, r1
 8001232:	6053      	str	r3, [r2, #4]
 8001234:	e012      	b.n	800125c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001236:	2700      	movs	r7, #0
 8001238:	e7d4      	b.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123a:	6833      	ldr	r3, [r6, #0]
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001242:	f7fe ffc5 	bl	80001d0 <HAL_GetTick>
 8001246:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	6833      	ldr	r3, [r6, #0]
 800124a:	05d8      	lsls	r0, r3, #23
 800124c:	d4ce      	bmi.n	80011ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124e:	f7fe ffbf 	bl	80001d0 <HAL_GetTick>
 8001252:	eba0 0008 	sub.w	r0, r0, r8
 8001256:	2864      	cmp	r0, #100	; 0x64
 8001258:	d9f6      	bls.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800125a:	2003      	movs	r0, #3
}
 800125c:	b002      	add	sp, #8
 800125e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001262:	686a      	ldr	r2, [r5, #4]
 8001264:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001268:	4293      	cmp	r3, r2
 800126a:	d0c3      	beq.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800126c:	2001      	movs	r0, #1
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001270:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001272:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001274:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001276:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800127a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800127c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800127e:	07d9      	lsls	r1, r3, #31
 8001280:	d5b8      	bpl.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001282:	f7fe ffa5 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800128a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	6a23      	ldr	r3, [r4, #32]
 800128e:	079a      	lsls	r2, r3, #30
 8001290:	d4b0      	bmi.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7fe ff9d 	bl	80001d0 <HAL_GetTick>
 8001296:	1b80      	subs	r0, r0, r6
 8001298:	4540      	cmp	r0, r8
 800129a:	d9f7      	bls.n	800128c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800129c:	e7dd      	b.n	800125a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40007000 	.word	0x40007000
 80012a8:	42420440 	.word	0x42420440

080012ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012ac:	6a03      	ldr	r3, [r0, #32]
{
 80012ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80012ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80012bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80012be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80012c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80012c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80012c6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80012ca:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80012cc:	4d0a      	ldr	r5, [pc, #40]	; (80012f8 <TIM_OC1_SetConfig+0x4c>)
 80012ce:	42a8      	cmp	r0, r5
 80012d0:	d10b      	bne.n	80012ea <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80012d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80012d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80012d8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80012da:	698e      	ldr	r6, [r1, #24]
 80012dc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80012de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80012e2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80012e4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80012e8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80012ec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80012ee:	684a      	ldr	r2, [r1, #4]
 80012f0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012f2:	6203      	str	r3, [r0, #32]
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
 80012f6:	bf00      	nop
 80012f8:	40012c00 	.word	0x40012c00

080012fc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80012fc:	6a03      	ldr	r3, [r0, #32]
{
 80012fe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001304:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001306:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001308:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800130a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800130c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800130e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001312:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001314:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001316:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800131a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800131e:	4d0b      	ldr	r5, [pc, #44]	; (800134c <TIM_OC3_SetConfig+0x50>)
 8001320:	42a8      	cmp	r0, r5
 8001322:	d10d      	bne.n	8001340 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001324:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800132a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800132e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001330:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001332:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001336:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800133c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001340:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001342:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001344:	684a      	ldr	r2, [r1, #4]
 8001346:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001348:	6203      	str	r3, [r0, #32]
 800134a:	bd70      	pop	{r4, r5, r6, pc}
 800134c:	40012c00 	.word	0x40012c00

08001350 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001350:	6a03      	ldr	r3, [r0, #32]
{
 8001352:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001358:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800135a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800135c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800135e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001360:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001362:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001366:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800136a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800136c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001370:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001374:	4d06      	ldr	r5, [pc, #24]	; (8001390 <TIM_OC4_SetConfig+0x40>)
 8001376:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001378:	bf02      	ittt	eq
 800137a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800137c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001380:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001384:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001386:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001388:	684a      	ldr	r2, [r1, #4]
 800138a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800138c:	6203      	str	r3, [r0, #32]
 800138e:	bd30      	pop	{r4, r5, pc}
 8001390:	40012c00 	.word	0x40012c00

08001394 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001394:	6803      	ldr	r3, [r0, #0]
}
 8001396:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	4770      	bx	lr

080013aa <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80013aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80013ae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	f04f 0302 	mov.w	r3, #2
 80013b6:	d01c      	beq.n	80013f2 <HAL_TIM_ConfigClockSource+0x48>
 80013b8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80013ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80013be:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80013c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80013c4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013c6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80013ca:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80013ce:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80013d0:	680a      	ldr	r2, [r1, #0]
 80013d2:	2a40      	cmp	r2, #64	; 0x40
 80013d4:	d079      	beq.n	80014ca <HAL_TIM_ConfigClockSource+0x120>
 80013d6:	d819      	bhi.n	800140c <HAL_TIM_ConfigClockSource+0x62>
 80013d8:	2a10      	cmp	r2, #16
 80013da:	f000 8093 	beq.w	8001504 <HAL_TIM_ConfigClockSource+0x15a>
 80013de:	d80a      	bhi.n	80013f6 <HAL_TIM_ConfigClockSource+0x4c>
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	f000 8089 	beq.w	80014f8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013ec:	2300      	movs	r3, #0
 80013ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80013f2:	4618      	mov	r0, r3
}
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80013f6:	2a20      	cmp	r2, #32
 80013f8:	f000 808a 	beq.w	8001510 <HAL_TIM_ConfigClockSource+0x166>
 80013fc:	2a30      	cmp	r2, #48	; 0x30
 80013fe:	d1f2      	bne.n	80013e6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001400:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001402:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001406:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800140a:	e036      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800140c:	2a70      	cmp	r2, #112	; 0x70
 800140e:	d036      	beq.n	800147e <HAL_TIM_ConfigClockSource+0xd4>
 8001410:	d81b      	bhi.n	800144a <HAL_TIM_ConfigClockSource+0xa0>
 8001412:	2a50      	cmp	r2, #80	; 0x50
 8001414:	d042      	beq.n	800149c <HAL_TIM_ConfigClockSource+0xf2>
 8001416:	2a60      	cmp	r2, #96	; 0x60
 8001418:	d1e5      	bne.n	80013e6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800141a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800141c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800141e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001422:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001424:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001426:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001428:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800142a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800142e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001432:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001436:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800143a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800143c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800143e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001440:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001444:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001448:	e017      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800144a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800144e:	d011      	beq.n	8001474 <HAL_TIM_ConfigClockSource+0xca>
 8001450:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001454:	d1c7      	bne.n	80013e6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001456:	688a      	ldr	r2, [r1, #8]
 8001458:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800145a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800145c:	68c9      	ldr	r1, [r1, #12]
 800145e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001460:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001464:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001468:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800146a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001472:	e002      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e7b3      	b.n	80013e6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800147e:	688a      	ldr	r2, [r1, #8]
 8001480:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001482:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001484:	68c9      	ldr	r1, [r1, #12]
 8001486:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001488:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800148c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001490:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001492:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001494:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001496:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800149a:	e7ee      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800149c:	684c      	ldr	r4, [r1, #4]
 800149e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80014a0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014a2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014a4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014a8:	f025 0501 	bic.w	r5, r5, #1
 80014ac:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014ae:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80014b0:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014b6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80014ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014bc:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80014be:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80014c4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80014c8:	e7d7      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80014ca:	684c      	ldr	r4, [r1, #4]
 80014cc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80014ce:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014d0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014d2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014d6:	f025 0501 	bic.w	r5, r5, #1
 80014da:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014dc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80014de:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014e4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80014e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014ea:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80014ec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80014f2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80014f6:	e7c0      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80014f8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80014fe:	f042 0207 	orr.w	r2, r2, #7
 8001502:	e7ba      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001504:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001506:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800150a:	f042 0217 	orr.w	r2, r2, #23
 800150e:	e7b4      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001510:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001512:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001516:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800151a:	e7ae      	b.n	800147a <HAL_TIM_ConfigClockSource+0xd0>

0800151c <HAL_TIM_PeriodElapsedCallback>:
 800151c:	4770      	bx	lr

0800151e <HAL_TIM_OC_DelayElapsedCallback>:
 800151e:	4770      	bx	lr

08001520 <HAL_TIM_IC_CaptureCallback>:
 8001520:	4770      	bx	lr

08001522 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001522:	4770      	bx	lr

08001524 <HAL_TIM_TriggerCallback>:
 8001524:	4770      	bx	lr

08001526 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001526:	6803      	ldr	r3, [r0, #0]
{
 8001528:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800152a:	691a      	ldr	r2, [r3, #16]
{
 800152c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800152e:	0791      	lsls	r1, r2, #30
 8001530:	d50e      	bpl.n	8001550 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	0792      	lsls	r2, r2, #30
 8001536:	d50b      	bpl.n	8001550 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001538:	f06f 0202 	mvn.w	r2, #2
 800153c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800153e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001540:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001542:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001544:	079b      	lsls	r3, r3, #30
 8001546:	d077      	beq.n	8001638 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001548:	f7ff ffea 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800154c:	2300      	movs	r3, #0
 800154e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	0750      	lsls	r0, r2, #29
 8001556:	d510      	bpl.n	800157a <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	0751      	lsls	r1, r2, #29
 800155c:	d50d      	bpl.n	800157a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800155e:	f06f 0204 	mvn.w	r2, #4
 8001562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001564:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001566:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001568:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800156a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800156e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001570:	d068      	beq.n	8001644 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001572:	f7ff ffd5 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001576:	2300      	movs	r3, #0
 8001578:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	0712      	lsls	r2, r2, #28
 8001580:	d50f      	bpl.n	80015a2 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	0710      	lsls	r0, r2, #28
 8001586:	d50c      	bpl.n	80015a2 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001588:	f06f 0208 	mvn.w	r2, #8
 800158c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800158e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001590:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001592:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001594:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001596:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001598:	d05a      	beq.n	8001650 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800159a:	f7ff ffc1 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159e:	2300      	movs	r3, #0
 80015a0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	06d2      	lsls	r2, r2, #27
 80015a8:	d510      	bpl.n	80015cc <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	06d0      	lsls	r0, r2, #27
 80015ae:	d50d      	bpl.n	80015cc <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015b0:	f06f 0210 	mvn.w	r2, #16
 80015b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015b6:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015b8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015ba:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015bc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80015c0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015c2:	d04b      	beq.n	800165c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80015c4:	f7ff ffac 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c8:	2300      	movs	r3, #0
 80015ca:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	07d1      	lsls	r1, r2, #31
 80015d2:	d508      	bpl.n	80015e6 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	07d2      	lsls	r2, r2, #31
 80015d8:	d505      	bpl.n	80015e6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015da:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80015de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80015e2:	f7ff ff9b 	bl	800151c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	0610      	lsls	r0, r2, #24
 80015ec:	d508      	bpl.n	8001600 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	0611      	lsls	r1, r2, #24
 80015f2:	d505      	bpl.n	8001600 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80015f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80015fc:	f000 f99b 	bl	8001936 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	0652      	lsls	r2, r2, #25
 8001606:	d508      	bpl.n	800161a <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	0650      	lsls	r0, r2, #25
 800160c:	d505      	bpl.n	800161a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800160e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001612:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001614:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001616:	f7ff ff85 	bl	8001524 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	0691      	lsls	r1, r2, #26
 8001620:	d522      	bpl.n	8001668 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	0692      	lsls	r2, r2, #26
 8001626:	d51f      	bpl.n	8001668 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001628:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800162c:	4620      	mov	r0, r4
}
 800162e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001632:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001634:	f000 b97e 	b.w	8001934 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001638:	f7ff ff71 	bl	800151e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff ff70 	bl	8001522 <HAL_TIM_PWM_PulseFinishedCallback>
 8001642:	e783      	b.n	800154c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001644:	f7ff ff6b 	bl	800151e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff ff6a 	bl	8001522 <HAL_TIM_PWM_PulseFinishedCallback>
 800164e:	e792      	b.n	8001576 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001650:	f7ff ff65 	bl	800151e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff ff64 	bl	8001522 <HAL_TIM_PWM_PulseFinishedCallback>
 800165a:	e7a0      	b.n	800159e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800165c:	f7ff ff5f 	bl	800151e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001660:	4620      	mov	r0, r4
 8001662:	f7ff ff5e 	bl	8001522 <HAL_TIM_PWM_PulseFinishedCallback>
 8001666:	e7af      	b.n	80015c8 <HAL_TIM_IRQHandler+0xa2>
 8001668:	bd10      	pop	{r4, pc}
	...

0800166c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800166c:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800166e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001670:	4290      	cmp	r0, r2
 8001672:	d00a      	beq.n	800168a <TIM_Base_SetConfig+0x1e>
 8001674:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001678:	d007      	beq.n	800168a <TIM_Base_SetConfig+0x1e>
 800167a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800167e:	4290      	cmp	r0, r2
 8001680:	d003      	beq.n	800168a <TIM_Base_SetConfig+0x1e>
 8001682:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001686:	4290      	cmp	r0, r2
 8001688:	d115      	bne.n	80016b6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800168a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800168c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001690:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <TIM_Base_SetConfig+0x6c>)
 8001694:	4290      	cmp	r0, r2
 8001696:	d00a      	beq.n	80016ae <TIM_Base_SetConfig+0x42>
 8001698:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800169c:	d007      	beq.n	80016ae <TIM_Base_SetConfig+0x42>
 800169e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016a2:	4290      	cmp	r0, r2
 80016a4:	d003      	beq.n	80016ae <TIM_Base_SetConfig+0x42>
 80016a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016aa:	4290      	cmp	r0, r2
 80016ac:	d103      	bne.n	80016b6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80016b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016b4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80016b6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80016b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80016bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016c0:	688b      	ldr	r3, [r1, #8]
 80016c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016c4:	680b      	ldr	r3, [r1, #0]
 80016c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <TIM_Base_SetConfig+0x6c>)
 80016ca:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80016cc:	bf04      	itt	eq
 80016ce:	690b      	ldreq	r3, [r1, #16]
 80016d0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80016d2:	2301      	movs	r3, #1
 80016d4:	6143      	str	r3, [r0, #20]
 80016d6:	4770      	bx	lr
 80016d8:	40012c00 	.word	0x40012c00

080016dc <HAL_TIM_Base_Init>:
{
 80016dc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016de:	4604      	mov	r4, r0
 80016e0:	b1a0      	cbz	r0, 800170c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ea:	b91b      	cbnz	r3, 80016f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016f0:	f001 fb9e 	bl	8002e30 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016f6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80016f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016fc:	1d21      	adds	r1, r4, #4
 80016fe:	f7ff ffb5 	bl	800166c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001702:	2301      	movs	r3, #1
  return HAL_OK;
 8001704:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001706:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800170a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800170c:	2001      	movs	r0, #1
}
 800170e:	bd10      	pop	{r4, pc}

08001710 <HAL_TIM_PWM_Init>:
{
 8001710:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001712:	4604      	mov	r4, r0
 8001714:	b1a0      	cbz	r0, 8001740 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001716:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800171a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800171e:	b91b      	cbnz	r3, 8001728 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001720:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001724:	f001 fb70 	bl	8002e08 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001728:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800172a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800172c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001730:	1d21      	adds	r1, r4, #4
 8001732:	f7ff ff9b 	bl	800166c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001736:	2301      	movs	r3, #1
  return HAL_OK;
 8001738:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800173a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800173e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001740:	2001      	movs	r0, #1
}
 8001742:	bd10      	pop	{r4, pc}

08001744 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001744:	6a03      	ldr	r3, [r0, #32]
{
 8001746:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001748:	f023 0310 	bic.w	r3, r3, #16
 800174c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800174e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001750:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001752:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001754:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001756:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800175a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800175e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001760:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001764:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001768:	4d0b      	ldr	r5, [pc, #44]	; (8001798 <TIM_OC2_SetConfig+0x54>)
 800176a:	42a8      	cmp	r0, r5
 800176c:	d10d      	bne.n	800178a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800176e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001774:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001778:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800177a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800177c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001780:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001786:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800178a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800178c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800178e:	684a      	ldr	r2, [r1, #4]
 8001790:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001792:	6203      	str	r3, [r0, #32]
 8001794:	bd70      	pop	{r4, r5, r6, pc}
 8001796:	bf00      	nop
 8001798:	40012c00 	.word	0x40012c00

0800179c <HAL_TIM_PWM_ConfigChannel>:
{
 800179c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800179e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f04f 0002 	mov.w	r0, #2
 80017aa:	d025      	beq.n	80017f8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80017ac:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80017ae:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80017b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80017b6:	2a0c      	cmp	r2, #12
 80017b8:	d818      	bhi.n	80017ec <HAL_TIM_PWM_ConfigChannel+0x50>
 80017ba:	e8df f002 	tbb	[pc, r2]
 80017be:	1707      	.short	0x1707
 80017c0:	171e1717 	.word	0x171e1717
 80017c4:	172f1717 	.word	0x172f1717
 80017c8:	1717      	.short	0x1717
 80017ca:	40          	.byte	0x40
 80017cb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017cc:	6820      	ldr	r0, [r4, #0]
 80017ce:	f7ff fd6d 	bl	80012ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017d2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017d4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	f042 0208 	orr.w	r2, r2, #8
 80017dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80017de:	699a      	ldr	r2, [r3, #24]
 80017e0:	f022 0204 	bic.w	r2, r2, #4
 80017e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80017ea:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80017ec:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80017ee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80017f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80017f4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80017f8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017fa:	6820      	ldr	r0, [r4, #0]
 80017fc:	f7ff ffa2 	bl	8001744 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001800:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001802:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800180a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800181a:	e7e6      	b.n	80017ea <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	f7ff fd6d 	bl	80012fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001822:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001824:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	f042 0208 	orr.w	r2, r2, #8
 800182c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	f022 0204 	bic.w	r2, r2, #4
 8001834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800183a:	61da      	str	r2, [r3, #28]
    break;
 800183c:	e7d6      	b.n	80017ec <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800183e:	6820      	ldr	r0, [r4, #0]
 8001840:	f7ff fd86 	bl	8001350 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001844:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001846:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800184e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001856:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800185e:	e7ec      	b.n	800183a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001860 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001860:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001862:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001864:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001866:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001868:	ea23 0304 	bic.w	r3, r3, r4
 800186c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800186e:	6a03      	ldr	r3, [r0, #32]
 8001870:	408a      	lsls	r2, r1
 8001872:	431a      	orrs	r2, r3
 8001874:	6202      	str	r2, [r0, #32]
 8001876:	bd10      	pop	{r4, pc}

08001878 <HAL_TIM_PWM_Start>:
{
 8001878:	b510      	push	{r4, lr}
 800187a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800187c:	2201      	movs	r2, #1
 800187e:	6800      	ldr	r0, [r0, #0]
 8001880:	f7ff ffee 	bl	8001860 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_TIM_PWM_Start+0x28>)
}
 8001888:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800188a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800188c:	bf02      	ittt	eq
 800188e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001890:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001894:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	bd10      	pop	{r4, pc}
 80018a0:	40012c00 	.word	0x40012c00

080018a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d01f      	beq.n	80018ec <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80018ac:	68cb      	ldr	r3, [r1, #12]
 80018ae:	688a      	ldr	r2, [r1, #8]
 80018b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80018b6:	684a      	ldr	r2, [r1, #4]
 80018b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80018be:	680a      	ldr	r2, [r1, #0]
 80018c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80018c6:	690a      	ldr	r2, [r1, #16]
 80018c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80018ce:	694a      	ldr	r2, [r1, #20]
 80018d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018d6:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018dc:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80018de:	6802      	ldr	r2, [r0, #0]
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80018e2:	2300      	movs	r3, #0
 80018e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80018e8:	4618      	mov	r0, r3
 80018ea:	4770      	bx	lr
  __HAL_LOCK(htim);
 80018ec:	2002      	movs	r0, #2
}
 80018ee:	4770      	bx	lr

080018f0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80018f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80018f4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	f04f 0302 	mov.w	r3, #2
 80018fc:	d018      	beq.n	8001930 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80018fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001902:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001904:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001906:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001908:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800190a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800190e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4322      	orrs	r2, r4
 8001914:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800191c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001924:	2301      	movs	r3, #1
 8001926:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800192a:	2300      	movs	r3, #0
 800192c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001930:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001932:	bd10      	pop	{r4, pc}

08001934 <HAL_TIMEx_CommutationCallback>:
 8001934:	4770      	bx	lr

08001936 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001936:	4770      	bx	lr

08001938 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001938:	b084      	sub	sp, #16
 800193a:	a801      	add	r0, sp, #4
 800193c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001940:	b004      	add	sp, #16
 8001942:	2000      	movs	r0, #0
 8001944:	4770      	bx	lr

08001946 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001946:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800194a:	b29b      	uxth	r3, r3
 800194c:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001950:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001954:	2000      	movs	r0, #0
 8001956:	4770      	bx	lr

08001958 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001958:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800195c:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001960:	045b      	lsls	r3, r3, #17
 8001962:	0c5b      	lsrs	r3, r3, #17
 8001964:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001968:	2000      	movs	r0, #0
 800196a:	4770      	bx	lr

0800196c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800196c:	2000      	movs	r0, #0
 800196e:	4770      	bx	lr

08001970 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001970:	b084      	sub	sp, #16
 8001972:	b510      	push	{r4, lr}
 8001974:	ac03      	add	r4, sp, #12
 8001976:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 800197a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800197e:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001980:	2301      	movs	r3, #1
 8001982:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001986:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 800198a:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800198e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001992:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001996:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001998:	b29b      	uxth	r3, r3
 800199a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800199e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80019a2:	4610      	mov	r0, r2
 80019a4:	4770      	bx	lr
	...

080019a8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80019a8:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80019aa:	78cb      	ldrb	r3, [r1, #3]
 80019ac:	780a      	ldrb	r2, [r1, #0]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d80f      	bhi.n	80019d2 <USB_ActivateEndpoint+0x2a>
 80019b2:	e8df f003 	tbb	[pc, r3]
 80019b6:	6402      	.short	0x6402
 80019b8:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80019ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80019c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80019ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80019d2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80019d6:	780c      	ldrb	r4, [r1, #0]
 80019d8:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019dc:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 80019e0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80019e4:	401a      	ands	r2, r3
 80019e6:	432a      	orrs	r2, r5
 80019e8:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80019ec:	7a8a      	ldrb	r2, [r1, #10]
 80019ee:	780d      	ldrb	r5, [r1, #0]
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	f040 8097 	bne.w	8001b24 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80019f6:	784c      	ldrb	r4, [r1, #1]
 80019f8:	888a      	ldrh	r2, [r1, #4]
 80019fa:	2c00      	cmp	r4, #0
 80019fc:	d04a      	beq.n	8001a94 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80019fe:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001a02:	0852      	lsrs	r2, r2, #1
 8001a04:	b2a4      	uxth	r4, r4
 8001a06:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001a0a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001a0e:	0052      	lsls	r2, r2, #1
 8001a10:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a14:	780c      	ldrb	r4, [r1, #0]
 8001a16:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001a1a:	0652      	lsls	r2, r2, #25
 8001a1c:	d508      	bpl.n	8001a30 <USB_ActivateEndpoint+0x88>
 8001a1e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001a22:	4013      	ands	r3, r2
 8001a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a2c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001a30:	780a      	ldrb	r2, [r1, #0]
 8001a32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001a52:	2000      	movs	r0, #0
 8001a54:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001a56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	e7b2      	b.n	80019ce <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001a68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a6c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001a7c:	e7a7      	b.n	80019ce <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001a7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a82:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a92:	e79c      	b.n	80019ce <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001a94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a98:	0852      	lsrs	r2, r2, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001aa8:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001aac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ab0:	690d      	ldr	r5, [r1, #16]
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	780b      	ldrb	r3, [r1, #0]
 8001ab6:	3206      	adds	r2, #6
 8001ab8:	2d3e      	cmp	r5, #62	; 0x3e
 8001aba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001abe:	d929      	bls.n	8001b14 <USB_ActivateEndpoint+0x16c>
 8001ac0:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001ac4:	06eb      	lsls	r3, r5, #27
 8001ac6:	bf04      	itt	eq
 8001ac8:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001acc:	b29e      	uxtheq	r6, r3
 8001ace:	4b6e      	ldr	r3, [pc, #440]	; (8001c88 <USB_ActivateEndpoint+0x2e0>)
 8001ad0:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ada:	780a      	ldrb	r2, [r1, #0]
 8001adc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ae0:	045e      	lsls	r6, r3, #17
 8001ae2:	d50b      	bpl.n	8001afc <USB_ActivateEndpoint+0x154>
 8001ae4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aec:	051b      	lsls	r3, r3, #20
 8001aee:	0d1b      	lsrs	r3, r3, #20
 8001af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001afc:	780a      	ldrb	r2, [r1, #0]
 8001afe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b12:	e798      	b.n	8001a46 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001b14:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	bf44      	itt	mi
 8001b1c:	3301      	addmi	r3, #1
 8001b1e:	b29b      	uxthmi	r3, r3
 8001b20:	029b      	lsls	r3, r3, #10
 8001b22:	e7d7      	b.n	8001ad4 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001b24:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001b28:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001b2c:	0512      	lsls	r2, r2, #20
 8001b2e:	0d12      	lsrs	r2, r2, #20
 8001b30:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b38:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001b3c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001b40:	780c      	ldrb	r4, [r1, #0]
 8001b42:	b292      	uxth	r2, r2
 8001b44:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001b48:	88cc      	ldrh	r4, [r1, #6]
 8001b4a:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001b4e:	0864      	lsrs	r4, r4, #1
 8001b50:	0064      	lsls	r4, r4, #1
 8001b52:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001b56:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001b5a:	780c      	ldrb	r4, [r1, #0]
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	3204      	adds	r2, #4
 8001b60:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001b64:	890c      	ldrh	r4, [r1, #8]
 8001b66:	0864      	lsrs	r4, r4, #1
 8001b68:	0064      	lsls	r4, r4, #1
 8001b6a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001b6e:	784a      	ldrb	r2, [r1, #1]
 8001b70:	780c      	ldrb	r4, [r1, #0]
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d147      	bne.n	8001c06 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b76:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b7a:	0455      	lsls	r5, r2, #17
 8001b7c:	d508      	bpl.n	8001b90 <USB_ActivateEndpoint+0x1e8>
 8001b7e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b82:	4013      	ands	r3, r2
 8001b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b90:	780a      	ldrb	r2, [r1, #0]
 8001b92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b96:	065c      	lsls	r4, r3, #25
 8001b98:	d50b      	bpl.n	8001bb2 <USB_ActivateEndpoint+0x20a>
 8001b9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ba2:	051b      	lsls	r3, r3, #20
 8001ba4:	0d1b      	lsrs	r3, r3, #20
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001baa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001bb2:	780a      	ldrb	r2, [r1, #0]
 8001bb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bbc:	051b      	lsls	r3, r3, #20
 8001bbe:	0d1b      	lsrs	r3, r3, #20
 8001bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001bcc:	f248 0280 	movw	r2, #32896	; 0x8080
 8001bd0:	780c      	ldrb	r4, [r1, #0]
 8001bd2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001bec:	7809      	ldrb	r1, [r1, #0]
 8001bee:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001c04:	e725      	b.n	8001a52 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c06:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001c0a:	0452      	lsls	r2, r2, #17
 8001c0c:	d508      	bpl.n	8001c20 <USB_ActivateEndpoint+0x278>
 8001c0e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c20:	780a      	ldrb	r2, [r1, #0]
 8001c22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c26:	065b      	lsls	r3, r3, #25
 8001c28:	d50b      	bpl.n	8001c42 <USB_ActivateEndpoint+0x29a>
 8001c2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c32:	051b      	lsls	r3, r3, #20
 8001c34:	0d1b      	lsrs	r3, r3, #20
 8001c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001c42:	780a      	ldrb	r2, [r1, #0]
 8001c44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c4c:	051b      	lsls	r3, r3, #20
 8001c4e:	0d1b      	lsrs	r3, r3, #20
 8001c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c58:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001c5c:	f248 0280 	movw	r2, #32896	; 0x8080
 8001c60:	780c      	ldrb	r4, [r1, #0]
 8001c62:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c78:	7809      	ldrb	r1, [r1, #0]
 8001c7a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c86:	e7b8      	b.n	8001bfa <USB_ActivateEndpoint+0x252>
 8001c88:	ffff8000 	.word	0xffff8000

08001c8c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001c8c:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001c8e:	7a8c      	ldrb	r4, [r1, #10]
 8001c90:	784a      	ldrb	r2, [r1, #1]
 8001c92:	780b      	ldrb	r3, [r1, #0]
 8001c94:	bbcc      	cbnz	r4, 8001d0a <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001c96:	b302      	cbz	r2, 8001cda <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c98:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c9c:	0652      	lsls	r2, r2, #25
 8001c9e:	d50b      	bpl.n	8001cb8 <USB_DeactivateEndpoint+0x2c>
 8001ca0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ca4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ca8:	0512      	lsls	r2, r2, #20
 8001caa:	0d12      	lsrs	r2, r2, #20
 8001cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cb0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001cb4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001cb8:	780a      	ldrb	r2, [r1, #0]
 8001cba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001cda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001cde:	0454      	lsls	r4, r2, #17
 8001ce0:	d50b      	bpl.n	8001cfa <USB_DeactivateEndpoint+0x6e>
 8001ce2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ce6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cea:	0512      	lsls	r2, r2, #20
 8001cec:	0d12      	lsrs	r2, r2, #20
 8001cee:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001cfa:	780a      	ldrb	r2, [r1, #0]
 8001cfc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d08:	e7dd      	b.n	8001cc6 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d148      	bne.n	8001da0 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001d0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d12:	0452      	lsls	r2, r2, #17
 8001d14:	d50b      	bpl.n	8001d2e <USB_DeactivateEndpoint+0xa2>
 8001d16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d1e:	0512      	lsls	r2, r2, #20
 8001d20:	0d12      	lsrs	r2, r2, #20
 8001d22:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001d26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d2a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d2e:	780a      	ldrb	r2, [r1, #0]
 8001d30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d34:	065c      	lsls	r4, r3, #25
 8001d36:	d50b      	bpl.n	8001d50 <USB_DeactivateEndpoint+0xc4>
 8001d38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d40:	051b      	lsls	r3, r3, #20
 8001d42:	0d1b      	lsrs	r3, r3, #20
 8001d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001d50:	780a      	ldrb	r2, [r1, #0]
 8001d52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d5a:	051b      	lsls	r3, r3, #20
 8001d5c:	0d1b      	lsrs	r3, r3, #20
 8001d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d6a:	f248 0280 	movw	r2, #32896	; 0x8080
 8001d6e:	780c      	ldrb	r4, [r1, #0]
 8001d70:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	4313      	orrs	r3, r2
 8001d82:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001d86:	7809      	ldrb	r1, [r1, #0]
 8001d88:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001d9e:	e79a      	b.n	8001cd6 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001da0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001da4:	0452      	lsls	r2, r2, #17
 8001da6:	d50b      	bpl.n	8001dc0 <USB_DeactivateEndpoint+0x134>
 8001da8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001db0:	0512      	lsls	r2, r2, #20
 8001db2:	0d12      	lsrs	r2, r2, #20
 8001db4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001db8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dbc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001dc0:	780a      	ldrb	r2, [r1, #0]
 8001dc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dc6:	065b      	lsls	r3, r3, #25
 8001dc8:	d50b      	bpl.n	8001de2 <USB_DeactivateEndpoint+0x156>
 8001dca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dd2:	051b      	lsls	r3, r3, #20
 8001dd4:	0d1b      	lsrs	r3, r3, #20
 8001dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dde:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001de2:	780a      	ldrb	r2, [r1, #0]
 8001de4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dec:	051b      	lsls	r3, r3, #20
 8001dee:	0d1b      	lsrs	r3, r3, #20
 8001df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001dfc:	f248 0280 	movw	r2, #32896	; 0x8080
 8001e00:	780c      	ldrb	r4, [r1, #0]
 8001e02:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e18:	7809      	ldrb	r1, [r1, #0]
 8001e1a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e26:	e7b5      	b.n	8001d94 <USB_DeactivateEndpoint+0x108>

08001e28 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001e28:	780a      	ldrb	r2, [r1, #0]
 8001e2a:	b98a      	cbnz	r2, 8001e50 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001e2c:	8803      	ldrh	r3, [r0, #0]
 8001e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e3e:	f083 0310 	eor.w	r3, r3, #16
 8001e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4a:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	4770      	bx	lr
    if (ep->is_in)
 8001e50:	784b      	ldrb	r3, [r1, #1]
 8001e52:	b183      	cbz	r3, 8001e76 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001e54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001e74:	e7ea      	b.n	8001e4c <USB_EPSetStall+0x24>
 8001e76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e8a:	e7ed      	b.n	8001e68 <USB_EPSetStall+0x40>

08001e8c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001e8c:	784b      	ldrb	r3, [r1, #1]
 8001e8e:	780a      	ldrb	r2, [r1, #0]
 8001e90:	b313      	cbz	r3, 8001ed8 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e96:	065b      	lsls	r3, r3, #25
 8001e98:	d50b      	bpl.n	8001eb2 <USB_EPClearStall+0x26>
 8001e9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ea2:	051b      	lsls	r3, r3, #20
 8001ea4:	0d1b      	lsrs	r3, r3, #20
 8001ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001eae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001eb2:	780a      	ldrb	r2, [r1, #0]
 8001eb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ed8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001edc:	045b      	lsls	r3, r3, #17
 8001ede:	d50b      	bpl.n	8001ef8 <USB_EPClearStall+0x6c>
 8001ee0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ee8:	051b      	lsls	r3, r3, #20
 8001eea:	0d1b      	lsrs	r3, r3, #20
 8001eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ef8:	780a      	ldrb	r2, [r1, #0]
 8001efa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001f0e:	e7db      	b.n	8001ec8 <USB_EPClearStall+0x3c>

08001f10 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001f10:	b911      	cbnz	r1, 8001f18 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001f18:	2000      	movs	r0, #0
 8001f1a:	4770      	bx	lr

08001f1c <USB_DevConnect>:
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	4770      	bx	lr

08001f20 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001f20:	2000      	movs	r0, #0
 8001f22:	4770      	bx	lr

08001f24 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001f24:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001f28:	b280      	uxth	r0, r0
 8001f2a:	4770      	bx	lr

08001f2c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	4770      	bx	lr

08001f30 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001f30:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001f32:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001f34:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001f36:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001f3a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001f3c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001f40:	42a3      	cmp	r3, r4
 8001f42:	d100      	bne.n	8001f46 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001f44:	bd10      	pop	{r4, pc}
 8001f46:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001f4a:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001f4e:	3401      	adds	r4, #1
 8001f50:	e7f6      	b.n	8001f40 <USB_WritePMA+0x10>
	...

08001f54 <USB_EPStartXfer>:
{
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001f58:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001f5a:	7849      	ldrb	r1, [r1, #1]
{
 8001f5c:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001f5e:	2901      	cmp	r1, #1
 8001f60:	6933      	ldr	r3, [r6, #16]
 8001f62:	7ab0      	ldrb	r0, [r6, #10]
 8001f64:	d166      	bne.n	8002034 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001f6a:	bf9b      	ittet	ls
 8001f6c:	2300      	movls	r3, #0
 8001f6e:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001f70:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001f72:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001f74:	bf88      	it	hi
 8001f76:	61b2      	strhi	r2, [r6, #24]
 8001f78:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001f7a:	bb10      	cbnz	r0, 8001fc2 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001f7c:	88b2      	ldrh	r2, [r6, #4]
 8001f7e:	6971      	ldr	r1, [r6, #20]
 8001f80:	4628      	mov	r0, r5
 8001f82:	f7ff ffd5 	bl	8001f30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001f86:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001f8a:	7832      	ldrb	r2, [r6, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3302      	adds	r3, #2
 8001f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f94:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001f98:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001f9c:	7832      	ldrb	r2, [r6, #0]
 8001f9e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fba:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001fc2:	7832      	ldrb	r2, [r6, #0]
 8001fc4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001fc8:	00d2      	lsls	r2, r2, #3
 8001fca:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001fce:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001fd2:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001fd4:	d01a      	beq.n	800200c <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001fd6:	3102      	adds	r1, #2
 8001fd8:	440a      	add	r2, r1
 8001fda:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001fde:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001fe2:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001fe4:	6971      	ldr	r1, [r6, #20]
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f7ff ffa2 	bl	8001f30 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001fec:	7873      	ldrb	r3, [r6, #1]
 8001fee:	7832      	ldrb	r2, [r6, #0]
 8001ff0:	b99b      	cbnz	r3, 800201a <USB_EPStartXfer+0xc6>
 8001ff2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ffa:	051b      	lsls	r3, r3, #20
 8001ffc:	0d1b      	lsrs	r3, r3, #20
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002006:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800200a:	e7c7      	b.n	8001f9c <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800200c:	440a      	add	r2, r1
 800200e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002012:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8002016:	88f2      	ldrh	r2, [r6, #6]
 8002018:	e7e4      	b.n	8001fe4 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800201a:	2b01      	cmp	r3, #1
 800201c:	d1be      	bne.n	8001f9c <USB_EPStartXfer+0x48>
 800201e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002026:	051b      	lsls	r3, r3, #20
 8002028:	0d1b      	lsrs	r3, r3, #20
 800202a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800202e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002032:	e7e8      	b.n	8002006 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002034:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8002036:	bf93      	iteet	ls
 8002038:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 800203a:	1ad2      	subhi	r2, r2, r3
 800203c:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 800203e:	61b3      	strls	r3, [r6, #24]
 8002040:	bf98      	it	ls
 8002042:	4613      	movls	r3, r2
 8002044:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8002046:	bb70      	cbnz	r0, 80020a6 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002048:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800204c:	2b3e      	cmp	r3, #62	; 0x3e
 800204e:	b289      	uxth	r1, r1
 8002050:	f101 0106 	add.w	r1, r1, #6
 8002054:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002058:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 800205c:	d918      	bls.n	8002090 <USB_EPStartXfer+0x13c>
 800205e:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002062:	06db      	lsls	r3, r3, #27
 8002064:	bf04      	itt	eq
 8002066:	f102 33ff 	addeq.w	r3, r2, #4294967295
 800206a:	b29a      	uxtheq	r2, r3
 800206c:	4b38      	ldr	r3, [pc, #224]	; (8002150 <USB_EPStartXfer+0x1fc>)
 800206e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002072:	b29b      	uxth	r3, r3
 8002074:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002078:	7832      	ldrb	r2, [r6, #0]
 800207a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800207e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800208e:	e790      	b.n	8001fb2 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002090:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002094:	07dc      	lsls	r4, r3, #31
 8002096:	bf44      	itt	mi
 8002098:	3201      	addmi	r2, #1
 800209a:	b292      	uxthmi	r2, r2
 800209c:	0292      	lsls	r2, r2, #10
 800209e:	b292      	uxth	r2, r2
 80020a0:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 80020a4:	e7e8      	b.n	8002078 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80020a6:	b9b9      	cbnz	r1, 80020d8 <USB_EPStartXfer+0x184>
 80020a8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80020ac:	2b3e      	cmp	r3, #62	; 0x3e
 80020ae:	b289      	uxth	r1, r1
 80020b0:	f101 0102 	add.w	r1, r1, #2
 80020b4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80020b8:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 80020bc:	d928      	bls.n	8002110 <USB_EPStartXfer+0x1bc>
 80020be:	f3c3 104f 	ubfx	r0, r3, #5, #16
 80020c2:	06da      	lsls	r2, r3, #27
 80020c4:	bf04      	itt	eq
 80020c6:	f100 32ff 	addeq.w	r2, r0, #4294967295
 80020ca:	b290      	uxtheq	r0, r2
 80020cc:	4a20      	ldr	r2, [pc, #128]	; (8002150 <USB_EPStartXfer+0x1fc>)
 80020ce:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80020d2:	b292      	uxth	r2, r2
 80020d4:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 80020d8:	7872      	ldrb	r2, [r6, #1]
 80020da:	7831      	ldrb	r1, [r6, #0]
 80020dc:	bb5a      	cbnz	r2, 8002136 <USB_EPStartXfer+0x1e2>
 80020de:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80020e2:	2b3e      	cmp	r3, #62	; 0x3e
 80020e4:	b292      	uxth	r2, r2
 80020e6:	f102 0206 	add.w	r2, r2, #6
 80020ea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80020ee:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80020f2:	d915      	bls.n	8002120 <USB_EPStartXfer+0x1cc>
 80020f4:	f3c3 114f 	ubfx	r1, r3, #5, #16
 80020f8:	06dc      	lsls	r4, r3, #27
 80020fa:	bf04      	itt	eq
 80020fc:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8002100:	b299      	uxtheq	r1, r3
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <USB_EPStartXfer+0x1fc>)
 8002104:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002108:	b29b      	uxth	r3, r3
 800210a:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 800210e:	e7b3      	b.n	8002078 <USB_EPStartXfer+0x124>
 8002110:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002114:	07d8      	lsls	r0, r3, #31
 8002116:	bf44      	itt	mi
 8002118:	3201      	addmi	r2, #1
 800211a:	b292      	uxthmi	r2, r2
 800211c:	0292      	lsls	r2, r2, #10
 800211e:	e7d8      	b.n	80020d2 <USB_EPStartXfer+0x17e>
 8002120:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002124:	07db      	lsls	r3, r3, #31
 8002126:	bf44      	itt	mi
 8002128:	3101      	addmi	r1, #1
 800212a:	b289      	uxthmi	r1, r1
 800212c:	0289      	lsls	r1, r1, #10
 800212e:	b289      	uxth	r1, r1
 8002130:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002134:	e7a0      	b.n	8002078 <USB_EPStartXfer+0x124>
 8002136:	2a01      	cmp	r2, #1
 8002138:	d19e      	bne.n	8002078 <USB_EPStartXfer+0x124>
 800213a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800213e:	b292      	uxth	r2, r2
 8002140:	3202      	adds	r2, #2
 8002142:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002146:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800214a:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 800214e:	e793      	b.n	8002078 <USB_EPStartXfer+0x124>
 8002150:	ffff8000 	.word	0xffff8000

08002154 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002154:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002156:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002158:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800215a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800215e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002160:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002164:	42a3      	cmp	r3, r4
 8002166:	d100      	bne.n	800216a <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002168:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800216a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800216e:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002172:	3401      	adds	r4, #1
 8002174:	e7f6      	b.n	8002164 <USB_ReadPMA+0x10>

08002176 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002176:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800217a:	b11b      	cbz	r3, 8002184 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800217c:	2000      	movs	r0, #0
 800217e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002182:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002184:	2002      	movs	r0, #2
  }
}
 8002186:	4770      	bx	lr

08002188 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002188:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800218c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800218e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002192:	b15b      	cbz	r3, 80021ac <USBD_CDC_EP0_RxReady+0x24>
 8002194:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002198:	28ff      	cmp	r0, #255	; 0xff
 800219a:	d007      	beq.n	80021ac <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80021a2:	4621      	mov	r1, r4
 80021a4:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80021a6:	23ff      	movs	r3, #255	; 0xff
 80021a8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 80021ac:	2000      	movs	r0, #0
 80021ae:	bd10      	pop	{r4, pc}

080021b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80021b0:	2343      	movs	r3, #67	; 0x43
 80021b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80021b4:	4800      	ldr	r0, [pc, #0]	; (80021b8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80021b6:	4770      	bx	lr
 80021b8:	20000040 	.word	0x20000040

080021bc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80021bc:	2343      	movs	r3, #67	; 0x43
 80021be:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80021c0:	4800      	ldr	r0, [pc, #0]	; (80021c4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80021c2:	4770      	bx	lr
 80021c4:	20000084 	.word	0x20000084

080021c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80021c8:	2343      	movs	r3, #67	; 0x43
 80021ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80021cc:	4800      	ldr	r0, [pc, #0]	; (80021d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80021ce:	4770      	bx	lr
 80021d0:	200000d4 	.word	0x200000d4

080021d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80021d4:	230a      	movs	r3, #10
 80021d6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80021d8:	4800      	ldr	r0, [pc, #0]	; (80021dc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80021da:	4770      	bx	lr
 80021dc:	200000c8 	.word	0x200000c8

080021e0 <USBD_CDC_DataOut>:
{      
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80021e4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80021e8:	f001 f862 	bl	80032b0 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 80021ec:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80021f0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80021f4:	b14b      	cbz	r3, 800220a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80021f6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80021fa:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002204:	4798      	blx	r3
    return USBD_OK;
 8002206:	2000      	movs	r0, #0
 8002208:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800220a:	2002      	movs	r0, #2
}
 800220c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002210 <USBD_CDC_Setup>:
{
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002212:	780f      	ldrb	r7, [r1, #0]
{
 8002214:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002216:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 800221a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800221c:	d023      	beq.n	8002266 <USBD_CDC_Setup+0x56>
 800221e:	2b20      	cmp	r3, #32
 8002220:	d119      	bne.n	8002256 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002222:	88ca      	ldrh	r2, [r1, #6]
 8002224:	784b      	ldrb	r3, [r1, #1]
 8002226:	b1c2      	cbz	r2, 800225a <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002228:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800222a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800222e:	d50b      	bpl.n	8002248 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002230:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002234:	4618      	mov	r0, r3
 8002236:	688f      	ldr	r7, [r1, #8]
 8002238:	4629      	mov	r1, r5
 800223a:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 800223c:	4629      	mov	r1, r5
 800223e:	4630      	mov	r0, r6
 8002240:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8002242:	f000 fb8a 	bl	800295a <USBD_CtlSendData>
      break;
 8002246:	e006      	b.n	8002256 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002248:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800224c:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002250:	4629      	mov	r1, r5
 8002252:	f000 fb97 	bl	8002984 <USBD_CtlPrepareRx>
}
 8002256:	2000      	movs	r0, #0
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800225a:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800225e:	6884      	ldr	r4, [r0, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	47a0      	blx	r4
 8002264:	e7f7      	b.n	8002256 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002266:	784b      	ldrb	r3, [r1, #1]
 8002268:	2b0a      	cmp	r3, #10
 800226a:	d1f4      	bne.n	8002256 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 800226c:	2201      	movs	r2, #1
 800226e:	4901      	ldr	r1, [pc, #4]	; (8002274 <USBD_CDC_Setup+0x64>)
 8002270:	e7e7      	b.n	8002242 <USBD_CDC_Setup+0x32>
 8002272:	bf00      	nop
 8002274:	200001e0 	.word	0x200001e0

08002278 <USBD_CDC_DeInit>:
{
 8002278:	b510      	push	{r4, lr}
 800227a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800227c:	2181      	movs	r1, #129	; 0x81
 800227e:	f000 ffb3 	bl	80031e8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002282:	2101      	movs	r1, #1
 8002284:	4620      	mov	r0, r4
 8002286:	f000 ffaf 	bl	80031e8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800228a:	2182      	movs	r1, #130	; 0x82
 800228c:	4620      	mov	r0, r4
 800228e:	f000 ffab 	bl	80031e8 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002292:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002296:	b153      	cbz	r3, 80022ae <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002298:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80022a0:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80022a4:	f001 f80e 	bl	80032c4 <USBD_static_free>
    pdev->pClassData = NULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80022ae:	2000      	movs	r0, #0
 80022b0:	bd10      	pop	{r4, pc}

080022b2 <USBD_CDC_Init>:
{
 80022b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80022b4:	7c03      	ldrb	r3, [r0, #16]
{
 80022b6:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80022b8:	bb7b      	cbnz	r3, 800231a <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 80022ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022be:	2202      	movs	r2, #2
 80022c0:	2181      	movs	r1, #129	; 0x81
 80022c2:	f000 ff81 	bl	80031c8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80022c6:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 80022ca:	2202      	movs	r2, #2
 80022cc:	2101      	movs	r1, #1
 80022ce:	4620      	mov	r0, r4
 80022d0:	f000 ff7a 	bl	80031c8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 80022d4:	2308      	movs	r3, #8
 80022d6:	2203      	movs	r2, #3
 80022d8:	2182      	movs	r1, #130	; 0x82
 80022da:	4620      	mov	r0, r4
 80022dc:	f000 ff74 	bl	80031c8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80022e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80022e4:	f000 ffea 	bl	80032bc <USBD_static_malloc>
 80022e8:	4606      	mov	r6, r0
 80022ea:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80022ee:	b320      	cbz	r0, 800233a <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 80022f0:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80022f2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80022fa:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80022fc:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002300:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002304:	b987      	cbnz	r7, 8002328 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800230e:	2101      	movs	r1, #1
 8002310:	4620      	mov	r0, r4
 8002312:	f000 ffbf 	bl	8003294 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002316:	4638      	mov	r0, r7
 8002318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800231a:	2340      	movs	r3, #64	; 0x40
 800231c:	2202      	movs	r2, #2
 800231e:	2181      	movs	r1, #129	; 0x81
 8002320:	f000 ff52 	bl	80031c8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002324:	2340      	movs	r3, #64	; 0x40
 8002326:	e7d0      	b.n	80022ca <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002328:	2340      	movs	r3, #64	; 0x40
 800232a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800232e:	2101      	movs	r1, #1
 8002330:	4620      	mov	r0, r4
 8002332:	f000 ffaf 	bl	8003294 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002336:	4628      	mov	r0, r5
 8002338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 800233a:	2001      	movs	r0, #1
}
 800233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800233e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800233e:	b119      	cbz	r1, 8002348 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002340:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002344:	2000      	movs	r0, #0
 8002346:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002348:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800234a:	4770      	bx	lr

0800234c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800234c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002350:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002352:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002356:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800235a:	4770      	bx	lr

0800235c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800235c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002360:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002362:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002366:	4770      	bx	lr

08002368 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002368:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800236c:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 800236e:	b172      	cbz	r2, 800238e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002370:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002374:	2301      	movs	r3, #1
 8002376:	b964      	cbnz	r4, 8002392 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002378:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800237c:	2181      	movs	r1, #129	; 0x81
 800237e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002382:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002386:	f000 ff77 	bl	8003278 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800238a:	4620      	mov	r0, r4
 800238c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800238e:	2002      	movs	r0, #2
 8002390:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002392:	4618      	mov	r0, r3
  }
}
 8002394:	bd10      	pop	{r4, pc}

08002396 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002396:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800239a:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800239c:	b162      	cbz	r2, 80023b8 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800239e:	7c04      	ldrb	r4, [r0, #16]
 80023a0:	b944      	cbnz	r4, 80023b4 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80023a2:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80023a6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80023aa:	2101      	movs	r1, #1
 80023ac:	f000 ff72 	bl	8003294 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80023b0:	2000      	movs	r0, #0
 80023b2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	e7f6      	b.n	80023a6 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80023b8:	2002      	movs	r0, #2
  }
}
 80023ba:	bd10      	pop	{r4, pc}

080023bc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80023bc:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80023be:	b180      	cbz	r0, 80023e2 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80023c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80023c4:	b113      	cbz	r3, 80023cc <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80023cc:	b109      	cbz	r1, 80023d2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80023ce:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80023d2:	2301      	movs	r3, #1
  pdev->id = id;
 80023d4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80023d6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80023da:	f000 fe9f 	bl	800311c <USBD_LL_Init>
  
  return USBD_OK; 
 80023de:	2000      	movs	r0, #0
 80023e0:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80023e2:	2002      	movs	r0, #2
}
 80023e4:	bd08      	pop	{r3, pc}

080023e6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80023e6:	b119      	cbz	r1, 80023f0 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80023e8:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80023ec:	2000      	movs	r0, #0
 80023ee:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80023f0:	2002      	movs	r0, #2
  }
  
  return status;
}
 80023f2:	4770      	bx	lr

080023f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80023f4:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80023f6:	f000 fed9 	bl	80031ac <USBD_LL_Start>
  
  return USBD_OK;  
}
 80023fa:	2000      	movs	r0, #0
 80023fc:	bd08      	pop	{r3, pc}

080023fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80023fe:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002400:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002404:	b90b      	cbnz	r3, 800240a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002406:	2002      	movs	r0, #2
 8002408:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4798      	blx	r3
 800240e:	2800      	cmp	r0, #0
 8002410:	d1f9      	bne.n	8002406 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002412:	bd08      	pop	{r3, pc}

08002414 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002414:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002416:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4798      	blx	r3
  return USBD_OK;
}
 800241e:	2000      	movs	r0, #0
 8002420:	bd08      	pop	{r3, pc}

08002422 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002422:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002424:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002428:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800242a:	4628      	mov	r0, r5
 800242c:	f000 fa65 	bl	80028fa <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002430:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002432:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002436:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800243a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800243e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002442:	f001 031f 	and.w	r3, r1, #31
 8002446:	2b01      	cmp	r3, #1
 8002448:	d00e      	beq.n	8002468 <USBD_LL_SetupStage+0x46>
 800244a:	d307      	bcc.n	800245c <USBD_LL_SetupStage+0x3a>
 800244c:	2b02      	cmp	r3, #2
 800244e:	d010      	beq.n	8002472 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002450:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002454:	4620      	mov	r0, r4
 8002456:	f000 fed5 	bl	8003204 <USBD_LL_StallEP>
    break;
 800245a:	e003      	b.n	8002464 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800245c:	4629      	mov	r1, r5
 800245e:	4620      	mov	r0, r4
 8002460:	f000 f8d6 	bl	8002610 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002464:	2000      	movs	r0, #0
 8002466:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002468:	4629      	mov	r1, r5
 800246a:	4620      	mov	r0, r4
 800246c:	f000 f9ca 	bl	8002804 <USBD_StdItfReq>
    break;
 8002470:	e7f8      	b.n	8002464 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002472:	4629      	mov	r1, r5
 8002474:	4620      	mov	r0, r4
 8002476:	f000 f9dd 	bl	8002834 <USBD_StdEPReq>
    break;
 800247a:	e7f3      	b.n	8002464 <USBD_LL_SetupStage+0x42>

0800247c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4604      	mov	r4, r0
 8002480:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002482:	bb11      	cbnz	r1, 80024ca <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002484:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002488:	2b03      	cmp	r3, #3
 800248a:	d10f      	bne.n	80024ac <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800248c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002490:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002494:	4293      	cmp	r3, r2
 8002496:	d90b      	bls.n	80024b0 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002498:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800249a:	429a      	cmp	r2, r3
 800249c:	bf28      	it	cs
 800249e:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80024a0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80024a4:	b292      	uxth	r2, r2
 80024a6:	4629      	mov	r1, r5
 80024a8:	f000 fa7b 	bl	80029a2 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80024ac:	2000      	movs	r0, #0
 80024ae:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80024b0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	b123      	cbz	r3, 80024c2 <USBD_LL_DataOutStage+0x46>
 80024b8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024bc:	2a03      	cmp	r2, #3
 80024be:	d100      	bne.n	80024c2 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80024c0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80024c2:	4620      	mov	r0, r4
 80024c4:	f000 fa75 	bl	80029b2 <USBD_CtlSendStatus>
 80024c8:	e7f0      	b.n	80024ac <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80024ca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0eb      	beq.n	80024ac <USBD_LL_DataOutStage+0x30>
 80024d4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024d8:	2a03      	cmp	r2, #3
 80024da:	d1e7      	bne.n	80024ac <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80024dc:	4798      	blx	r3
 80024de:	e7e5      	b.n	80024ac <USBD_LL_DataOutStage+0x30>

080024e0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4613      	mov	r3, r2
 80024e4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80024e6:	460e      	mov	r6, r1
 80024e8:	2900      	cmp	r1, #0
 80024ea:	d13d      	bne.n	8002568 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80024ec:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80024f0:	2a02      	cmp	r2, #2
 80024f2:	d10f      	bne.n	8002514 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80024f4:	69c5      	ldr	r5, [r0, #28]
 80024f6:	6a02      	ldr	r2, [r0, #32]
 80024f8:	4295      	cmp	r5, r2
 80024fa:	d914      	bls.n	8002526 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80024fc:	1aaa      	subs	r2, r5, r2
 80024fe:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002500:	4619      	mov	r1, r3
 8002502:	b292      	uxth	r2, r2
 8002504:	f000 fa36 	bl	8002974 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002508:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800250a:	461a      	mov	r2, r3
 800250c:	4619      	mov	r1, r3
 800250e:	4620      	mov	r0, r4
 8002510:	f000 fec0 	bl	8003294 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002514:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002518:	2b01      	cmp	r3, #1
 800251a:	d102      	bne.n	8002522 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002522:	2000      	movs	r0, #0
 8002524:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002526:	6983      	ldr	r3, [r0, #24]
 8002528:	fbb3 f5f2 	udiv	r5, r3, r2
 800252c:	fb02 3515 	mls	r5, r2, r5, r3
 8002530:	b965      	cbnz	r5, 800254c <USBD_LL_DataInStage+0x6c>
 8002532:	429a      	cmp	r2, r3
 8002534:	d80a      	bhi.n	800254c <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002536:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800253a:	4293      	cmp	r3, r2
 800253c:	d206      	bcs.n	800254c <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800253e:	462a      	mov	r2, r5
 8002540:	f000 fa18 	bl	8002974 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002544:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002548:	462b      	mov	r3, r5
 800254a:	e7de      	b.n	800250a <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800254c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	b12b      	cbz	r3, 8002560 <USBD_LL_DataInStage+0x80>
 8002554:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002558:	2a03      	cmp	r2, #3
 800255a:	d101      	bne.n	8002560 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800255c:	4620      	mov	r0, r4
 800255e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002560:	4620      	mov	r0, r4
 8002562:	f000 fa31 	bl	80029c8 <USBD_CtlReceiveStatus>
 8002566:	e7d5      	b.n	8002514 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002568:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0d7      	beq.n	8002522 <USBD_LL_DataInStage+0x42>
 8002572:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002576:	2a03      	cmp	r2, #3
 8002578:	d1d3      	bne.n	8002522 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800257a:	4798      	blx	r3
 800257c:	e7d1      	b.n	8002522 <USBD_LL_DataInStage+0x42>

0800257e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800257e:	2200      	movs	r2, #0
{
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002584:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002586:	4611      	mov	r1, r2
 8002588:	2340      	movs	r3, #64	; 0x40
 800258a:	f000 fe1d 	bl	80031c8 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800258e:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002590:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002594:	2200      	movs	r2, #0
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	4620      	mov	r0, r4
 800259a:	f000 fe15 	bl	80031c8 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800259e:	2301      	movs	r3, #1
 80025a0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80025a4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80025a8:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80025aa:	b12b      	cbz	r3, 80025b8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80025ac:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80025b0:	7921      	ldrb	r1, [r4, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4620      	mov	r0, r4
 80025b6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80025b8:	2000      	movs	r0, #0
 80025ba:	bd38      	pop	{r3, r4, r5, pc}

080025bc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80025bc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80025be:	2000      	movs	r0, #0
 80025c0:	4770      	bx	lr

080025c2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80025c2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80025c6:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80025ca:	2304      	movs	r3, #4
 80025cc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80025d0:	2000      	movs	r0, #0
 80025d2:	4770      	bx	lr

080025d4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80025d4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80025d8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80025dc:	2000      	movs	r0, #0
 80025de:	4770      	bx	lr

080025e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80025e0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80025e2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80025e6:	2a03      	cmp	r2, #3
 80025e8:	d104      	bne.n	80025f4 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80025ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	b103      	cbz	r3, 80025f4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80025f2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80025f4:	2000      	movs	r0, #0
 80025f6:	bd08      	pop	{r3, pc}

080025f8 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80025f8:	b510      	push	{r4, lr}
 80025fa:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	f000 fe01 	bl	8003204 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002602:	4620      	mov	r0, r4
}
 8002604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002608:	2100      	movs	r1, #0
 800260a:	f000 bdfb 	b.w	8003204 <USBD_LL_StallEP>
	...

08002610 <USBD_StdDevReq>:
{
 8002610:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002612:	784b      	ldrb	r3, [r1, #1]
{
 8002614:	4604      	mov	r4, r0
 8002616:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002618:	2b09      	cmp	r3, #9
 800261a:	d879      	bhi.n	8002710 <USBD_StdDevReq+0x100>
 800261c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002620:	00e500c9 	.word	0x00e500c9
 8002624:	00d90078 	.word	0x00d90078
 8002628:	006d0078 	.word	0x006d0078
 800262c:	0078000a 	.word	0x0078000a
 8002630:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002634:	884b      	ldrh	r3, [r1, #2]
 8002636:	0a1a      	lsrs	r2, r3, #8
 8002638:	3a01      	subs	r2, #1
 800263a:	2a06      	cmp	r2, #6
 800263c:	d868      	bhi.n	8002710 <USBD_StdDevReq+0x100>
 800263e:	e8df f002 	tbb	[pc, r2]
 8002642:	1c04      	.short	0x1c04
 8002644:	49676729 	.word	0x49676729
 8002648:	52          	.byte	0x52
 8002649:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800264a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800264e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002650:	f10d 0106 	add.w	r1, sp, #6
 8002654:	7c20      	ldrb	r0, [r4, #16]
 8002656:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002658:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800265c:	2a00      	cmp	r2, #0
 800265e:	d067      	beq.n	8002730 <USBD_StdDevReq+0x120>
 8002660:	88eb      	ldrh	r3, [r5, #6]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d064      	beq.n	8002730 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002666:	429a      	cmp	r2, r3
 8002668:	bf28      	it	cs
 800266a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 800266c:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 800266e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002672:	4620      	mov	r0, r4
 8002674:	f000 f971 	bl	800295a <USBD_CtlSendData>
 8002678:	e05a      	b.n	8002730 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800267a:	7c02      	ldrb	r2, [r0, #16]
 800267c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002680:	b932      	cbnz	r2, 8002690 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002684:	f10d 0006 	add.w	r0, sp, #6
 8002688:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800268a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800268c:	7043      	strb	r3, [r0, #1]
 800268e:	e7e3      	b.n	8002658 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	e7f7      	b.n	8002684 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b05      	cmp	r3, #5
 8002698:	d83a      	bhi.n	8002710 <USBD_StdDevReq+0x100>
 800269a:	e8df f003 	tbb	[pc, r3]
 800269e:	0703      	.short	0x0703
 80026a0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80026a4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	e7d1      	b.n	8002650 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80026ac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	e7cd      	b.n	8002650 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80026b4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	e7c9      	b.n	8002650 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80026bc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	e7c5      	b.n	8002650 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80026c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	e7c1      	b.n	8002650 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80026cc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	e7bd      	b.n	8002650 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80026d4:	7c03      	ldrb	r3, [r0, #16]
 80026d6:	b9db      	cbnz	r3, 8002710 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80026d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026dc:	f10d 0006 	add.w	r0, sp, #6
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	4798      	blx	r3
 80026e4:	e7b8      	b.n	8002658 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80026e6:	7c03      	ldrb	r3, [r0, #16]
 80026e8:	b993      	cbnz	r3, 8002710 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80026ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026ee:	f10d 0006 	add.w	r0, sp, #6
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80026f6:	2307      	movs	r3, #7
 80026f8:	e7c8      	b.n	800268c <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80026fa:	888b      	ldrh	r3, [r1, #4]
 80026fc:	b943      	cbnz	r3, 8002710 <USBD_StdDevReq+0x100>
 80026fe:	88cb      	ldrh	r3, [r1, #6]
 8002700:	b933      	cbnz	r3, 8002710 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002702:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002706:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002708:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800270a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800270e:	d103      	bne.n	8002718 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff ff71 	bl	80025f8 <USBD_CtlError.constprop.0>
    break;
 8002716:	e00b      	b.n	8002730 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002718:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800271c:	4629      	mov	r1, r5
 800271e:	f000 fd9d 	bl	800325c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002722:	4620      	mov	r0, r4
 8002724:	f000 f945 	bl	80029b2 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002728:	b12d      	cbz	r5, 8002736 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800272a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800272c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002730:	2000      	movs	r0, #0
 8002732:	b003      	add	sp, #12
 8002734:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002736:	2301      	movs	r3, #1
 8002738:	e7f8      	b.n	800272c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800273a:	7889      	ldrb	r1, [r1, #2]
 800273c:	4d30      	ldr	r5, [pc, #192]	; (8002800 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800273e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002740:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002742:	d8e5      	bhi.n	8002710 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002744:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002748:	2b02      	cmp	r3, #2
 800274a:	d00c      	beq.n	8002766 <USBD_StdDevReq+0x156>
 800274c:	2b03      	cmp	r3, #3
 800274e:	d1df      	bne.n	8002710 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002750:	b9b1      	cbnz	r1, 8002780 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002752:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002754:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002756:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 800275a:	f7ff fe5b 	bl	8002414 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800275e:	4620      	mov	r0, r4
 8002760:	f000 f927 	bl	80029b2 <USBD_CtlSendStatus>
 8002764:	e7e4      	b.n	8002730 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002766:	2900      	cmp	r1, #0
 8002768:	d0f9      	beq.n	800275e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800276a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800276c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800276e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002770:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002774:	4620      	mov	r0, r4
 8002776:	f7ff fe42 	bl	80023fe <USBD_SetClassConfig>
 800277a:	2802      	cmp	r0, #2
 800277c:	d1ef      	bne.n	800275e <USBD_StdDevReq+0x14e>
 800277e:	e7c7      	b.n	8002710 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002780:	6841      	ldr	r1, [r0, #4]
 8002782:	2901      	cmp	r1, #1
 8002784:	d0eb      	beq.n	800275e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002786:	b2c9      	uxtb	r1, r1
 8002788:	f7ff fe44 	bl	8002414 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800278c:	7829      	ldrb	r1, [r5, #0]
 800278e:	6061      	str	r1, [r4, #4]
 8002790:	e7f0      	b.n	8002774 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002792:	88ca      	ldrh	r2, [r1, #6]
 8002794:	2a01      	cmp	r2, #1
 8002796:	d1bb      	bne.n	8002710 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002798:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800279c:	2b02      	cmp	r3, #2
 800279e:	d003      	beq.n	80027a8 <USBD_StdDevReq+0x198>
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d1b5      	bne.n	8002710 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80027a4:	1d01      	adds	r1, r0, #4
 80027a6:	e764      	b.n	8002672 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80027a8:	4601      	mov	r1, r0
 80027aa:	2300      	movs	r3, #0
 80027ac:	f841 3f08 	str.w	r3, [r1, #8]!
 80027b0:	e75f      	b.n	8002672 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80027b2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80027b6:	3b02      	subs	r3, #2
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d8a9      	bhi.n	8002710 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80027bc:	2301      	movs	r3, #1
 80027be:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80027c0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80027c4:	b10b      	cbz	r3, 80027ca <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80027c6:	2303      	movs	r3, #3
 80027c8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80027ca:	2202      	movs	r2, #2
 80027cc:	f104 010c 	add.w	r1, r4, #12
 80027d0:	e74f      	b.n	8002672 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80027d2:	884b      	ldrh	r3, [r1, #2]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d1ab      	bne.n	8002730 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80027d8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80027dc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80027e0:	4629      	mov	r1, r5
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4620      	mov	r0, r4
 80027e6:	4798      	blx	r3
 80027e8:	e7b9      	b.n	800275e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80027ea:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80027ee:	3b02      	subs	r3, #2
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d88d      	bhi.n	8002710 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80027f4:	884b      	ldrh	r3, [r1, #2]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d19a      	bne.n	8002730 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80027fa:	2300      	movs	r3, #0
 80027fc:	e7ec      	b.n	80027d8 <USBD_StdDevReq+0x1c8>
 80027fe:	bf00      	nop
 8002800:	200001e1 	.word	0x200001e1

08002804 <USBD_StdItfReq>:
{
 8002804:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002806:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 800280a:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 800280c:	2b03      	cmp	r3, #3
{
 800280e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002810:	d10d      	bne.n	800282e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002812:	790b      	ldrb	r3, [r1, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d80a      	bhi.n	800282e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002818:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002820:	88eb      	ldrh	r3, [r5, #6]
 8002822:	b913      	cbnz	r3, 800282a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002824:	4620      	mov	r0, r4
 8002826:	f000 f8c4 	bl	80029b2 <USBD_CtlSendStatus>
}
 800282a:	2000      	movs	r0, #0
 800282c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800282e:	f7ff fee3 	bl	80025f8 <USBD_CtlError.constprop.0>
    break;
 8002832:	e7fa      	b.n	800282a <USBD_StdItfReq+0x26>

08002834 <USBD_StdEPReq>:
{
 8002834:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002836:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002838:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800283a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800283e:	2a20      	cmp	r2, #32
{
 8002840:	4604      	mov	r4, r0
 8002842:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002844:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002846:	d105      	bne.n	8002854 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002848:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4798      	blx	r3
}
 8002850:	2000      	movs	r0, #0
 8002852:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002854:	784a      	ldrb	r2, [r1, #1]
 8002856:	2a01      	cmp	r2, #1
 8002858:	d01c      	beq.n	8002894 <USBD_StdEPReq+0x60>
 800285a:	d32a      	bcc.n	80028b2 <USBD_StdEPReq+0x7e>
 800285c:	2a03      	cmp	r2, #3
 800285e:	d1f7      	bne.n	8002850 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002860:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002864:	2a02      	cmp	r2, #2
 8002866:	d040      	beq.n	80028ea <USBD_StdEPReq+0xb6>
 8002868:	2a03      	cmp	r2, #3
 800286a:	d002      	beq.n	8002872 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 800286c:	f7ff fec4 	bl	80025f8 <USBD_CtlError.constprop.0>
      break;
 8002870:	e7ee      	b.n	8002850 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002872:	884a      	ldrh	r2, [r1, #2]
 8002874:	b922      	cbnz	r2, 8002880 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002876:	065e      	lsls	r6, r3, #25
 8002878:	d002      	beq.n	8002880 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800287a:	4619      	mov	r1, r3
 800287c:	f000 fcc2 	bl	8003204 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002880:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002884:	4629      	mov	r1, r5
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4620      	mov	r0, r4
 800288a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800288c:	4620      	mov	r0, r4
 800288e:	f000 f890 	bl	80029b2 <USBD_CtlSendStatus>
 8002892:	e7dd      	b.n	8002850 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002894:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002898:	2a02      	cmp	r2, #2
 800289a:	d026      	beq.n	80028ea <USBD_StdEPReq+0xb6>
 800289c:	2a03      	cmp	r2, #3
 800289e:	d1e5      	bne.n	800286c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80028a0:	884a      	ldrh	r2, [r1, #2]
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	d1d4      	bne.n	8002850 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80028a6:	0659      	lsls	r1, r3, #25
 80028a8:	d0f0      	beq.n	800288c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80028aa:	4619      	mov	r1, r3
 80028ac:	f000 fcb8 	bl	8003220 <USBD_LL_ClearStallEP>
 80028b0:	e7e6      	b.n	8002880 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80028b2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80028b6:	2a02      	cmp	r2, #2
 80028b8:	d017      	beq.n	80028ea <USBD_StdEPReq+0xb6>
 80028ba:	2a03      	cmp	r2, #3
 80028bc:	d1d6      	bne.n	800286c <USBD_StdEPReq+0x38>
 80028be:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80028c2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80028c6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80028ca:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80028cc:	bf14      	ite	ne
 80028ce:	3514      	addne	r5, #20
 80028d0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80028d4:	f000 fcb2 	bl	800323c <USBD_LL_IsStallEP>
 80028d8:	b168      	cbz	r0, 80028f6 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80028da:	2301      	movs	r3, #1
 80028dc:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80028de:	2202      	movs	r2, #2
 80028e0:	4629      	mov	r1, r5
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 f839 	bl	800295a <USBD_CtlSendData>
      break;
 80028e8:	e7b2      	b.n	8002850 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80028ea:	065a      	lsls	r2, r3, #25
 80028ec:	d0b0      	beq.n	8002850 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80028ee:	4619      	mov	r1, r3
 80028f0:	f000 fc88 	bl	8003204 <USBD_LL_StallEP>
 80028f4:	e7ac      	b.n	8002850 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80028f6:	6028      	str	r0, [r5, #0]
 80028f8:	e7f1      	b.n	80028de <USBD_StdEPReq+0xaa>

080028fa <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80028fa:	780b      	ldrb	r3, [r1, #0]
 80028fc:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80028fe:	784b      	ldrb	r3, [r1, #1]
 8002900:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002902:	78ca      	ldrb	r2, [r1, #3]
 8002904:	788b      	ldrb	r3, [r1, #2]
 8002906:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800290a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800290c:	794a      	ldrb	r2, [r1, #5]
 800290e:	790b      	ldrb	r3, [r1, #4]
 8002910:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002914:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002916:	79ca      	ldrb	r2, [r1, #7]
 8002918:	798b      	ldrb	r3, [r1, #6]
 800291a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800291e:	80c3      	strh	r3, [r0, #6]
 8002920:	4770      	bx	lr

08002922 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002922:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002924:	b188      	cbz	r0, 800294a <USBD_GetString+0x28>
 8002926:	4605      	mov	r5, r0
 8002928:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800292a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2c00      	cmp	r4, #0
 8002932:	d1f9      	bne.n	8002928 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	3302      	adds	r3, #2
 8002938:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800293a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800293c:	2303      	movs	r3, #3
 800293e:	704b      	strb	r3, [r1, #1]
 8002940:	2302      	movs	r3, #2
 8002942:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002944:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002948:	b905      	cbnz	r5, 800294c <USBD_GetString+0x2a>
 800294a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	54cd      	strb	r5, [r1, r3]
 8002950:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002952:	3302      	adds	r3, #2
 8002954:	b2db      	uxtb	r3, r3
 8002956:	548c      	strb	r4, [r1, r2]
 8002958:	e7f4      	b.n	8002944 <USBD_GetString+0x22>

0800295a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800295a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800295c:	2202      	movs	r2, #2
{
 800295e:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002960:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002964:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002966:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002968:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800296a:	2100      	movs	r1, #0
 800296c:	f000 fc84 	bl	8003278 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002970:	2000      	movs	r0, #0
 8002972:	bd10      	pop	{r4, pc}

08002974 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002974:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002976:	4613      	mov	r3, r2
 8002978:	460a      	mov	r2, r1
 800297a:	2100      	movs	r1, #0
 800297c:	f000 fc7c 	bl	8003278 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002980:	2000      	movs	r0, #0
 8002982:	bd08      	pop	{r3, pc}

08002984 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002984:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002986:	2203      	movs	r2, #3
{
 8002988:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800298a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800298e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002992:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002994:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002998:	2100      	movs	r1, #0
 800299a:	f000 fc7b 	bl	8003294 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800299e:	2000      	movs	r0, #0
 80029a0:	bd10      	pop	{r4, pc}

080029a2 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80029a2:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80029a4:	4613      	mov	r3, r2
 80029a6:	460a      	mov	r2, r1
 80029a8:	2100      	movs	r1, #0
 80029aa:	f000 fc73 	bl	8003294 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80029ae:	2000      	movs	r0, #0
 80029b0:	bd08      	pop	{r3, pc}

080029b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80029b2:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80029b4:	2304      	movs	r3, #4
 80029b6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80029ba:	2300      	movs	r3, #0
 80029bc:	461a      	mov	r2, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	f000 fc5a 	bl	8003278 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80029c4:	2000      	movs	r0, #0
 80029c6:	bd08      	pop	{r3, pc}

080029c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80029c8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80029ca:	2305      	movs	r3, #5
 80029cc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80029d0:	2300      	movs	r3, #0
 80029d2:	461a      	mov	r2, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	f000 fc5d 	bl	8003294 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80029da:	2000      	movs	r0, #0
 80029dc:	bd08      	pop	{r3, pc}
	...

080029e0 <TIM2_IRQHandler>:
volatile uint32_t freq=0;
volatile uint32_t temp_cnt=0;

void TIM2_IRQHandler(void)
{
	temp_cnt=TIM3->CNT;
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <TIM2_IRQHandler+0x44>)
 80029e2:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <TIM2_IRQHandler+0x48>)
 80029e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80029e6:	6011      	str	r1, [r2, #0]
	if(TIM3->SR & (uint16_t)0x0001)//if timers reached TOP at the same time
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	4910      	ldr	r1, [pc, #64]	; (8002a2c <TIM2_IRQHandler+0x4c>)
 80029ec:	f013 0f01 	tst.w	r3, #1
 80029f0:	d004      	beq.n	80029fc <TIM2_IRQHandler+0x1c>
	{
		temp_cnt=0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	6013      	str	r3, [r2, #0]
		k++;
 80029f6:	680b      	ldr	r3, [r1, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	600b      	str	r3, [r1, #0]
	}
    freq=(k*0xffff+temp_cnt)*2;
 80029fc:	680b      	ldr	r3, [r1, #0]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8002a04:	4413      	add	r3, r2
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <TIM2_IRQHandler+0x50>)
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]
    k=0;
 8002a0c:	2300      	movs	r3, #0
    TIM2->SR =~ (uint16_t)0x0001;
 8002a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    k=0;
 8002a12:	600b      	str	r3, [r1, #0]
    TIM2->SR =~ (uint16_t)0x0001;
 8002a14:	f06f 0101 	mvn.w	r1, #1
 8002a18:	6111      	str	r1, [r2, #16]
	TIM3->CNT=0;
 8002a1a:	4902      	ldr	r1, [pc, #8]	; (8002a24 <TIM2_IRQHandler+0x44>)
 8002a1c:	624b      	str	r3, [r1, #36]	; 0x24
	TIM2->CNT=0;
 8002a1e:	6253      	str	r3, [r2, #36]	; 0x24
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40000400 	.word	0x40000400
 8002a28:	200001ec 	.word	0x200001ec
 8002a2c:	200001e8 	.word	0x200001e8
 8002a30:	200001e4 	.word	0x200001e4

08002a34 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8002a34:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim3);
 8002a36:	4804      	ldr	r0, [pc, #16]	; (8002a48 <TIM3_IRQHandler+0x14>)
 8002a38:	f7fe fd75 	bl	8001526 <HAL_TIM_IRQHandler>
  k++;
 8002a3c:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <TIM3_IRQHandler+0x18>)
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	bd08      	pop	{r3, pc}
 8002a46:	bf00      	nop
 8002a48:	20000460 	.word	0x20000460
 8002a4c:	200001e8 	.word	0x200001e8

08002a50 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002a54:	b530      	push	{r4, r5, lr}
 8002a56:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a58:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a5a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = 8;
 8002a5c:	2208      	movs	r2, #8

  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a5e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a60:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a66:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a68:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = 8;
 8002a6a:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a6c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a6e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a70:	f7fe f90a 	bl	8000c88 <HAL_RCC_OscConfig>
 8002a74:	b100      	cbz	r0, 8002a78 <SystemClock_Config+0x28>
 8002a76:	e7fe      	b.n	8002a76 <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a78:	230f      	movs	r3, #15
 8002a7a:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a80:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a82:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a84:	4621      	mov	r1, r4
 8002a86:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a88:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a8a:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a8c:	f7fe faec 	bl	8001068 <HAL_RCC_ClockConfig>
 8002a90:	b100      	cbz	r0, 8002a94 <SystemClock_Config+0x44>
 8002a92:	e7fe      	b.n	8002a92 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002a94:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002a96:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a98:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002a9a:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9c:	f7fe fb8e 	bl	80011bc <HAL_RCCEx_PeriphCLKConfig>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	b100      	cbz	r0, 8002aa6 <SystemClock_Config+0x56>
 8002aa4:	e7fe      	b.n	8002aa4 <SystemClock_Config+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8002aac:	f7fe fa78 	bl	8000fa0 <HAL_RCC_MCOConfig>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ab0:	f7fe fb7e 	bl	80011b0 <HAL_RCC_GetHCLKFreq>
 8002ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002abc:	f7fd fbf2 	bl	80002a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ac0:	2004      	movs	r0, #4
 8002ac2:	f7fd fc05 	bl	80002d0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	2103      	movs	r1, #3
 8002aca:	f04f 30ff 	mov.w	r0, #4294967295
 8002ace:	f7fd fba9 	bl	8000224 <HAL_NVIC_SetPriority>
}
 8002ad2:	b015      	add	sp, #84	; 0x54
 8002ad4:	bd30      	pop	{r4, r5, pc}
	...

08002ad8 <main>:
{
 8002ad8:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	4d9b      	ldr	r5, [pc, #620]	; (8002d48 <main+0x270>)
{
 8002adc:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8002ade:	f7fd fb59 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8002ae2:	f7ff ffb5 	bl	8002a50 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae8:	2703      	movs	r7, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	61ab      	str	r3, [r5, #24]
 8002af0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_7;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 8002af2:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b00:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	f043 0308 	orr.w	r3, r3, #8
 8002b06:	61ab      	str	r3, [r5, #24]
 8002b08:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0a:	a911      	add	r1, sp, #68	; 0x44
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	9303      	str	r3, [sp, #12]
 8002b12:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b18:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	488b      	ldr	r0, [pc, #556]	; (8002d4c <main+0x274>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b20:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f7fd fbe7 	bl	80002f4 <HAL_GPIO_Init>
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b26:	4889      	ldr	r0, [pc, #548]	; (8002d4c <main+0x274>)
 8002b28:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b2a:	9611      	str	r6, [sp, #68]	; 0x44
   GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 8002b2c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b30:	9714      	str	r7, [sp, #80]	; 0x50
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f7fd fbdf 	bl	80002f4 <HAL_GPIO_Init>
  htim2.Init.Prescaler = 48000-1;
 8002b36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b3a:	f64b 337f 	movw	r3, #47999	; 0xbb7f
  htim2.Instance = TIM2;
 8002b3e:	4c84      	ldr	r4, [pc, #528]	; (8002d50 <main+0x278>)
  htim2.Init.Prescaler = 48000-1;
 8002b40:	e884 0009 	stmia.w	r4, {r0, r3}
  htim2.Init.Period = 1500-1;
 8002b44:	f240 53db 	movw	r3, #1499	; 0x5db
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b48:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4a:	f8c4 8008 	str.w	r8, [r4, #8]
  htim2.Init.Period = 1500-1;
 8002b4e:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b50:	f8c4 8010 	str.w	r8, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b54:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b58:	f7fe fdc0 	bl	80016dc <HAL_TIM_Base_Init>
 8002b5c:	b100      	cbz	r0, 8002b60 <main+0x88>
 8002b5e:	e7fe      	b.n	8002b5e <main+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b60:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b64:	a911      	add	r1, sp, #68	; 0x44
 8002b66:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b68:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b6c:	f7fe fc1d 	bl	80013aa <HAL_TIM_ConfigClockSource>
 8002b70:	b100      	cbz	r0, 8002b74 <main+0x9c>
 8002b72:	e7fe      	b.n	8002b72 <main+0x9a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b74:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b76:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b78:	a90a      	add	r1, sp, #40	; 0x28
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fe feb8 	bl	80018f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b80:	4681      	mov	r9, r0
 8002b82:	b100      	cbz	r0, 8002b86 <main+0xae>
 8002b84:	e7fe      	b.n	8002b84 <main+0xac>
  MX_USB_DEVICE_Init();
 8002b86:	f000 f9f9 	bl	8002f7c <MX_USB_DEVICE_Init>
  htim3.Init.Prescaler = 2-1;
 8002b8a:	2201      	movs	r2, #1
  htim3.Instance = TIM3;
 8002b8c:	4871      	ldr	r0, [pc, #452]	; (8002d54 <main+0x27c>)
 8002b8e:	4c72      	ldr	r4, [pc, #456]	; (8002d58 <main+0x280>)
  htim3.Init.Prescaler = 2-1;
 8002b90:	6042      	str	r2, [r0, #4]
  htim3.Init.Period = 0xffff;
 8002b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b96:	f8c0 9008 	str.w	r9, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9a:	f8c0 9010 	str.w	r9, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9e:	f8c0 9018 	str.w	r9, [r0, #24]
  htim3.Instance = TIM3;
 8002ba2:	6004      	str	r4, [r0, #0]
  htim3.Init.Period = 0xffff;
 8002ba4:	60c2      	str	r2, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ba6:	f7fe fd99 	bl	80016dc <HAL_TIM_Base_Init>
 8002baa:	4681      	mov	r9, r0
 8002bac:	b100      	cbz	r0, 8002bb0 <main+0xd8>
 8002bae:	e7fe      	b.n	8002bae <main+0xd6>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb2:	a911      	add	r1, sp, #68	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb4:	f043 0310 	orr.w	r3, r3, #16
 8002bb8:	61ab      	str	r3, [r5, #24]
 8002bba:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbc:	9012      	str	r0, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	9013      	str	r0, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	4861      	ldr	r0, [pc, #388]	; (8002d4c <main+0x274>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bca:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	f7fd fb92 	bl	80002f4 <HAL_GPIO_Init>
  TIM3->CCMR1 |=(1<<8);
 8002bd0:	69a3      	ldr	r3, [r4, #24]
  htim4.Init.Prescaler = 72-1;
 8002bd2:	4962      	ldr	r1, [pc, #392]	; (8002d5c <main+0x284>)
  TIM3->CCMR1 |=(1<<8);
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	61a3      	str	r3, [r4, #24]
  TIM3->SMCR |=7;
 8002bda:	68a3      	ldr	r3, [r4, #8]
 8002bdc:	f043 0307 	orr.w	r3, r3, #7
 8002be0:	60a3      	str	r3, [r4, #8]
  TIM3->SMCR |=(1<<6)|(1<<5);
 8002be2:	68a3      	ldr	r3, [r4, #8]
 8002be4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002be8:	60a3      	str	r3, [r4, #8]
  TIM3->CR1 |= TIM_CR1_CEN;
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6023      	str	r3, [r4, #0]
  htim4.Init.Prescaler = 72-1;
 8002bf2:	2347      	movs	r3, #71	; 0x47
  htim4.Instance = TIM4;
 8002bf4:	4c5a      	ldr	r4, [pc, #360]	; (8002d60 <main+0x288>)
  htim4.Init.Prescaler = 72-1;
 8002bf6:	e884 000a 	stmia.w	r4, {r1, r3}
  htim4.Init.Period = 1000-1;
 8002bfa:	f240 33e7 	movw	r3, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002bfe:	4620      	mov	r0, r4
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	f8c4 9008 	str.w	r9, [r4, #8]
  htim4.Init.Period = 1000-1;
 8002c04:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c06:	f8c4 9010 	str.w	r9, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c0a:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c0c:	f7fe fd66 	bl	80016dc <HAL_TIM_Base_Init>
 8002c10:	b100      	cbz	r0, 8002c14 <main+0x13c>
 8002c12:	e7fe      	b.n	8002c12 <main+0x13a>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c14:	a90a      	add	r1, sp, #40	; 0x28
 8002c16:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c18:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c1c:	f7fe fbc5 	bl	80013aa <HAL_TIM_ConfigClockSource>
 8002c20:	b100      	cbz	r0, 8002c24 <main+0x14c>
 8002c22:	e7fe      	b.n	8002c22 <main+0x14a>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7fe fd73 	bl	8001710 <HAL_TIM_PWM_Init>
 8002c2a:	b100      	cbz	r0, 8002c2e <main+0x156>
 8002c2c:	e7fe      	b.n	8002c2c <main+0x154>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c2e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c30:	f04f 0804 	mov.w	r8, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c34:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.Pulse = 500;
 8002c36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c3a:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	a911      	add	r1, sp, #68	; 0x44
 8002c40:	4620      	mov	r0, r4
  sConfigOC.Pulse = 500;
 8002c42:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c44:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c48:	f7fe fda8 	bl	800179c <HAL_TIM_PWM_ConfigChannel>
 8002c4c:	4605      	mov	r5, r0
 8002c4e:	b100      	cbz	r0, 8002c52 <main+0x17a>
 8002c50:	e7fe      	b.n	8002c50 <main+0x178>
  HAL_TIM_MspPostInit(&htim4);
 8002c52:	4620      	mov	r0, r4
 8002c54:	f000 f92c 	bl	8002eb0 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	f7fe fe0c 	bl	8001878 <HAL_TIM_PWM_Start>
  htim1.Init.Prescaler = 18-1;
 8002c60:	2311      	movs	r3, #17
  htim1.Instance = TIM1;
 8002c62:	4c40      	ldr	r4, [pc, #256]	; (8002d64 <main+0x28c>)
  htim1.Init.Prescaler = 18-1;
 8002c64:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <main+0x290>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c66:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 18-1;
 8002c68:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6c:	60a5      	str	r5, [r4, #8]
  htim1.Init.Period = 4-1;
 8002c6e:	60e7      	str	r7, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c70:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c72:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c74:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c76:	f7fe fd4b 	bl	8001710 <HAL_TIM_PWM_Init>
 8002c7a:	b100      	cbz	r0, 8002c7e <main+0x1a6>
 8002c7c:	e7fe      	b.n	8002c7c <main+0x1a4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c7e:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c80:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c82:	a904      	add	r1, sp, #16
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7fe fe33 	bl	80018f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c8a:	b100      	cbz	r0, 8002c8e <main+0x1b6>
 8002c8c:	e7fe      	b.n	8002c8c <main+0x1b4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c8e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c90:	2504      	movs	r5, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c92:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 3-1;
 8002c94:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c96:	462a      	mov	r2, r5
 8002c98:	a90a      	add	r1, sp, #40	; 0x28
 8002c9a:	4832      	ldr	r0, [pc, #200]	; (8002d64 <main+0x28c>)
  sConfigOC.Pulse = 3-1;
 8002c9c:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c9e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ca0:	f7fe fd7c 	bl	800179c <HAL_TIM_PWM_ConfigChannel>
 8002ca4:	b100      	cbz	r0, 8002ca8 <main+0x1d0>
 8002ca6:	e7fe      	b.n	8002ca6 <main+0x1ce>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cac:	a918      	add	r1, sp, #96	; 0x60
 8002cae:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cb2:	482c      	ldr	r0, [pc, #176]	; (8002d64 <main+0x28c>)
 8002cb4:	f7fe fb79 	bl	80013aa <HAL_TIM_ConfigClockSource>
 8002cb8:	b100      	cbz	r0, 8002cbc <main+0x1e4>
 8002cba:	e7fe      	b.n	8002cba <main+0x1e2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cc0:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cc2:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cc4:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cc6:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cc8:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cca:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ccc:	a911      	add	r1, sp, #68	; 0x44
 8002cce:	4825      	ldr	r0, [pc, #148]	; (8002d64 <main+0x28c>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cd0:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cd2:	f7fe fde7 	bl	80018a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	b100      	cbz	r0, 8002cdc <main+0x204>
 8002cda:	e7fe      	b.n	8002cda <main+0x202>
  HAL_TIM_MspPostInit(&htim1);
 8002cdc:	4821      	ldr	r0, [pc, #132]	; (8002d64 <main+0x28c>)
 8002cde:	f000 f8e7 	bl	8002eb0 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	481f      	ldr	r0, [pc, #124]	; (8002d64 <main+0x28c>)
 8002ce6:	f7fe fdc7 	bl	8001878 <HAL_TIM_PWM_Start>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cea:	4622      	mov	r2, r4
 8002cec:	4621      	mov	r1, r4
 8002cee:	201c      	movs	r0, #28
 8002cf0:	f7fd fa98 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cf4:	201c      	movs	r0, #28
 8002cf6:	f7fd fac9 	bl	800028c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	201d      	movs	r0, #29
 8002d00:	f7fd fa90 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d04:	201d      	movs	r0, #29
 8002d06:	f7fd fac1 	bl	800028c <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim2);
 8002d0a:	4811      	ldr	r0, [pc, #68]	; (8002d50 <main+0x278>)
 8002d0c:	f7fe fb42 	bl	8001394 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002d10:	4810      	ldr	r0, [pc, #64]	; (8002d54 <main+0x27c>)
 8002d12:	f7fe fb3f 	bl	8001394 <HAL_TIM_Base_Start_IT>
  HAL_Delay(500);
 8002d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d1a:	f7fd fa5f 	bl	80001dc <HAL_Delay>
	USBsend("This device displays frequency of signal from PA7 Pin.\r\n"
 8002d1e:	4813      	ldr	r0, [pc, #76]	; (8002d6c <main+0x294>)
 8002d20:	f000 f982 	bl	8003028 <USBsend>
	HAL_Delay(500);
 8002d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d28:	f7fd fa58 	bl	80001dc <HAL_Delay>
      USBsend("\n\rfrequency=");
 8002d2c:	4d10      	ldr	r5, [pc, #64]	; (8002d70 <main+0x298>)
      USBsend_Int(freq);
 8002d2e:	4c11      	ldr	r4, [pc, #68]	; (8002d74 <main+0x29c>)
	  HAL_Delay(1000);
 8002d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d34:	f7fd fa52 	bl	80001dc <HAL_Delay>
      USBsend("\n\rfrequency=");
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f000 f975 	bl	8003028 <USBsend>
      USBsend_Int(freq);
 8002d3e:	6820      	ldr	r0, [r4, #0]
 8002d40:	f000 f97c 	bl	800303c <USBsend_Int>
 8002d44:	e7f4      	b.n	8002d30 <main+0x258>
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40010800 	.word	0x40010800
 8002d50:	200004e0 	.word	0x200004e0
 8002d54:	20000460 	.word	0x20000460
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	20000420 	.word	0x20000420
 8002d64:	200004a0 	.word	0x200004a0
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	08003cac 	.word	0x08003cac
 8002d70:	08003d33 	.word	0x08003d33
 8002d74:	200001e4 	.word	0x200001e4

08002d78 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002d78:	e7fe      	b.n	8002d78 <_Error_Handler>
	...

08002d7c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_MspInit+0x84>)
{
 8002d7e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d80:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d82:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	619a      	str	r2, [r3, #24]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d94:	f7fd fa34 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f06f 000b 	mvn.w	r0, #11
 8002d9e:	4611      	mov	r1, r2
 8002da0:	f7fd fa40 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	f06f 000a 	mvn.w	r0, #10
 8002daa:	4611      	mov	r1, r2
 8002dac:	f7fd fa3a 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002db0:	2200      	movs	r2, #0
 8002db2:	f06f 0009 	mvn.w	r0, #9
 8002db6:	4611      	mov	r1, r2
 8002db8:	f7fd fa34 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f06f 0004 	mvn.w	r0, #4
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	f7fd fa2e 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f06f 0003 	mvn.w	r0, #3
 8002dce:	4611      	mov	r1, r2
 8002dd0:	f7fd fa28 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f06f 0001 	mvn.w	r0, #1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	f7fd fa22 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	f04f 30ff 	mov.w	r0, #4294967295
 8002de6:	4611      	mov	r1, r2
 8002de8:	f7fd fa1c 	bl	8000224 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dec:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <HAL_MspInit+0x88>)
 8002dee:	6853      	ldr	r3, [r2, #4]
 8002df0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002df8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfa:	b003      	add	sp, #12
 8002dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010000 	.word	0x40010000

08002e08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8002e08:	6802      	ldr	r2, [r0, #0]
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_TIM_PWM_MspInit+0x24>)
{
 8002e0c:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d10a      	bne.n	8002e28 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e12:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1c:	619a      	str	r2, [r3, #24]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002e28:	b002      	add	sp, #8
 8002e2a:	4770      	bx	lr
 8002e2c:	40012c00 	.word	0x40012c00

08002e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8002e32:	6803      	ldr	r3, [r0, #0]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e38:	d10d      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e3a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	61da      	str	r2, [r3, #28]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e50:	b007      	add	sp, #28
 8002e52:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <HAL_TIM_Base_MspInit+0x70>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d113      	bne.n	8002e84 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_TIM_Base_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e60:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	4811      	ldr	r0, [pc, #68]	; (8002ea8 <HAL_TIM_Base_MspInit+0x78>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e64:	f042 0202 	orr.w	r2, r2, #2
 8002e68:	61da      	str	r2, [r3, #28]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7e:	f7fd fa39 	bl	80002f4 <HAL_GPIO_Init>
 8002e82:	e7e5      	b.n	8002e50 <HAL_TIM_Base_MspInit+0x20>
  else if(htim_base->Instance==TIM4)
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_TIM_Base_MspInit+0x7c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d1e2      	bne.n	8002e50 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_TIM_Base_MspInit+0x74>)
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	f042 0204 	orr.w	r2, r2, #4
 8002e92:	61da      	str	r2, [r3, #28]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	9302      	str	r3, [sp, #8]
 8002e9c:	9b02      	ldr	r3, [sp, #8]
}
 8002e9e:	e7d7      	b.n	8002e50 <HAL_TIM_Base_MspInit+0x20>
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010800 	.word	0x40010800
 8002eac:	40000800 	.word	0x40000800

08002eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002eb2:	6803      	ldr	r3, [r0, #0]
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_TIM_MspPostInit+0x40>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e88d 000a 	stmia.w	sp, {r1, r3}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec6:	4669      	mov	r1, sp
 8002ec8:	480a      	ldr	r0, [pc, #40]	; (8002ef4 <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eca:	9303      	str	r3, [sp, #12]
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f7fd fa12 	bl	80002f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ed0:	b005      	add	sp, #20
 8002ed2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM4)
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_TIM_MspPostInit+0x48>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d1f9      	bne.n	8002ed0 <HAL_TIM_MspPostInit+0x20>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	e88d 000c 	stmia.w	sp, {r2, r3}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ee4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	4669      	mov	r1, sp
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ee8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eea:	4804      	ldr	r0, [pc, #16]	; (8002efc <HAL_TIM_MspPostInit+0x4c>)
 8002eec:	e7ee      	b.n	8002ecc <HAL_TIM_MspPostInit+0x1c>
 8002eee:	bf00      	nop
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40010800 	.word	0x40010800
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	40010c00 	.word	0x40010c00

08002f00 <NMI_Handler>:
 8002f00:	4770      	bx	lr

08002f02 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002f02:	e7fe      	b.n	8002f02 <HardFault_Handler>

08002f04 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002f04:	e7fe      	b.n	8002f04 <MemManage_Handler>

08002f06 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002f06:	e7fe      	b.n	8002f06 <BusFault_Handler>

08002f08 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002f08:	e7fe      	b.n	8002f08 <UsageFault_Handler>

08002f0a <SVC_Handler>:
 8002f0a:	4770      	bx	lr

08002f0c <DebugMon_Handler>:
 8002f0c:	4770      	bx	lr

08002f0e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002f0e:	4770      	bx	lr

08002f10 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f12:	f7fd f951 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002f1a:	f7fd b9e6 	b.w	80002ea <HAL_SYSTICK_IRQHandler>
	...

08002f20 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f20:	4801      	ldr	r0, [pc, #4]	; (8002f28 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002f22:	f7fd bbd5 	b.w	80006d0 <HAL_PCD_IRQHandler>
 8002f26:	bf00      	nop
 8002f28:	20000f14 	.word	0x20000f14

08002f2c <USB_HP_CAN1_TX_IRQHandler>:
 8002f2c:	f7ff bff8 	b.w	8002f20 <USB_LP_CAN1_RX0_IRQHandler>

08002f30 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <SystemInit+0x40>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <SystemInit+0x44>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f54:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f5c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <SystemInit+0x48>)
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	f8ff0000 	.word	0xf8ff0000
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002f7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002f7e:	4c09      	ldr	r4, [pc, #36]	; (8002fa4 <MX_USB_DEVICE_Init+0x28>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	4909      	ldr	r1, [pc, #36]	; (8002fa8 <MX_USB_DEVICE_Init+0x2c>)
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff fa19 	bl	80023bc <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8002f8a:	4908      	ldr	r1, [pc, #32]	; (8002fac <MX_USB_DEVICE_Init+0x30>)
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7ff fa2a 	bl	80023e6 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8002f92:	4620      	mov	r0, r4
 8002f94:	4906      	ldr	r1, [pc, #24]	; (8002fb0 <MX_USB_DEVICE_Init+0x34>)
 8002f96:	f7ff f9d2 	bl	800233e <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8002f9a:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002fa0:	f7ff ba28 	b.w	80023f4 <USBD_Start>
 8002fa4:	20000520 	.word	0x20000520
 8002fa8:	2000012c 	.word	0x2000012c
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	2000011c 	.word	0x2000011c

08002fb4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	4770      	bx	lr

08002fb8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002fb8:	2000      	movs	r0, #0
 8002fba:	4770      	bx	lr

08002fbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002fbc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002fbe:	4c05      	ldr	r4, [pc, #20]	; (8002fd4 <CDC_Receive_FS+0x18>)
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff f9ca 	bl	800235c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff f9e4 	bl	8002396 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002fce:	2000      	movs	r0, #0
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000520 	.word	0x20000520

08002fd8 <CDC_Init_FS>:
{
 8002fd8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002fda:	4c06      	ldr	r4, [pc, #24]	; (8002ff4 <CDC_Init_FS+0x1c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4906      	ldr	r1, [pc, #24]	; (8002ff8 <CDC_Init_FS+0x20>)
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7ff f9b3 	bl	800234c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002fe6:	4905      	ldr	r1, [pc, #20]	; (8002ffc <CDC_Init_FS+0x24>)
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f7ff f9b7 	bl	800235c <USBD_CDC_SetRxBuffer>
}
 8002fee:	2000      	movs	r0, #0
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000520 	.word	0x20000520
 8002ff8:	20000b2c 	.word	0x20000b2c
 8002ffc:	20000744 	.word	0x20000744

08003000 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003000:	b508      	push	{r3, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <CDC_Transmit_FS+0x24>)
{
 8003004:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003006:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
  while (hcdc->TxState != 0)
 800300a:	f8d1 3214 	ldr.w	r3, [r1, #532]	; 0x214
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1fb      	bne.n	800300a <CDC_Transmit_FS+0xa>
  {
	  hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003012:	4601      	mov	r1, r0
 8003014:	4803      	ldr	r0, [pc, #12]	; (8003024 <CDC_Transmit_FS+0x24>)
 8003016:	f7ff f999 	bl	800234c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800301a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800301e:	4801      	ldr	r0, [pc, #4]	; (8003024 <CDC_Transmit_FS+0x24>)
 8003020:	f7ff b9a2 	b.w	8002368 <USBD_CDC_TransmitPacket>
 8003024:	20000520 	.word	0x20000520

08003028 <USBsend>:

void USBsend (char *str)
{
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	1a19      	subs	r1, r3, r0
    uint32_t ptr=0;
    for(ptr=1;str[ptr]!=0;ptr++)
 800302c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003030:	2a00      	cmp	r2, #0
 8003032:	d1fa      	bne.n	800302a <USBsend+0x2>
    {
    }
    CDC_Transmit_FS(str,ptr);
 8003034:	b289      	uxth	r1, r1
 8003036:	f7ff bfe3 	b.w	8003000 <CDC_Transmit_FS>
	...

0800303c <USBsend_Int>:
}

void USBsend_Int(int i)
{
 800303c:	b500      	push	{lr}
 800303e:	b089      	sub	sp, #36	; 0x24
    char temp[32];
    sprintf(temp,"%d",i);
 8003040:	4602      	mov	r2, r0
 8003042:	4905      	ldr	r1, [pc, #20]	; (8003058 <USBsend_Int+0x1c>)
 8003044:	4668      	mov	r0, sp
 8003046:	f000 f9e3 	bl	8003410 <siprintf>
	USBsend(temp);
 800304a:	4668      	mov	r0, sp
 800304c:	f7ff ffec 	bl	8003028 <USBsend>
}
 8003050:	b009      	add	sp, #36	; 0x24
 8003052:	f85d fb04 	ldr.w	pc, [sp], #4
 8003056:	bf00      	nop
 8003058:	08003d50 	.word	0x08003d50

0800305c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800305c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_PCD_MspInit+0x48>)
 8003060:	6802      	ldr	r2, [r0, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d11a      	bne.n	800309c <HAL_PCD_MspInit+0x40>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003066:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800306a:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 800306c:	2102      	movs	r1, #2
    __HAL_RCC_USB_CLK_ENABLE();
 800306e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003072:	61da      	str	r2, [r3, #28]
 8003074:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8003076:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800307c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 800307e:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 8003080:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8003082:	f7fd f8cf 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003086:	2013      	movs	r0, #19
 8003088:	f7fd f900 	bl	800028c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 800308c:	2014      	movs	r0, #20
 800308e:	2200      	movs	r2, #0
 8003090:	2102      	movs	r1, #2
 8003092:	f7fd f8c7 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003096:	2014      	movs	r0, #20
 8003098:	f7fd f8f8 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800309c:	b003      	add	sp, #12
 800309e:	f85d fb04 	ldr.w	pc, [sp], #4
 80030a2:	bf00      	nop
 80030a4:	40005c00 	.word	0x40005c00

080030a8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80030a8:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 80030ac:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80030b0:	f7ff b9b7 	b.w	8002422 <USBD_LL_SetupStage>

080030b4 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80030b4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80030b8:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 80030bc:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80030c0:	f7ff b9dc 	b.w	800247c <USBD_LL_DataOutStage>

080030c4 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80030c4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80030c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ca:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80030ce:	f7ff ba07 	b.w	80024e0 <USBD_LL_DataInStage>

080030d2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80030d2:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80030d6:	f7ff ba83 	b.w	80025e0 <USBD_LL_SOF>

080030da <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80030da:	b510      	push	{r4, lr}
 80030dc:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80030de:	2101      	movs	r1, #1
 80030e0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80030e4:	f7ff fa6a 	bl	80025bc <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80030e8:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 80030ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80030f0:	f7ff ba45 	b.w	800257e <USBD_LL_Reset>

080030f4 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80030f8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80030fc:	f7ff fa61 	bl	80025c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003100:	69a3      	ldr	r3, [r4, #24]
 8003102:	b123      	cbz	r3, 800310e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003104:	4a02      	ldr	r2, [pc, #8]	; (8003110 <HAL_PCD_SuspendCallback+0x1c>)
 8003106:	6913      	ldr	r3, [r2, #16]
 8003108:	f043 0306 	orr.w	r3, r3, #6
 800310c:	6113      	str	r3, [r2, #16]
 800310e:	bd10      	pop	{r4, pc}
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003114:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003118:	f7ff ba5c 	b.w	80025d4 <USBD_LL_Resume>

0800311c <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800311c:	2308      	movs	r3, #8
 800311e:	f04f 0c02 	mov.w	ip, #2
{
 8003122:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003124:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <USBD_LL_Init+0x84>)
{
 8003126:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003128:	481e      	ldr	r0, [pc, #120]	; (80031a4 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800312a:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800312e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003130:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003134:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003138:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800313a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800313c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800313e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003140:	f7fd f9b8 	bl	80004b4 <HAL_PCD_Init>
 8003144:	b120      	cbz	r0, 8003150 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003146:	f44f 7199 	mov.w	r1, #306	; 0x132
 800314a:	4817      	ldr	r0, [pc, #92]	; (80031a8 <USBD_LL_Init+0x8c>)
 800314c:	f7ff fe14 	bl	8002d78 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003150:	2200      	movs	r2, #0
 8003152:	2318      	movs	r3, #24
 8003154:	4611      	mov	r1, r2
 8003156:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800315a:	f7fd fd7d 	bl	8000c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800315e:	2358      	movs	r3, #88	; 0x58
 8003160:	2200      	movs	r2, #0
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003168:	f7fd fd76 	bl	8000c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800316c:	23c0      	movs	r3, #192	; 0xc0
 800316e:	2200      	movs	r2, #0
 8003170:	2181      	movs	r1, #129	; 0x81
 8003172:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003176:	f7fd fd6f 	bl	8000c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800317a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800317e:	2200      	movs	r2, #0
 8003180:	2101      	movs	r1, #1
 8003182:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003186:	f7fd fd67 	bl	8000c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800318a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800318e:	2200      	movs	r2, #0
 8003190:	2182      	movs	r1, #130	; 0x82
 8003192:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003196:	f7fd fd5f 	bl	8000c58 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 800319a:	2000      	movs	r0, #0
 800319c:	bd10      	pop	{r4, pc}
 800319e:	bf00      	nop
 80031a0:	40005c00 	.word	0x40005c00
 80031a4:	20000f14 	.word	0x20000f14
 80031a8:	08003d57 	.word	0x08003d57

080031ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80031ac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80031ae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031b2:	f7fd f9e8 	bl	8000586 <HAL_PCD_Start>
 80031b6:	2803      	cmp	r0, #3
 80031b8:	bf9a      	itte	ls
 80031ba:	4b02      	ldrls	r3, [pc, #8]	; (80031c4 <USBD_LL_Start+0x18>)
 80031bc:	5c18      	ldrbls	r0, [r3, r0]
 80031be:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80031c0:	bd08      	pop	{r3, pc}
 80031c2:	bf00      	nop
 80031c4:	08003d53 	.word	0x08003d53

080031c8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80031c8:	b510      	push	{r4, lr}
 80031ca:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80031cc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031d0:	4613      	mov	r3, r2
 80031d2:	4622      	mov	r2, r4
 80031d4:	f7fd fa02 	bl	80005dc <HAL_PCD_EP_Open>
 80031d8:	2803      	cmp	r0, #3
 80031da:	bf9a      	itte	ls
 80031dc:	4b01      	ldrls	r3, [pc, #4]	; (80031e4 <USBD_LL_OpenEP+0x1c>)
 80031de:	5c18      	ldrbls	r0, [r3, r0]
 80031e0:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80031e2:	bd10      	pop	{r4, pc}
 80031e4:	08003d53 	.word	0x08003d53

080031e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80031e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80031ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031ee:	f7fd fa18 	bl	8000622 <HAL_PCD_EP_Close>
 80031f2:	2803      	cmp	r0, #3
 80031f4:	bf9a      	itte	ls
 80031f6:	4b02      	ldrls	r3, [pc, #8]	; (8003200 <USBD_LL_CloseEP+0x18>)
 80031f8:	5c18      	ldrbls	r0, [r3, r0]
 80031fa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80031fc:	bd08      	pop	{r3, pc}
 80031fe:	bf00      	nop
 8003200:	08003d53 	.word	0x08003d53

08003204 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003204:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003206:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800320a:	f7fd fcd9 	bl	8000bc0 <HAL_PCD_EP_SetStall>
 800320e:	2803      	cmp	r0, #3
 8003210:	bf9a      	itte	ls
 8003212:	4b02      	ldrls	r3, [pc, #8]	; (800321c <USBD_LL_StallEP+0x18>)
 8003214:	5c18      	ldrbls	r0, [r3, r0]
 8003216:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003218:	bd08      	pop	{r3, pc}
 800321a:	bf00      	nop
 800321c:	08003d53 	.word	0x08003d53

08003220 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003220:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003222:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003226:	f7fd fcf4 	bl	8000c12 <HAL_PCD_EP_ClrStall>
 800322a:	2803      	cmp	r0, #3
 800322c:	bf9a      	itte	ls
 800322e:	4b02      	ldrls	r3, [pc, #8]	; (8003238 <USBD_LL_ClearStallEP+0x18>)
 8003230:	5c18      	ldrbls	r0, [r3, r0]
 8003232:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003234:	bd08      	pop	{r3, pc}
 8003236:	bf00      	nop
 8003238:	08003d53 	.word	0x08003d53

0800323c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800323c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800323e:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003242:	bf45      	ittet	mi
 8003244:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003248:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800324c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003250:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003254:	bf58      	it	pl
 8003256:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 800325a:	4770      	bx	lr

0800325c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800325c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800325e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003262:	f7fd f9a7 	bl	80005b4 <HAL_PCD_SetAddress>
 8003266:	2803      	cmp	r0, #3
 8003268:	bf9a      	itte	ls
 800326a:	4b02      	ldrls	r3, [pc, #8]	; (8003274 <USBD_LL_SetUSBAddress+0x18>)
 800326c:	5c18      	ldrbls	r0, [r3, r0]
 800326e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003270:	bd08      	pop	{r3, pc}
 8003272:	bf00      	nop
 8003274:	08003d53 	.word	0x08003d53

08003278 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003278:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800327a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800327e:	f7fd fa10 	bl	80006a2 <HAL_PCD_EP_Transmit>
 8003282:	2803      	cmp	r0, #3
 8003284:	bf9a      	itte	ls
 8003286:	4b02      	ldrls	r3, [pc, #8]	; (8003290 <USBD_LL_Transmit+0x18>)
 8003288:	5c18      	ldrbls	r0, [r3, r0]
 800328a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 800328c:	bd08      	pop	{r3, pc}
 800328e:	bf00      	nop
 8003290:	08003d53 	.word	0x08003d53

08003294 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003294:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003296:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800329a:	f7fd f9e3 	bl	8000664 <HAL_PCD_EP_Receive>
 800329e:	2803      	cmp	r0, #3
 80032a0:	bf9a      	itte	ls
 80032a2:	4b02      	ldrls	r3, [pc, #8]	; (80032ac <USBD_LL_PrepareReceive+0x18>)
 80032a4:	5c18      	ldrbls	r0, [r3, r0]
 80032a6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80032a8:	bd08      	pop	{r3, pc}
 80032aa:	bf00      	nop
 80032ac:	08003d53 	.word	0x08003d53

080032b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80032b0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80032b2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80032b6:	f7fd f9ed 	bl	8000694 <HAL_PCD_EP_GetRxCount>
}
 80032ba:	bd08      	pop	{r3, pc}

080032bc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80032bc:	4800      	ldr	r0, [pc, #0]	; (80032c0 <USBD_static_malloc+0x4>)
 80032be:	4770      	bx	lr
 80032c0:	200001f0 	.word	0x200001f0

080032c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80032c4:	4770      	bx	lr

080032c6 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80032c6:	4770      	bx	lr

080032c8 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80032c8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80032ca:	4801      	ldr	r0, [pc, #4]	; (80032d0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80032cc:	800b      	strh	r3, [r1, #0]
}
 80032ce:	4770      	bx	lr
 80032d0:	20000148 	.word	0x20000148

080032d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80032d4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80032d6:	4801      	ldr	r0, [pc, #4]	; (80032dc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80032d8:	800b      	strh	r3, [r1, #0]
}
 80032da:	4770      	bx	lr
 80032dc:	2000015c 	.word	0x2000015c

080032e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80032e0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80032e2:	4c04      	ldr	r4, [pc, #16]	; (80032f4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80032e4:	460a      	mov	r2, r1
 80032e6:	4804      	ldr	r0, [pc, #16]	; (80032f8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80032e8:	4621      	mov	r1, r4
 80032ea:	f7ff fb1a 	bl	8002922 <USBD_GetString>
  return USBD_StrDesc;
}
 80032ee:	4620      	mov	r0, r4
 80032f0:	bd10      	pop	{r4, pc}
 80032f2:	bf00      	nop
 80032f4:	20001374 	.word	0x20001374
 80032f8:	08003d83 	.word	0x08003d83

080032fc <USBD_FS_ProductStrDescriptor>:
{
 80032fc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80032fe:	4c04      	ldr	r4, [pc, #16]	; (8003310 <USBD_FS_ProductStrDescriptor+0x14>)
 8003300:	460a      	mov	r2, r1
 8003302:	4804      	ldr	r0, [pc, #16]	; (8003314 <USBD_FS_ProductStrDescriptor+0x18>)
 8003304:	4621      	mov	r1, r4
 8003306:	f7ff fb0c 	bl	8002922 <USBD_GetString>
}
 800330a:	4620      	mov	r0, r4
 800330c:	bd10      	pop	{r4, pc}
 800330e:	bf00      	nop
 8003310:	20001374 	.word	0x20001374
 8003314:	08003d96 	.word	0x08003d96

08003318 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003318:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800331a:	4c04      	ldr	r4, [pc, #16]	; (800332c <USBD_FS_SerialStrDescriptor+0x14>)
 800331c:	460a      	mov	r2, r1
 800331e:	4804      	ldr	r0, [pc, #16]	; (8003330 <USBD_FS_SerialStrDescriptor+0x18>)
 8003320:	4621      	mov	r1, r4
 8003322:	f7ff fafe 	bl	8002922 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003326:	4620      	mov	r0, r4
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	20001374 	.word	0x20001374
 8003330:	08003dac 	.word	0x08003dac

08003334 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003334:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003336:	4c04      	ldr	r4, [pc, #16]	; (8003348 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003338:	460a      	mov	r2, r1
 800333a:	4804      	ldr	r0, [pc, #16]	; (800334c <USBD_FS_ConfigStrDescriptor+0x18>)
 800333c:	4621      	mov	r1, r4
 800333e:	f7ff faf0 	bl	8002922 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003342:	4620      	mov	r0, r4
 8003344:	bd10      	pop	{r4, pc}
 8003346:	bf00      	nop
 8003348:	20001374 	.word	0x20001374
 800334c:	08003d6a 	.word	0x08003d6a

08003350 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003350:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003352:	4c04      	ldr	r4, [pc, #16]	; (8003364 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003354:	460a      	mov	r2, r1
 8003356:	4804      	ldr	r0, [pc, #16]	; (8003368 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003358:	4621      	mov	r1, r4
 800335a:	f7ff fae2 	bl	8002922 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800335e:	4620      	mov	r0, r4
 8003360:	bd10      	pop	{r4, pc}
 8003362:	bf00      	nop
 8003364:	20001374 	.word	0x20001374
 8003368:	08003d75 	.word	0x08003d75

0800336c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800336c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800336e:	e003      	b.n	8003378 <LoopCopyDataInit>

08003370 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003372:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003374:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003376:	3104      	adds	r1, #4

08003378 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003378:	480a      	ldr	r0, [pc, #40]	; (80033a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800337c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800337e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003380:	d3f6      	bcc.n	8003370 <CopyDataInit>
  ldr r2, =_sbss
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003384:	e002      	b.n	800338c <LoopFillZerobss>

08003386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003386:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003388:	f842 3b04 	str.w	r3, [r2], #4

0800338c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800338e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003390:	d3f9      	bcc.n	8003386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003392:	f7ff fdcd 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003396:	f000 f80f 	bl	80033b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800339a:	f7ff fb9d 	bl	8002ad8 <main>
  bx lr
 800339e:	4770      	bx	lr
  ldr r3, =_sidata
 80033a0:	08003df4 	.word	0x08003df4
  ldr r0, =_sdata
 80033a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80033a8:	200001c4 	.word	0x200001c4
  ldr r2, =_sbss
 80033ac:	200001c4 	.word	0x200001c4
  ldr r3, = _ebss
 80033b0:	20001578 	.word	0x20001578

080033b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033b4:	e7fe      	b.n	80033b4 <ADC1_2_IRQHandler>
	...

080033b8 <__libc_init_array>:
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	2500      	movs	r5, #0
 80033bc:	4e0c      	ldr	r6, [pc, #48]	; (80033f0 <__libc_init_array+0x38>)
 80033be:	4c0d      	ldr	r4, [pc, #52]	; (80033f4 <__libc_init_array+0x3c>)
 80033c0:	1ba4      	subs	r4, r4, r6
 80033c2:	10a4      	asrs	r4, r4, #2
 80033c4:	42a5      	cmp	r5, r4
 80033c6:	d109      	bne.n	80033dc <__libc_init_array+0x24>
 80033c8:	f000 fc5c 	bl	8003c84 <_init>
 80033cc:	2500      	movs	r5, #0
 80033ce:	4e0a      	ldr	r6, [pc, #40]	; (80033f8 <__libc_init_array+0x40>)
 80033d0:	4c0a      	ldr	r4, [pc, #40]	; (80033fc <__libc_init_array+0x44>)
 80033d2:	1ba4      	subs	r4, r4, r6
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	42a5      	cmp	r5, r4
 80033d8:	d105      	bne.n	80033e6 <__libc_init_array+0x2e>
 80033da:	bd70      	pop	{r4, r5, r6, pc}
 80033dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033e0:	4798      	blx	r3
 80033e2:	3501      	adds	r5, #1
 80033e4:	e7ee      	b.n	80033c4 <__libc_init_array+0xc>
 80033e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ea:	4798      	blx	r3
 80033ec:	3501      	adds	r5, #1
 80033ee:	e7f2      	b.n	80033d6 <__libc_init_array+0x1e>
 80033f0:	08003dec 	.word	0x08003dec
 80033f4:	08003dec 	.word	0x08003dec
 80033f8:	08003dec 	.word	0x08003dec
 80033fc:	08003df0 	.word	0x08003df0

08003400 <memset>:
 8003400:	4603      	mov	r3, r0
 8003402:	4402      	add	r2, r0
 8003404:	4293      	cmp	r3, r2
 8003406:	d100      	bne.n	800340a <memset+0xa>
 8003408:	4770      	bx	lr
 800340a:	f803 1b01 	strb.w	r1, [r3], #1
 800340e:	e7f9      	b.n	8003404 <memset+0x4>

08003410 <siprintf>:
 8003410:	b40e      	push	{r1, r2, r3}
 8003412:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003416:	b500      	push	{lr}
 8003418:	b09c      	sub	sp, #112	; 0x70
 800341a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800341e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003422:	9104      	str	r1, [sp, #16]
 8003424:	9107      	str	r1, [sp, #28]
 8003426:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800342a:	ab1d      	add	r3, sp, #116	; 0x74
 800342c:	9002      	str	r0, [sp, #8]
 800342e:	9006      	str	r0, [sp, #24]
 8003430:	4808      	ldr	r0, [pc, #32]	; (8003454 <siprintf+0x44>)
 8003432:	f853 2b04 	ldr.w	r2, [r3], #4
 8003436:	f8ad 1016 	strh.w	r1, [sp, #22]
 800343a:	6800      	ldr	r0, [r0, #0]
 800343c:	a902      	add	r1, sp, #8
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	f000 f866 	bl	8003510 <_svfiprintf_r>
 8003444:	2200      	movs	r2, #0
 8003446:	9b02      	ldr	r3, [sp, #8]
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	b01c      	add	sp, #112	; 0x70
 800344c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003450:	b003      	add	sp, #12
 8003452:	4770      	bx	lr
 8003454:	20000160 	.word	0x20000160

08003458 <__ssputs_r>:
 8003458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800345c:	688e      	ldr	r6, [r1, #8]
 800345e:	4682      	mov	sl, r0
 8003460:	429e      	cmp	r6, r3
 8003462:	460c      	mov	r4, r1
 8003464:	4691      	mov	r9, r2
 8003466:	4698      	mov	r8, r3
 8003468:	d835      	bhi.n	80034d6 <__ssputs_r+0x7e>
 800346a:	898a      	ldrh	r2, [r1, #12]
 800346c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003470:	d031      	beq.n	80034d6 <__ssputs_r+0x7e>
 8003472:	2302      	movs	r3, #2
 8003474:	6825      	ldr	r5, [r4, #0]
 8003476:	6909      	ldr	r1, [r1, #16]
 8003478:	1a6f      	subs	r7, r5, r1
 800347a:	6965      	ldr	r5, [r4, #20]
 800347c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003480:	fb95 f5f3 	sdiv	r5, r5, r3
 8003484:	f108 0301 	add.w	r3, r8, #1
 8003488:	443b      	add	r3, r7
 800348a:	429d      	cmp	r5, r3
 800348c:	bf38      	it	cc
 800348e:	461d      	movcc	r5, r3
 8003490:	0553      	lsls	r3, r2, #21
 8003492:	d531      	bpl.n	80034f8 <__ssputs_r+0xa0>
 8003494:	4629      	mov	r1, r5
 8003496:	f000 fb47 	bl	8003b28 <_malloc_r>
 800349a:	4606      	mov	r6, r0
 800349c:	b950      	cbnz	r0, 80034b4 <__ssputs_r+0x5c>
 800349e:	230c      	movs	r3, #12
 80034a0:	f8ca 3000 	str.w	r3, [sl]
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	f04f 30ff 	mov.w	r0, #4294967295
 80034aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ae:	81a3      	strh	r3, [r4, #12]
 80034b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b4:	463a      	mov	r2, r7
 80034b6:	6921      	ldr	r1, [r4, #16]
 80034b8:	f000 fac4 	bl	8003a44 <memcpy>
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	6126      	str	r6, [r4, #16]
 80034ca:	443e      	add	r6, r7
 80034cc:	6026      	str	r6, [r4, #0]
 80034ce:	4646      	mov	r6, r8
 80034d0:	6165      	str	r5, [r4, #20]
 80034d2:	1bed      	subs	r5, r5, r7
 80034d4:	60a5      	str	r5, [r4, #8]
 80034d6:	4546      	cmp	r6, r8
 80034d8:	bf28      	it	cs
 80034da:	4646      	movcs	r6, r8
 80034dc:	4649      	mov	r1, r9
 80034de:	4632      	mov	r2, r6
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	f000 faba 	bl	8003a5a <memmove>
 80034e6:	68a3      	ldr	r3, [r4, #8]
 80034e8:	2000      	movs	r0, #0
 80034ea:	1b9b      	subs	r3, r3, r6
 80034ec:	60a3      	str	r3, [r4, #8]
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	441e      	add	r6, r3
 80034f2:	6026      	str	r6, [r4, #0]
 80034f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f8:	462a      	mov	r2, r5
 80034fa:	f000 fb73 	bl	8003be4 <_realloc_r>
 80034fe:	4606      	mov	r6, r0
 8003500:	2800      	cmp	r0, #0
 8003502:	d1e1      	bne.n	80034c8 <__ssputs_r+0x70>
 8003504:	6921      	ldr	r1, [r4, #16]
 8003506:	4650      	mov	r0, sl
 8003508:	f000 fac2 	bl	8003a90 <_free_r>
 800350c:	e7c7      	b.n	800349e <__ssputs_r+0x46>
	...

08003510 <_svfiprintf_r>:
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	b09d      	sub	sp, #116	; 0x74
 8003516:	9303      	str	r3, [sp, #12]
 8003518:	898b      	ldrh	r3, [r1, #12]
 800351a:	4680      	mov	r8, r0
 800351c:	061c      	lsls	r4, r3, #24
 800351e:	460d      	mov	r5, r1
 8003520:	4616      	mov	r6, r2
 8003522:	d50f      	bpl.n	8003544 <_svfiprintf_r+0x34>
 8003524:	690b      	ldr	r3, [r1, #16]
 8003526:	b96b      	cbnz	r3, 8003544 <_svfiprintf_r+0x34>
 8003528:	2140      	movs	r1, #64	; 0x40
 800352a:	f000 fafd 	bl	8003b28 <_malloc_r>
 800352e:	6028      	str	r0, [r5, #0]
 8003530:	6128      	str	r0, [r5, #16]
 8003532:	b928      	cbnz	r0, 8003540 <_svfiprintf_r+0x30>
 8003534:	230c      	movs	r3, #12
 8003536:	f8c8 3000 	str.w	r3, [r8]
 800353a:	f04f 30ff 	mov.w	r0, #4294967295
 800353e:	e0c4      	b.n	80036ca <_svfiprintf_r+0x1ba>
 8003540:	2340      	movs	r3, #64	; 0x40
 8003542:	616b      	str	r3, [r5, #20]
 8003544:	2300      	movs	r3, #0
 8003546:	9309      	str	r3, [sp, #36]	; 0x24
 8003548:	2320      	movs	r3, #32
 800354a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800354e:	2330      	movs	r3, #48	; 0x30
 8003550:	f04f 0b01 	mov.w	fp, #1
 8003554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003558:	4637      	mov	r7, r6
 800355a:	463c      	mov	r4, r7
 800355c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d13c      	bne.n	80035de <_svfiprintf_r+0xce>
 8003564:	ebb7 0a06 	subs.w	sl, r7, r6
 8003568:	d00b      	beq.n	8003582 <_svfiprintf_r+0x72>
 800356a:	4653      	mov	r3, sl
 800356c:	4632      	mov	r2, r6
 800356e:	4629      	mov	r1, r5
 8003570:	4640      	mov	r0, r8
 8003572:	f7ff ff71 	bl	8003458 <__ssputs_r>
 8003576:	3001      	adds	r0, #1
 8003578:	f000 80a2 	beq.w	80036c0 <_svfiprintf_r+0x1b0>
 800357c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800357e:	4453      	add	r3, sl
 8003580:	9309      	str	r3, [sp, #36]	; 0x24
 8003582:	783b      	ldrb	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 809b 	beq.w	80036c0 <_svfiprintf_r+0x1b0>
 800358a:	2300      	movs	r3, #0
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	9304      	str	r3, [sp, #16]
 8003592:	9307      	str	r3, [sp, #28]
 8003594:	9205      	str	r2, [sp, #20]
 8003596:	9306      	str	r3, [sp, #24]
 8003598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800359c:	931a      	str	r3, [sp, #104]	; 0x68
 800359e:	2205      	movs	r2, #5
 80035a0:	7821      	ldrb	r1, [r4, #0]
 80035a2:	4850      	ldr	r0, [pc, #320]	; (80036e4 <_svfiprintf_r+0x1d4>)
 80035a4:	f000 fa40 	bl	8003a28 <memchr>
 80035a8:	1c67      	adds	r7, r4, #1
 80035aa:	9b04      	ldr	r3, [sp, #16]
 80035ac:	b9d8      	cbnz	r0, 80035e6 <_svfiprintf_r+0xd6>
 80035ae:	06d9      	lsls	r1, r3, #27
 80035b0:	bf44      	itt	mi
 80035b2:	2220      	movmi	r2, #32
 80035b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035b8:	071a      	lsls	r2, r3, #28
 80035ba:	bf44      	itt	mi
 80035bc:	222b      	movmi	r2, #43	; 0x2b
 80035be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035c2:	7822      	ldrb	r2, [r4, #0]
 80035c4:	2a2a      	cmp	r2, #42	; 0x2a
 80035c6:	d016      	beq.n	80035f6 <_svfiprintf_r+0xe6>
 80035c8:	2100      	movs	r1, #0
 80035ca:	200a      	movs	r0, #10
 80035cc:	9a07      	ldr	r2, [sp, #28]
 80035ce:	4627      	mov	r7, r4
 80035d0:	783b      	ldrb	r3, [r7, #0]
 80035d2:	3401      	adds	r4, #1
 80035d4:	3b30      	subs	r3, #48	; 0x30
 80035d6:	2b09      	cmp	r3, #9
 80035d8:	d950      	bls.n	800367c <_svfiprintf_r+0x16c>
 80035da:	b1c9      	cbz	r1, 8003610 <_svfiprintf_r+0x100>
 80035dc:	e011      	b.n	8003602 <_svfiprintf_r+0xf2>
 80035de:	2b25      	cmp	r3, #37	; 0x25
 80035e0:	d0c0      	beq.n	8003564 <_svfiprintf_r+0x54>
 80035e2:	4627      	mov	r7, r4
 80035e4:	e7b9      	b.n	800355a <_svfiprintf_r+0x4a>
 80035e6:	4a3f      	ldr	r2, [pc, #252]	; (80036e4 <_svfiprintf_r+0x1d4>)
 80035e8:	463c      	mov	r4, r7
 80035ea:	1a80      	subs	r0, r0, r2
 80035ec:	fa0b f000 	lsl.w	r0, fp, r0
 80035f0:	4318      	orrs	r0, r3
 80035f2:	9004      	str	r0, [sp, #16]
 80035f4:	e7d3      	b.n	800359e <_svfiprintf_r+0x8e>
 80035f6:	9a03      	ldr	r2, [sp, #12]
 80035f8:	1d11      	adds	r1, r2, #4
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	9103      	str	r1, [sp, #12]
 80035fe:	2a00      	cmp	r2, #0
 8003600:	db01      	blt.n	8003606 <_svfiprintf_r+0xf6>
 8003602:	9207      	str	r2, [sp, #28]
 8003604:	e004      	b.n	8003610 <_svfiprintf_r+0x100>
 8003606:	4252      	negs	r2, r2
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	9207      	str	r2, [sp, #28]
 800360e:	9304      	str	r3, [sp, #16]
 8003610:	783b      	ldrb	r3, [r7, #0]
 8003612:	2b2e      	cmp	r3, #46	; 0x2e
 8003614:	d10d      	bne.n	8003632 <_svfiprintf_r+0x122>
 8003616:	787b      	ldrb	r3, [r7, #1]
 8003618:	1c79      	adds	r1, r7, #1
 800361a:	2b2a      	cmp	r3, #42	; 0x2a
 800361c:	d132      	bne.n	8003684 <_svfiprintf_r+0x174>
 800361e:	9b03      	ldr	r3, [sp, #12]
 8003620:	3702      	adds	r7, #2
 8003622:	1d1a      	adds	r2, r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	9203      	str	r2, [sp, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	bfb8      	it	lt
 800362c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003630:	9305      	str	r3, [sp, #20]
 8003632:	4c2d      	ldr	r4, [pc, #180]	; (80036e8 <_svfiprintf_r+0x1d8>)
 8003634:	2203      	movs	r2, #3
 8003636:	7839      	ldrb	r1, [r7, #0]
 8003638:	4620      	mov	r0, r4
 800363a:	f000 f9f5 	bl	8003a28 <memchr>
 800363e:	b138      	cbz	r0, 8003650 <_svfiprintf_r+0x140>
 8003640:	2340      	movs	r3, #64	; 0x40
 8003642:	1b00      	subs	r0, r0, r4
 8003644:	fa03 f000 	lsl.w	r0, r3, r0
 8003648:	9b04      	ldr	r3, [sp, #16]
 800364a:	3701      	adds	r7, #1
 800364c:	4303      	orrs	r3, r0
 800364e:	9304      	str	r3, [sp, #16]
 8003650:	7839      	ldrb	r1, [r7, #0]
 8003652:	2206      	movs	r2, #6
 8003654:	4825      	ldr	r0, [pc, #148]	; (80036ec <_svfiprintf_r+0x1dc>)
 8003656:	1c7e      	adds	r6, r7, #1
 8003658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800365c:	f000 f9e4 	bl	8003a28 <memchr>
 8003660:	2800      	cmp	r0, #0
 8003662:	d035      	beq.n	80036d0 <_svfiprintf_r+0x1c0>
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <_svfiprintf_r+0x1e0>)
 8003666:	b9fb      	cbnz	r3, 80036a8 <_svfiprintf_r+0x198>
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	3307      	adds	r3, #7
 800366c:	f023 0307 	bic.w	r3, r3, #7
 8003670:	3308      	adds	r3, #8
 8003672:	9303      	str	r3, [sp, #12]
 8003674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003676:	444b      	add	r3, r9
 8003678:	9309      	str	r3, [sp, #36]	; 0x24
 800367a:	e76d      	b.n	8003558 <_svfiprintf_r+0x48>
 800367c:	fb00 3202 	mla	r2, r0, r2, r3
 8003680:	2101      	movs	r1, #1
 8003682:	e7a4      	b.n	80035ce <_svfiprintf_r+0xbe>
 8003684:	2300      	movs	r3, #0
 8003686:	240a      	movs	r4, #10
 8003688:	4618      	mov	r0, r3
 800368a:	9305      	str	r3, [sp, #20]
 800368c:	460f      	mov	r7, r1
 800368e:	783a      	ldrb	r2, [r7, #0]
 8003690:	3101      	adds	r1, #1
 8003692:	3a30      	subs	r2, #48	; 0x30
 8003694:	2a09      	cmp	r2, #9
 8003696:	d903      	bls.n	80036a0 <_svfiprintf_r+0x190>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ca      	beq.n	8003632 <_svfiprintf_r+0x122>
 800369c:	9005      	str	r0, [sp, #20]
 800369e:	e7c8      	b.n	8003632 <_svfiprintf_r+0x122>
 80036a0:	fb04 2000 	mla	r0, r4, r0, r2
 80036a4:	2301      	movs	r3, #1
 80036a6:	e7f1      	b.n	800368c <_svfiprintf_r+0x17c>
 80036a8:	ab03      	add	r3, sp, #12
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	462a      	mov	r2, r5
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <_svfiprintf_r+0x1e4>)
 80036b0:	a904      	add	r1, sp, #16
 80036b2:	4640      	mov	r0, r8
 80036b4:	f3af 8000 	nop.w
 80036b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036bc:	4681      	mov	r9, r0
 80036be:	d1d9      	bne.n	8003674 <_svfiprintf_r+0x164>
 80036c0:	89ab      	ldrh	r3, [r5, #12]
 80036c2:	065b      	lsls	r3, r3, #25
 80036c4:	f53f af39 	bmi.w	800353a <_svfiprintf_r+0x2a>
 80036c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ca:	b01d      	add	sp, #116	; 0x74
 80036cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d0:	ab03      	add	r3, sp, #12
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	462a      	mov	r2, r5
 80036d6:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <_svfiprintf_r+0x1e4>)
 80036d8:	a904      	add	r1, sp, #16
 80036da:	4640      	mov	r0, r8
 80036dc:	f000 f884 	bl	80037e8 <_printf_i>
 80036e0:	e7ea      	b.n	80036b8 <_svfiprintf_r+0x1a8>
 80036e2:	bf00      	nop
 80036e4:	08003db9 	.word	0x08003db9
 80036e8:	08003dbf 	.word	0x08003dbf
 80036ec:	08003dc3 	.word	0x08003dc3
 80036f0:	00000000 	.word	0x00000000
 80036f4:	08003459 	.word	0x08003459

080036f8 <_printf_common>:
 80036f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036fc:	4691      	mov	r9, r2
 80036fe:	461f      	mov	r7, r3
 8003700:	688a      	ldr	r2, [r1, #8]
 8003702:	690b      	ldr	r3, [r1, #16]
 8003704:	4606      	mov	r6, r0
 8003706:	4293      	cmp	r3, r2
 8003708:	bfb8      	it	lt
 800370a:	4613      	movlt	r3, r2
 800370c:	f8c9 3000 	str.w	r3, [r9]
 8003710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003714:	460c      	mov	r4, r1
 8003716:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800371a:	b112      	cbz	r2, 8003722 <_printf_common+0x2a>
 800371c:	3301      	adds	r3, #1
 800371e:	f8c9 3000 	str.w	r3, [r9]
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	0699      	lsls	r1, r3, #26
 8003726:	bf42      	ittt	mi
 8003728:	f8d9 3000 	ldrmi.w	r3, [r9]
 800372c:	3302      	addmi	r3, #2
 800372e:	f8c9 3000 	strmi.w	r3, [r9]
 8003732:	6825      	ldr	r5, [r4, #0]
 8003734:	f015 0506 	ands.w	r5, r5, #6
 8003738:	d107      	bne.n	800374a <_printf_common+0x52>
 800373a:	f104 0a19 	add.w	sl, r4, #25
 800373e:	68e3      	ldr	r3, [r4, #12]
 8003740:	f8d9 2000 	ldr.w	r2, [r9]
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	429d      	cmp	r5, r3
 8003748:	db2a      	blt.n	80037a0 <_printf_common+0xa8>
 800374a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	3300      	adds	r3, #0
 8003752:	bf18      	it	ne
 8003754:	2301      	movne	r3, #1
 8003756:	0692      	lsls	r2, r2, #26
 8003758:	d42f      	bmi.n	80037ba <_printf_common+0xc2>
 800375a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800375e:	4639      	mov	r1, r7
 8003760:	4630      	mov	r0, r6
 8003762:	47c0      	blx	r8
 8003764:	3001      	adds	r0, #1
 8003766:	d022      	beq.n	80037ae <_printf_common+0xb6>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	68e5      	ldr	r5, [r4, #12]
 800376c:	f003 0306 	and.w	r3, r3, #6
 8003770:	2b04      	cmp	r3, #4
 8003772:	bf18      	it	ne
 8003774:	2500      	movne	r5, #0
 8003776:	f8d9 2000 	ldr.w	r2, [r9]
 800377a:	f04f 0900 	mov.w	r9, #0
 800377e:	bf08      	it	eq
 8003780:	1aad      	subeq	r5, r5, r2
 8003782:	68a3      	ldr	r3, [r4, #8]
 8003784:	6922      	ldr	r2, [r4, #16]
 8003786:	bf08      	it	eq
 8003788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800378c:	4293      	cmp	r3, r2
 800378e:	bfc4      	itt	gt
 8003790:	1a9b      	subgt	r3, r3, r2
 8003792:	18ed      	addgt	r5, r5, r3
 8003794:	341a      	adds	r4, #26
 8003796:	454d      	cmp	r5, r9
 8003798:	d11b      	bne.n	80037d2 <_printf_common+0xda>
 800379a:	2000      	movs	r0, #0
 800379c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a0:	2301      	movs	r3, #1
 80037a2:	4652      	mov	r2, sl
 80037a4:	4639      	mov	r1, r7
 80037a6:	4630      	mov	r0, r6
 80037a8:	47c0      	blx	r8
 80037aa:	3001      	adds	r0, #1
 80037ac:	d103      	bne.n	80037b6 <_printf_common+0xbe>
 80037ae:	f04f 30ff 	mov.w	r0, #4294967295
 80037b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b6:	3501      	adds	r5, #1
 80037b8:	e7c1      	b.n	800373e <_printf_common+0x46>
 80037ba:	2030      	movs	r0, #48	; 0x30
 80037bc:	18e1      	adds	r1, r4, r3
 80037be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c8:	4422      	add	r2, r4
 80037ca:	3302      	adds	r3, #2
 80037cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037d0:	e7c3      	b.n	800375a <_printf_common+0x62>
 80037d2:	2301      	movs	r3, #1
 80037d4:	4622      	mov	r2, r4
 80037d6:	4639      	mov	r1, r7
 80037d8:	4630      	mov	r0, r6
 80037da:	47c0      	blx	r8
 80037dc:	3001      	adds	r0, #1
 80037de:	d0e6      	beq.n	80037ae <_printf_common+0xb6>
 80037e0:	f109 0901 	add.w	r9, r9, #1
 80037e4:	e7d7      	b.n	8003796 <_printf_common+0x9e>
	...

080037e8 <_printf_i>:
 80037e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ec:	4617      	mov	r7, r2
 80037ee:	7e0a      	ldrb	r2, [r1, #24]
 80037f0:	b085      	sub	sp, #20
 80037f2:	2a6e      	cmp	r2, #110	; 0x6e
 80037f4:	4698      	mov	r8, r3
 80037f6:	4606      	mov	r6, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003800:	f000 80bc 	beq.w	800397c <_printf_i+0x194>
 8003804:	d81a      	bhi.n	800383c <_printf_i+0x54>
 8003806:	2a63      	cmp	r2, #99	; 0x63
 8003808:	d02e      	beq.n	8003868 <_printf_i+0x80>
 800380a:	d80a      	bhi.n	8003822 <_printf_i+0x3a>
 800380c:	2a00      	cmp	r2, #0
 800380e:	f000 80c8 	beq.w	80039a2 <_printf_i+0x1ba>
 8003812:	2a58      	cmp	r2, #88	; 0x58
 8003814:	f000 808a 	beq.w	800392c <_printf_i+0x144>
 8003818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800381c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003820:	e02a      	b.n	8003878 <_printf_i+0x90>
 8003822:	2a64      	cmp	r2, #100	; 0x64
 8003824:	d001      	beq.n	800382a <_printf_i+0x42>
 8003826:	2a69      	cmp	r2, #105	; 0x69
 8003828:	d1f6      	bne.n	8003818 <_printf_i+0x30>
 800382a:	6821      	ldr	r1, [r4, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003832:	d023      	beq.n	800387c <_printf_i+0x94>
 8003834:	1d11      	adds	r1, r2, #4
 8003836:	6019      	str	r1, [r3, #0]
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	e027      	b.n	800388c <_printf_i+0xa4>
 800383c:	2a73      	cmp	r2, #115	; 0x73
 800383e:	f000 80b4 	beq.w	80039aa <_printf_i+0x1c2>
 8003842:	d808      	bhi.n	8003856 <_printf_i+0x6e>
 8003844:	2a6f      	cmp	r2, #111	; 0x6f
 8003846:	d02a      	beq.n	800389e <_printf_i+0xb6>
 8003848:	2a70      	cmp	r2, #112	; 0x70
 800384a:	d1e5      	bne.n	8003818 <_printf_i+0x30>
 800384c:	680a      	ldr	r2, [r1, #0]
 800384e:	f042 0220 	orr.w	r2, r2, #32
 8003852:	600a      	str	r2, [r1, #0]
 8003854:	e003      	b.n	800385e <_printf_i+0x76>
 8003856:	2a75      	cmp	r2, #117	; 0x75
 8003858:	d021      	beq.n	800389e <_printf_i+0xb6>
 800385a:	2a78      	cmp	r2, #120	; 0x78
 800385c:	d1dc      	bne.n	8003818 <_printf_i+0x30>
 800385e:	2278      	movs	r2, #120	; 0x78
 8003860:	496f      	ldr	r1, [pc, #444]	; (8003a20 <_printf_i+0x238>)
 8003862:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003866:	e064      	b.n	8003932 <_printf_i+0x14a>
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800386e:	1d11      	adds	r1, r2, #4
 8003870:	6019      	str	r1, [r3, #0]
 8003872:	6813      	ldr	r3, [r2, #0]
 8003874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003878:	2301      	movs	r3, #1
 800387a:	e0a3      	b.n	80039c4 <_printf_i+0x1dc>
 800387c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003880:	f102 0104 	add.w	r1, r2, #4
 8003884:	6019      	str	r1, [r3, #0]
 8003886:	d0d7      	beq.n	8003838 <_printf_i+0x50>
 8003888:	f9b2 3000 	ldrsh.w	r3, [r2]
 800388c:	2b00      	cmp	r3, #0
 800388e:	da03      	bge.n	8003898 <_printf_i+0xb0>
 8003890:	222d      	movs	r2, #45	; 0x2d
 8003892:	425b      	negs	r3, r3
 8003894:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003898:	4962      	ldr	r1, [pc, #392]	; (8003a24 <_printf_i+0x23c>)
 800389a:	220a      	movs	r2, #10
 800389c:	e017      	b.n	80038ce <_printf_i+0xe6>
 800389e:	6820      	ldr	r0, [r4, #0]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038a6:	d003      	beq.n	80038b0 <_printf_i+0xc8>
 80038a8:	1d08      	adds	r0, r1, #4
 80038aa:	6018      	str	r0, [r3, #0]
 80038ac:	680b      	ldr	r3, [r1, #0]
 80038ae:	e006      	b.n	80038be <_printf_i+0xd6>
 80038b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038b4:	f101 0004 	add.w	r0, r1, #4
 80038b8:	6018      	str	r0, [r3, #0]
 80038ba:	d0f7      	beq.n	80038ac <_printf_i+0xc4>
 80038bc:	880b      	ldrh	r3, [r1, #0]
 80038be:	2a6f      	cmp	r2, #111	; 0x6f
 80038c0:	bf14      	ite	ne
 80038c2:	220a      	movne	r2, #10
 80038c4:	2208      	moveq	r2, #8
 80038c6:	4957      	ldr	r1, [pc, #348]	; (8003a24 <_printf_i+0x23c>)
 80038c8:	2000      	movs	r0, #0
 80038ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80038ce:	6865      	ldr	r5, [r4, #4]
 80038d0:	2d00      	cmp	r5, #0
 80038d2:	60a5      	str	r5, [r4, #8]
 80038d4:	f2c0 809c 	blt.w	8003a10 <_printf_i+0x228>
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	f020 0004 	bic.w	r0, r0, #4
 80038de:	6020      	str	r0, [r4, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d13f      	bne.n	8003964 <_printf_i+0x17c>
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	f040 8095 	bne.w	8003a14 <_printf_i+0x22c>
 80038ea:	4675      	mov	r5, lr
 80038ec:	2a08      	cmp	r2, #8
 80038ee:	d10b      	bne.n	8003908 <_printf_i+0x120>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	07da      	lsls	r2, r3, #31
 80038f4:	d508      	bpl.n	8003908 <_printf_i+0x120>
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	6862      	ldr	r2, [r4, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	bfde      	ittt	le
 80038fe:	2330      	movle	r3, #48	; 0x30
 8003900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003904:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003908:	ebae 0305 	sub.w	r3, lr, r5
 800390c:	6123      	str	r3, [r4, #16]
 800390e:	f8cd 8000 	str.w	r8, [sp]
 8003912:	463b      	mov	r3, r7
 8003914:	aa03      	add	r2, sp, #12
 8003916:	4621      	mov	r1, r4
 8003918:	4630      	mov	r0, r6
 800391a:	f7ff feed 	bl	80036f8 <_printf_common>
 800391e:	3001      	adds	r0, #1
 8003920:	d155      	bne.n	80039ce <_printf_i+0x1e6>
 8003922:	f04f 30ff 	mov.w	r0, #4294967295
 8003926:	b005      	add	sp, #20
 8003928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800392c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003930:	493c      	ldr	r1, [pc, #240]	; (8003a24 <_printf_i+0x23c>)
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f012 0f80 	tst.w	r2, #128	; 0x80
 800393a:	f100 0504 	add.w	r5, r0, #4
 800393e:	601d      	str	r5, [r3, #0]
 8003940:	d001      	beq.n	8003946 <_printf_i+0x15e>
 8003942:	6803      	ldr	r3, [r0, #0]
 8003944:	e002      	b.n	800394c <_printf_i+0x164>
 8003946:	0655      	lsls	r5, r2, #25
 8003948:	d5fb      	bpl.n	8003942 <_printf_i+0x15a>
 800394a:	8803      	ldrh	r3, [r0, #0]
 800394c:	07d0      	lsls	r0, r2, #31
 800394e:	bf44      	itt	mi
 8003950:	f042 0220 	orrmi.w	r2, r2, #32
 8003954:	6022      	strmi	r2, [r4, #0]
 8003956:	b91b      	cbnz	r3, 8003960 <_printf_i+0x178>
 8003958:	6822      	ldr	r2, [r4, #0]
 800395a:	f022 0220 	bic.w	r2, r2, #32
 800395e:	6022      	str	r2, [r4, #0]
 8003960:	2210      	movs	r2, #16
 8003962:	e7b1      	b.n	80038c8 <_printf_i+0xe0>
 8003964:	4675      	mov	r5, lr
 8003966:	fbb3 f0f2 	udiv	r0, r3, r2
 800396a:	fb02 3310 	mls	r3, r2, r0, r3
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003974:	4603      	mov	r3, r0
 8003976:	2800      	cmp	r0, #0
 8003978:	d1f5      	bne.n	8003966 <_printf_i+0x17e>
 800397a:	e7b7      	b.n	80038ec <_printf_i+0x104>
 800397c:	6808      	ldr	r0, [r1, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003984:	6949      	ldr	r1, [r1, #20]
 8003986:	d004      	beq.n	8003992 <_printf_i+0x1aa>
 8003988:	1d10      	adds	r0, r2, #4
 800398a:	6018      	str	r0, [r3, #0]
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	6019      	str	r1, [r3, #0]
 8003990:	e007      	b.n	80039a2 <_printf_i+0x1ba>
 8003992:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003996:	f102 0004 	add.w	r0, r2, #4
 800399a:	6018      	str	r0, [r3, #0]
 800399c:	6813      	ldr	r3, [r2, #0]
 800399e:	d0f6      	beq.n	800398e <_printf_i+0x1a6>
 80039a0:	8019      	strh	r1, [r3, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	4675      	mov	r5, lr
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	e7b1      	b.n	800390e <_printf_i+0x126>
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	1d11      	adds	r1, r2, #4
 80039ae:	6019      	str	r1, [r3, #0]
 80039b0:	6815      	ldr	r5, [r2, #0]
 80039b2:	2100      	movs	r1, #0
 80039b4:	6862      	ldr	r2, [r4, #4]
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f836 	bl	8003a28 <memchr>
 80039bc:	b108      	cbz	r0, 80039c2 <_printf_i+0x1da>
 80039be:	1b40      	subs	r0, r0, r5
 80039c0:	6060      	str	r0, [r4, #4]
 80039c2:	6863      	ldr	r3, [r4, #4]
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	2300      	movs	r3, #0
 80039c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039cc:	e79f      	b.n	800390e <_printf_i+0x126>
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	462a      	mov	r2, r5
 80039d2:	4639      	mov	r1, r7
 80039d4:	4630      	mov	r0, r6
 80039d6:	47c0      	blx	r8
 80039d8:	3001      	adds	r0, #1
 80039da:	d0a2      	beq.n	8003922 <_printf_i+0x13a>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	079b      	lsls	r3, r3, #30
 80039e0:	d507      	bpl.n	80039f2 <_printf_i+0x20a>
 80039e2:	2500      	movs	r5, #0
 80039e4:	f104 0919 	add.w	r9, r4, #25
 80039e8:	68e3      	ldr	r3, [r4, #12]
 80039ea:	9a03      	ldr	r2, [sp, #12]
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	429d      	cmp	r5, r3
 80039f0:	db05      	blt.n	80039fe <_printf_i+0x216>
 80039f2:	68e0      	ldr	r0, [r4, #12]
 80039f4:	9b03      	ldr	r3, [sp, #12]
 80039f6:	4298      	cmp	r0, r3
 80039f8:	bfb8      	it	lt
 80039fa:	4618      	movlt	r0, r3
 80039fc:	e793      	b.n	8003926 <_printf_i+0x13e>
 80039fe:	2301      	movs	r3, #1
 8003a00:	464a      	mov	r2, r9
 8003a02:	4639      	mov	r1, r7
 8003a04:	4630      	mov	r0, r6
 8003a06:	47c0      	blx	r8
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d08a      	beq.n	8003922 <_printf_i+0x13a>
 8003a0c:	3501      	adds	r5, #1
 8003a0e:	e7eb      	b.n	80039e8 <_printf_i+0x200>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1a7      	bne.n	8003964 <_printf_i+0x17c>
 8003a14:	780b      	ldrb	r3, [r1, #0]
 8003a16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a1e:	e765      	b.n	80038ec <_printf_i+0x104>
 8003a20:	08003ddb 	.word	0x08003ddb
 8003a24:	08003dca 	.word	0x08003dca

08003a28 <memchr>:
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	b2c9      	uxtb	r1, r1
 8003a2c:	4402      	add	r2, r0
 8003a2e:	4290      	cmp	r0, r2
 8003a30:	4603      	mov	r3, r0
 8003a32:	d101      	bne.n	8003a38 <memchr+0x10>
 8003a34:	2000      	movs	r0, #0
 8003a36:	bd10      	pop	{r4, pc}
 8003a38:	781c      	ldrb	r4, [r3, #0]
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	428c      	cmp	r4, r1
 8003a3e:	d1f6      	bne.n	8003a2e <memchr+0x6>
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd10      	pop	{r4, pc}

08003a44 <memcpy>:
 8003a44:	b510      	push	{r4, lr}
 8003a46:	1e43      	subs	r3, r0, #1
 8003a48:	440a      	add	r2, r1
 8003a4a:	4291      	cmp	r1, r2
 8003a4c:	d100      	bne.n	8003a50 <memcpy+0xc>
 8003a4e:	bd10      	pop	{r4, pc}
 8003a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a58:	e7f7      	b.n	8003a4a <memcpy+0x6>

08003a5a <memmove>:
 8003a5a:	4288      	cmp	r0, r1
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	eb01 0302 	add.w	r3, r1, r2
 8003a62:	d803      	bhi.n	8003a6c <memmove+0x12>
 8003a64:	1e42      	subs	r2, r0, #1
 8003a66:	4299      	cmp	r1, r3
 8003a68:	d10c      	bne.n	8003a84 <memmove+0x2a>
 8003a6a:	bd10      	pop	{r4, pc}
 8003a6c:	4298      	cmp	r0, r3
 8003a6e:	d2f9      	bcs.n	8003a64 <memmove+0xa>
 8003a70:	1881      	adds	r1, r0, r2
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	42d3      	cmn	r3, r2
 8003a76:	d100      	bne.n	8003a7a <memmove+0x20>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a82:	e7f7      	b.n	8003a74 <memmove+0x1a>
 8003a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a88:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a8c:	e7eb      	b.n	8003a66 <memmove+0xc>
	...

08003a90 <_free_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	4605      	mov	r5, r0
 8003a94:	2900      	cmp	r1, #0
 8003a96:	d043      	beq.n	8003b20 <_free_r+0x90>
 8003a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a9c:	1f0c      	subs	r4, r1, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bfb8      	it	lt
 8003aa2:	18e4      	addlt	r4, r4, r3
 8003aa4:	f000 f8d4 	bl	8003c50 <__malloc_lock>
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <_free_r+0x94>)
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	4610      	mov	r0, r2
 8003aae:	b933      	cbnz	r3, 8003abe <_free_r+0x2e>
 8003ab0:	6063      	str	r3, [r4, #4]
 8003ab2:	6014      	str	r4, [r2, #0]
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aba:	f000 b8ca 	b.w	8003c52 <__malloc_unlock>
 8003abe:	42a3      	cmp	r3, r4
 8003ac0:	d90b      	bls.n	8003ada <_free_r+0x4a>
 8003ac2:	6821      	ldr	r1, [r4, #0]
 8003ac4:	1862      	adds	r2, r4, r1
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	bf01      	itttt	eq
 8003aca:	681a      	ldreq	r2, [r3, #0]
 8003acc:	685b      	ldreq	r3, [r3, #4]
 8003ace:	1852      	addeq	r2, r2, r1
 8003ad0:	6022      	streq	r2, [r4, #0]
 8003ad2:	6063      	str	r3, [r4, #4]
 8003ad4:	6004      	str	r4, [r0, #0]
 8003ad6:	e7ed      	b.n	8003ab4 <_free_r+0x24>
 8003ad8:	4613      	mov	r3, r2
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	b10a      	cbz	r2, 8003ae2 <_free_r+0x52>
 8003ade:	42a2      	cmp	r2, r4
 8003ae0:	d9fa      	bls.n	8003ad8 <_free_r+0x48>
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	1858      	adds	r0, r3, r1
 8003ae6:	42a0      	cmp	r0, r4
 8003ae8:	d10b      	bne.n	8003b02 <_free_r+0x72>
 8003aea:	6820      	ldr	r0, [r4, #0]
 8003aec:	4401      	add	r1, r0
 8003aee:	1858      	adds	r0, r3, r1
 8003af0:	4282      	cmp	r2, r0
 8003af2:	6019      	str	r1, [r3, #0]
 8003af4:	d1de      	bne.n	8003ab4 <_free_r+0x24>
 8003af6:	6810      	ldr	r0, [r2, #0]
 8003af8:	6852      	ldr	r2, [r2, #4]
 8003afa:	4401      	add	r1, r0
 8003afc:	6019      	str	r1, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	e7d8      	b.n	8003ab4 <_free_r+0x24>
 8003b02:	d902      	bls.n	8003b0a <_free_r+0x7a>
 8003b04:	230c      	movs	r3, #12
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	e7d4      	b.n	8003ab4 <_free_r+0x24>
 8003b0a:	6820      	ldr	r0, [r4, #0]
 8003b0c:	1821      	adds	r1, r4, r0
 8003b0e:	428a      	cmp	r2, r1
 8003b10:	bf01      	itttt	eq
 8003b12:	6811      	ldreq	r1, [r2, #0]
 8003b14:	6852      	ldreq	r2, [r2, #4]
 8003b16:	1809      	addeq	r1, r1, r0
 8003b18:	6021      	streq	r1, [r4, #0]
 8003b1a:	6062      	str	r2, [r4, #4]
 8003b1c:	605c      	str	r4, [r3, #4]
 8003b1e:	e7c9      	b.n	8003ab4 <_free_r+0x24>
 8003b20:	bd38      	pop	{r3, r4, r5, pc}
 8003b22:	bf00      	nop
 8003b24:	20000410 	.word	0x20000410

08003b28 <_malloc_r>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	1ccd      	adds	r5, r1, #3
 8003b2c:	f025 0503 	bic.w	r5, r5, #3
 8003b30:	3508      	adds	r5, #8
 8003b32:	2d0c      	cmp	r5, #12
 8003b34:	bf38      	it	cc
 8003b36:	250c      	movcc	r5, #12
 8003b38:	2d00      	cmp	r5, #0
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	db01      	blt.n	8003b42 <_malloc_r+0x1a>
 8003b3e:	42a9      	cmp	r1, r5
 8003b40:	d903      	bls.n	8003b4a <_malloc_r+0x22>
 8003b42:	230c      	movs	r3, #12
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	2000      	movs	r0, #0
 8003b48:	bd70      	pop	{r4, r5, r6, pc}
 8003b4a:	f000 f881 	bl	8003c50 <__malloc_lock>
 8003b4e:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <_malloc_r+0xb4>)
 8003b50:	6814      	ldr	r4, [r2, #0]
 8003b52:	4621      	mov	r1, r4
 8003b54:	b991      	cbnz	r1, 8003b7c <_malloc_r+0x54>
 8003b56:	4c22      	ldr	r4, [pc, #136]	; (8003be0 <_malloc_r+0xb8>)
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	b91b      	cbnz	r3, 8003b64 <_malloc_r+0x3c>
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f000 f867 	bl	8003c30 <_sbrk_r>
 8003b62:	6020      	str	r0, [r4, #0]
 8003b64:	4629      	mov	r1, r5
 8003b66:	4630      	mov	r0, r6
 8003b68:	f000 f862 	bl	8003c30 <_sbrk_r>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d126      	bne.n	8003bbe <_malloc_r+0x96>
 8003b70:	230c      	movs	r3, #12
 8003b72:	4630      	mov	r0, r6
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	f000 f86c 	bl	8003c52 <__malloc_unlock>
 8003b7a:	e7e4      	b.n	8003b46 <_malloc_r+0x1e>
 8003b7c:	680b      	ldr	r3, [r1, #0]
 8003b7e:	1b5b      	subs	r3, r3, r5
 8003b80:	d41a      	bmi.n	8003bb8 <_malloc_r+0x90>
 8003b82:	2b0b      	cmp	r3, #11
 8003b84:	d90f      	bls.n	8003ba6 <_malloc_r+0x7e>
 8003b86:	600b      	str	r3, [r1, #0]
 8003b88:	18cc      	adds	r4, r1, r3
 8003b8a:	50cd      	str	r5, [r1, r3]
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f000 f860 	bl	8003c52 <__malloc_unlock>
 8003b92:	f104 000b 	add.w	r0, r4, #11
 8003b96:	1d23      	adds	r3, r4, #4
 8003b98:	f020 0007 	bic.w	r0, r0, #7
 8003b9c:	1ac3      	subs	r3, r0, r3
 8003b9e:	d01b      	beq.n	8003bd8 <_malloc_r+0xb0>
 8003ba0:	425a      	negs	r2, r3
 8003ba2:	50e2      	str	r2, [r4, r3]
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
 8003ba6:	428c      	cmp	r4, r1
 8003ba8:	bf0b      	itete	eq
 8003baa:	6863      	ldreq	r3, [r4, #4]
 8003bac:	684b      	ldrne	r3, [r1, #4]
 8003bae:	6013      	streq	r3, [r2, #0]
 8003bb0:	6063      	strne	r3, [r4, #4]
 8003bb2:	bf18      	it	ne
 8003bb4:	460c      	movne	r4, r1
 8003bb6:	e7e9      	b.n	8003b8c <_malloc_r+0x64>
 8003bb8:	460c      	mov	r4, r1
 8003bba:	6849      	ldr	r1, [r1, #4]
 8003bbc:	e7ca      	b.n	8003b54 <_malloc_r+0x2c>
 8003bbe:	1cc4      	adds	r4, r0, #3
 8003bc0:	f024 0403 	bic.w	r4, r4, #3
 8003bc4:	42a0      	cmp	r0, r4
 8003bc6:	d005      	beq.n	8003bd4 <_malloc_r+0xac>
 8003bc8:	1a21      	subs	r1, r4, r0
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f000 f830 	bl	8003c30 <_sbrk_r>
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d0cd      	beq.n	8003b70 <_malloc_r+0x48>
 8003bd4:	6025      	str	r5, [r4, #0]
 8003bd6:	e7d9      	b.n	8003b8c <_malloc_r+0x64>
 8003bd8:	bd70      	pop	{r4, r5, r6, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000410 	.word	0x20000410
 8003be0:	20000414 	.word	0x20000414

08003be4 <_realloc_r>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	4607      	mov	r7, r0
 8003be8:	4614      	mov	r4, r2
 8003bea:	460e      	mov	r6, r1
 8003bec:	b921      	cbnz	r1, 8003bf8 <_realloc_r+0x14>
 8003bee:	4611      	mov	r1, r2
 8003bf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bf4:	f7ff bf98 	b.w	8003b28 <_malloc_r>
 8003bf8:	b922      	cbnz	r2, 8003c04 <_realloc_r+0x20>
 8003bfa:	f7ff ff49 	bl	8003a90 <_free_r>
 8003bfe:	4625      	mov	r5, r4
 8003c00:	4628      	mov	r0, r5
 8003c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c04:	f000 f826 	bl	8003c54 <_malloc_usable_size_r>
 8003c08:	4284      	cmp	r4, r0
 8003c0a:	d90f      	bls.n	8003c2c <_realloc_r+0x48>
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4638      	mov	r0, r7
 8003c10:	f7ff ff8a 	bl	8003b28 <_malloc_r>
 8003c14:	4605      	mov	r5, r0
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d0f2      	beq.n	8003c00 <_realloc_r+0x1c>
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	f7ff ff11 	bl	8003a44 <memcpy>
 8003c22:	4631      	mov	r1, r6
 8003c24:	4638      	mov	r0, r7
 8003c26:	f7ff ff33 	bl	8003a90 <_free_r>
 8003c2a:	e7e9      	b.n	8003c00 <_realloc_r+0x1c>
 8003c2c:	4635      	mov	r5, r6
 8003c2e:	e7e7      	b.n	8003c00 <_realloc_r+0x1c>

08003c30 <_sbrk_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	2300      	movs	r3, #0
 8003c34:	4c05      	ldr	r4, [pc, #20]	; (8003c4c <_sbrk_r+0x1c>)
 8003c36:	4605      	mov	r5, r0
 8003c38:	4608      	mov	r0, r1
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	f000 f814 	bl	8003c68 <_sbrk>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_sbrk_r+0x1a>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_sbrk_r+0x1a>
 8003c48:	602b      	str	r3, [r5, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	20001574 	.word	0x20001574

08003c50 <__malloc_lock>:
 8003c50:	4770      	bx	lr

08003c52 <__malloc_unlock>:
 8003c52:	4770      	bx	lr

08003c54 <_malloc_usable_size_r>:
 8003c54:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	f1a0 0004 	sub.w	r0, r0, #4
 8003c5e:	bfbc      	itt	lt
 8003c60:	580b      	ldrlt	r3, [r1, r0]
 8003c62:	18c0      	addlt	r0, r0, r3
 8003c64:	4770      	bx	lr
	...

08003c68 <_sbrk>:
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <_sbrk+0x14>)
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	b909      	cbnz	r1, 8003c74 <_sbrk+0xc>
 8003c70:	4903      	ldr	r1, [pc, #12]	; (8003c80 <_sbrk+0x18>)
 8003c72:	6019      	str	r1, [r3, #0]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	4402      	add	r2, r0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	4770      	bx	lr
 8003c7c:	20000418 	.word	0x20000418
 8003c80:	20001578 	.word	0x20001578

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
