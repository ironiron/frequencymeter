
F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08006e60  08006e60  00016e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007d0  20000000  080071f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000013ec  200007d0  080079c8  000207d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001bbc  080079c8  00021bbc  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000207d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d457  00000000  00000000  000207f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003e03  00000000  00000000  0003dc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000823d  00000000  00000000  00041a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c40  00000000  00000000  00049c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001058  00000000  00000000  0004a8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006e30  00000000  00000000  0004b928  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000042d1  00000000  00000000  00052758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00056a29  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002bc8  00000000  00000000  00056aa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200007d0 	.word	0x200007d0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e48 	.word	0x08006e48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200007d4 	.word	0x200007d4
 800014c:	08006e48 	.word	0x08006e48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_uldivmod>:
 8000a80:	b953      	cbnz	r3, 8000a98 <__aeabi_uldivmod+0x18>
 8000a82:	b94a      	cbnz	r2, 8000a98 <__aeabi_uldivmod+0x18>
 8000a84:	2900      	cmp	r1, #0
 8000a86:	bf08      	it	eq
 8000a88:	2800      	cmpeq	r0, #0
 8000a8a:	bf1c      	itt	ne
 8000a8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a90:	f04f 30ff 	movne.w	r0, #4294967295
 8000a94:	f000 b97a 	b.w	8000d8c <__aeabi_idiv0>
 8000a98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa0:	f000 f806 	bl	8000ab0 <__udivmoddi4>
 8000aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aac:	b004      	add	sp, #16
 8000aae:	4770      	bx	lr

08000ab0 <__udivmoddi4>:
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	460e      	mov	r6, r1
 8000ab8:	4604      	mov	r4, r0
 8000aba:	9d08      	ldr	r5, [sp, #32]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d150      	bne.n	8000b62 <__udivmoddi4+0xb2>
 8000ac0:	428a      	cmp	r2, r1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	d96c      	bls.n	8000ba0 <__udivmoddi4+0xf0>
 8000ac6:	fab2 fe82 	clz	lr, r2
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d00b      	beq.n	8000ae8 <__udivmoddi4+0x38>
 8000ad0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ad4:	fa01 f60e 	lsl.w	r6, r1, lr
 8000ad8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000adc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ae0:	ea4c 0c06 	orr.w	ip, ip, r6
 8000ae4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ae8:	0c3a      	lsrs	r2, r7, #16
 8000aea:	fbbc f9f2 	udiv	r9, ip, r2
 8000aee:	b2bb      	uxth	r3, r7
 8000af0:	fb02 cc19 	mls	ip, r2, r9, ip
 8000af4:	fb09 fa03 	mul.w	sl, r9, r3
 8000af8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000afc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000b00:	45b2      	cmp	sl, r6
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x6a>
 8000b04:	19f6      	adds	r6, r6, r7
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b0a:	f080 8125 	bcs.w	8000d58 <__udivmoddi4+0x2a8>
 8000b0e:	45b2      	cmp	sl, r6
 8000b10:	f240 8122 	bls.w	8000d58 <__udivmoddi4+0x2a8>
 8000b14:	f1a9 0902 	sub.w	r9, r9, #2
 8000b18:	443e      	add	r6, r7
 8000b1a:	eba6 060a 	sub.w	r6, r6, sl
 8000b1e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000b22:	fb02 6610 	mls	r6, r2, r0, r6
 8000b26:	fb00 f303 	mul.w	r3, r0, r3
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x98>
 8000b34:	19e4      	adds	r4, r4, r7
 8000b36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3a:	f080 810b 	bcs.w	8000d54 <__udivmoddi4+0x2a4>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	f240 8108 	bls.w	8000d54 <__udivmoddi4+0x2a4>
 8000b44:	3802      	subs	r0, #2
 8000b46:	443c      	add	r4, r7
 8000b48:	2100      	movs	r1, #0
 8000b4a:	1ae4      	subs	r4, r4, r3
 8000b4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d062      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b54:	2300      	movs	r3, #0
 8000b56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b5a:	602c      	str	r4, [r5, #0]
 8000b5c:	606b      	str	r3, [r5, #4]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d907      	bls.n	8000b76 <__udivmoddi4+0xc6>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d055      	beq.n	8000c16 <__udivmoddi4+0x166>
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000b70:	4608      	mov	r0, r1
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	f040 808f 	bne.w	8000c9e <__udivmoddi4+0x1ee>
 8000b80:	42b3      	cmp	r3, r6
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xda>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80fc 	bhi.w	8000d82 <__udivmoddi4+0x2d2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	46b4      	mov	ip, r6
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d040      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	b912      	cbnz	r2, 8000ba8 <__udivmoddi4+0xf8>
 8000ba2:	2701      	movs	r7, #1
 8000ba4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ba8:	fab7 fe87 	clz	lr, r7
 8000bac:	f1be 0f00 	cmp.w	lr, #0
 8000bb0:	d135      	bne.n	8000c1e <__udivmoddi4+0x16e>
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	1bf6      	subs	r6, r6, r7
 8000bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000bba:	fa1f f887 	uxth.w	r8, r7
 8000bbe:	fbb6 f2fc 	udiv	r2, r6, ip
 8000bc2:	fb0c 6612 	mls	r6, ip, r2, r6
 8000bc6:	fb08 f002 	mul.w	r0, r8, r2
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d907      	bls.n	8000be4 <__udivmoddi4+0x134>
 8000bd4:	19f6      	adds	r6, r6, r7
 8000bd6:	f102 33ff 	add.w	r3, r2, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x132>
 8000bdc:	42b0      	cmp	r0, r6
 8000bde:	f200 80d2 	bhi.w	8000d86 <__udivmoddi4+0x2d6>
 8000be2:	461a      	mov	r2, r3
 8000be4:	1a36      	subs	r6, r6, r0
 8000be6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000bea:	fb0c 6610 	mls	r6, ip, r0, r6
 8000bee:	fb08 f800 	mul.w	r8, r8, r0
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	d907      	bls.n	8000c0c <__udivmoddi4+0x15c>
 8000bfc:	19e4      	adds	r4, r4, r7
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x15a>
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	f200 80b9 	bhi.w	8000d7c <__udivmoddi4+0x2cc>
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	eba4 0408 	sub.w	r4, r4, r8
 8000c10:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c14:	e79c      	b.n	8000b50 <__udivmoddi4+0xa0>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c22:	f1ce 0320 	rsb	r3, lr, #32
 8000c26:	fa26 f203 	lsr.w	r2, r6, r3
 8000c2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c2e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000c32:	fa1f f887 	uxth.w	r8, r7
 8000c36:	fb0c 2211 	mls	r2, ip, r1, r2
 8000c3a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c3e:	fa20 f303 	lsr.w	r3, r0, r3
 8000c42:	fb01 f908 	mul.w	r9, r1, r8
 8000c46:	4333      	orrs	r3, r6
 8000c48:	0c1e      	lsrs	r6, r3, #16
 8000c4a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c4e:	45b1      	cmp	r9, r6
 8000c50:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x1ba>
 8000c56:	19f6      	adds	r6, r6, r7
 8000c58:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c5c:	f080 808c 	bcs.w	8000d78 <__udivmoddi4+0x2c8>
 8000c60:	45b1      	cmp	r9, r6
 8000c62:	f240 8089 	bls.w	8000d78 <__udivmoddi4+0x2c8>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443e      	add	r6, r7
 8000c6a:	eba6 0609 	sub.w	r6, r6, r9
 8000c6e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000c72:	fb0c 6210 	mls	r2, ip, r0, r6
 8000c76:	fb00 f908 	mul.w	r9, r0, r8
 8000c7a:	b29e      	uxth	r6, r3
 8000c7c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c80:	45b1      	cmp	r9, r6
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1e4>
 8000c84:	19f6      	adds	r6, r6, r7
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d271      	bcs.n	8000d70 <__udivmoddi4+0x2c0>
 8000c8c:	45b1      	cmp	r9, r6
 8000c8e:	d96f      	bls.n	8000d70 <__udivmoddi4+0x2c0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443e      	add	r6, r7
 8000c94:	eba6 0609 	sub.w	r6, r6, r9
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	e78f      	b.n	8000bbe <__udivmoddi4+0x10e>
 8000c9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ca2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	ea48 0303 	orr.w	r3, r8, r3
 8000cac:	fa26 f407 	lsr.w	r4, r6, r7
 8000cb0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000cb4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb8:	fa1f fc83 	uxth.w	ip, r3
 8000cbc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cc0:	408e      	lsls	r6, r1
 8000cc2:	fa20 f807 	lsr.w	r8, r0, r7
 8000cc6:	fb09 fa0c 	mul.w	sl, r9, ip
 8000cca:	ea48 0806 	orr.w	r8, r8, r6
 8000cce:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000cd2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000cd6:	45a2      	cmp	sl, r4
 8000cd8:	fa02 f201 	lsl.w	r2, r2, r1
 8000cdc:	fa00 f601 	lsl.w	r6, r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x244>
 8000ce2:	18e4      	adds	r4, r4, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	d244      	bcs.n	8000d74 <__udivmoddi4+0x2c4>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d942      	bls.n	8000d74 <__udivmoddi4+0x2c4>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	441c      	add	r4, r3
 8000cf4:	eba4 040a 	sub.w	r4, r4, sl
 8000cf8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cfc:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d00:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d04:	fa1f f888 	uxth.w	r8, r8
 8000d08:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x270>
 8000d10:	18e4      	adds	r4, r4, r3
 8000d12:	f100 3eff 	add.w	lr, r0, #4294967295
 8000d16:	d229      	bcs.n	8000d6c <__udivmoddi4+0x2bc>
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d927      	bls.n	8000d6c <__udivmoddi4+0x2bc>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	441c      	add	r4, r3
 8000d20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d24:	fba0 8902 	umull	r8, r9, r0, r2
 8000d28:	eba4 0c0c 	sub.w	ip, r4, ip
 8000d2c:	45cc      	cmp	ip, r9
 8000d2e:	46c2      	mov	sl, r8
 8000d30:	46ce      	mov	lr, r9
 8000d32:	d315      	bcc.n	8000d60 <__udivmoddi4+0x2b0>
 8000d34:	d012      	beq.n	8000d5c <__udivmoddi4+0x2ac>
 8000d36:	b155      	cbz	r5, 8000d4e <__udivmoddi4+0x29e>
 8000d38:	ebb6 030a 	subs.w	r3, r6, sl
 8000d3c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000d40:	fa06 f707 	lsl.w	r7, r6, r7
 8000d44:	40cb      	lsrs	r3, r1
 8000d46:	431f      	orrs	r7, r3
 8000d48:	40ce      	lsrs	r6, r1
 8000d4a:	602f      	str	r7, [r5, #0]
 8000d4c:	606e      	str	r6, [r5, #4]
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	4610      	mov	r0, r2
 8000d56:	e6f7      	b.n	8000b48 <__udivmoddi4+0x98>
 8000d58:	4689      	mov	r9, r1
 8000d5a:	e6de      	b.n	8000b1a <__udivmoddi4+0x6a>
 8000d5c:	4546      	cmp	r6, r8
 8000d5e:	d2ea      	bcs.n	8000d36 <__udivmoddi4+0x286>
 8000d60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d64:	eb69 0e03 	sbc.w	lr, r9, r3
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7e4      	b.n	8000d36 <__udivmoddi4+0x286>
 8000d6c:	4670      	mov	r0, lr
 8000d6e:	e7d7      	b.n	8000d20 <__udivmoddi4+0x270>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e78f      	b.n	8000c94 <__udivmoddi4+0x1e4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7bd      	b.n	8000cf4 <__udivmoddi4+0x244>
 8000d78:	4611      	mov	r1, r2
 8000d7a:	e776      	b.n	8000c6a <__udivmoddi4+0x1ba>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	443c      	add	r4, r7
 8000d80:	e744      	b.n	8000c0c <__udivmoddi4+0x15c>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e706      	b.n	8000b94 <__udivmoddi4+0xe4>
 8000d86:	3a02      	subs	r2, #2
 8000d88:	443e      	add	r6, r7
 8000d8a:	e72b      	b.n	8000be4 <__udivmoddi4+0x134>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_InitTick+0x3c>)
{
 8000d94:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d96:	7818      	ldrb	r0, [r3, #0]
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_InitTick+0x40>)
 8000da2:	6810      	ldr	r0, [r2, #0]
 8000da4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da8:	f000 f89e 	bl	8000ee8 <HAL_SYSTICK_Config>
 8000dac:	4604      	mov	r4, r0
 8000dae:	b958      	cbnz	r0, 8000dc8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	2d0f      	cmp	r5, #15
 8000db2:	d809      	bhi.n	8000dc8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	4602      	mov	r2, r0
 8000db6:	4629      	mov	r1, r5
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f854 	bl	8000e68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_InitTick+0x44>)
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	601d      	str	r5, [r3, #0]
 8000dc6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000118 	.word	0x20000118
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x20>)
{
 8000dda:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dde:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de6:	f000 f82d 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff ffd0 	bl	8000d90 <HAL_InitTick>
  HAL_MspInit();
 8000df0:	f002 fddc 	bl	80039ac <HAL_MspInit>
}
 8000df4:	2000      	movs	r0, #0
 8000df6:	bd08      	pop	{r3, pc}
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x10>)
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_IncTick+0x14>)
 8000e00:	6811      	ldr	r1, [r2, #0]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	440b      	add	r3, r1
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000a54 	.word	0x20000a54
 8000e10:	20000000 	.word	0x20000000

08000e14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e14:	4b01      	ldr	r3, [pc, #4]	; (8000e1c <HAL_GetTick+0x8>)
 8000e16:	6818      	ldr	r0, [r3, #0]
}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000a54 	.word	0x20000a54

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff fff6 	bl	8000e14 <HAL_GetTick>
 8000e28:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2c:	bf1e      	ittt	ne
 8000e2e:	4b04      	ldrne	r3, [pc, #16]	; (8000e40 <HAL_Delay+0x20>)
 8000e30:	781b      	ldrbne	r3, [r3, #0]
 8000e32:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	1b40      	subs	r0, r0, r5
 8000e3a:	4284      	cmp	r4, r0
 8000e3c:	d8fa      	bhi.n	8000e34 <HAL_Delay+0x14>
  {
  }
}
 8000e3e:	bd38      	pop	{r3, r4, r5, pc}
 8000e40:	20000000 	.word	0x20000000

08000e44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e46:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e60:	60d3      	str	r3, [r2, #12]
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b530      	push	{r4, r5, lr}
 8000e6c:	68dc      	ldr	r4, [r3, #12]
 8000e6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	bf28      	it	cs
 8000e7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e84:	bf98      	it	ls
 8000e86:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	fa05 f303 	lsl.w	r3, r5, r3
 8000e8c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e90:	bf88      	it	hi
 8000e92:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4019      	ands	r1, r3
 8000e96:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	fa05 f404 	lsl.w	r4, r5, r4
 8000e9c:	3c01      	subs	r4, #1
 8000e9e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ea0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea2:	ea42 0201 	orr.w	r2, r2, r1
 8000ea6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	bfaf      	iteee	ge
 8000eac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	4b06      	ldrlt	r3, [pc, #24]	; (8000ecc <HAL_NVIC_SetPriority+0x64>)
 8000eb2:	f000 000f 	andlt.w	r0, r0, #15
 8000eb6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	bfa5      	ittet	ge
 8000eba:	b2d2      	uxtbge	r2, r2
 8000ebc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ec6:	bd30      	pop	{r4, r5, pc}
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	e000ed14 	.word	0xe000ed14

08000ed0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	0942      	lsrs	r2, r0, #5
 8000ed4:	f000 001f 	and.w	r0, r0, #31
 8000ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8000edc:	4b01      	ldr	r3, [pc, #4]	; (8000ee4 <HAL_NVIC_EnableIRQ+0x14>)
 8000ede:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	3801      	subs	r0, #1
 8000eea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eee:	d20a      	bcs.n	8000f06 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f16:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	bf0c      	ite	eq
 8000f1c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f20:	f022 0204 	bicne.w	r2, r2, #4
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	4770      	bx	lr
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f2c:	4770      	bx	lr

08000f2e <HAL_SYSTICK_IRQHandler>:
{
 8000f2e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f30:	f7ff fffc 	bl	8000f2c <HAL_SYSTICK_Callback>
 8000f34:	bd08      	pop	{r3, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000f3c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	4616      	mov	r6, r2
 8000f40:	4b65      	ldr	r3, [pc, #404]	; (80010d8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f42:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80010e8 <HAL_GPIO_Init+0x1b0>
 8000f46:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80010ec <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000f4a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000f50:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f54:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000f58:	45a0      	cmp	r8, r4
 8000f5a:	d17f      	bne.n	800105c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000f5c:	684d      	ldr	r5, [r1, #4]
 8000f5e:	2d12      	cmp	r5, #18
 8000f60:	f000 80af 	beq.w	80010c2 <HAL_GPIO_Init+0x18a>
 8000f64:	f200 8088 	bhi.w	8001078 <HAL_GPIO_Init+0x140>
 8000f68:	2d02      	cmp	r5, #2
 8000f6a:	f000 80a7 	beq.w	80010bc <HAL_GPIO_Init+0x184>
 8000f6e:	d87c      	bhi.n	800106a <HAL_GPIO_Init+0x132>
 8000f70:	2d00      	cmp	r5, #0
 8000f72:	f000 808e 	beq.w	8001092 <HAL_GPIO_Init+0x15a>
 8000f76:	2d01      	cmp	r5, #1
 8000f78:	f000 809e 	beq.w	80010b8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f80:	2cff      	cmp	r4, #255	; 0xff
 8000f82:	bf93      	iteet	ls
 8000f84:	4682      	movls	sl, r0
 8000f86:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f8a:	3d08      	subhi	r5, #8
 8000f8c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f90:	bf92      	itee	ls
 8000f92:	00b5      	lslls	r5, r6, #2
 8000f94:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f98:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f9a:	fa09 f805 	lsl.w	r8, r9, r5
 8000f9e:	ea2b 0808 	bic.w	r8, fp, r8
 8000fa2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa6:	bf88      	it	hi
 8000fa8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fac:	ea48 0505 	orr.w	r5, r8, r5
 8000fb0:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000fb8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000fbc:	d04e      	beq.n	800105c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fbe:	4d47      	ldr	r5, [pc, #284]	; (80010dc <HAL_GPIO_Init+0x1a4>)
 8000fc0:	4f46      	ldr	r7, [pc, #280]	; (80010dc <HAL_GPIO_Init+0x1a4>)
 8000fc2:	69ad      	ldr	r5, [r5, #24]
 8000fc4:	f026 0803 	bic.w	r8, r6, #3
 8000fc8:	f045 0501 	orr.w	r5, r5, #1
 8000fcc:	61bd      	str	r5, [r7, #24]
 8000fce:	69bd      	ldr	r5, [r7, #24]
 8000fd0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000fd4:	f005 0501 	and.w	r5, r5, #1
 8000fd8:	9501      	str	r5, [sp, #4]
 8000fda:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fde:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fe4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000fe8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fec:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ff0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff4:	4d3a      	ldr	r5, [pc, #232]	; (80010e0 <HAL_GPIO_Init+0x1a8>)
 8000ff6:	42a8      	cmp	r0, r5
 8000ff8:	d068      	beq.n	80010cc <HAL_GPIO_Init+0x194>
 8000ffa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ffe:	42a8      	cmp	r0, r5
 8001000:	d066      	beq.n	80010d0 <HAL_GPIO_Init+0x198>
 8001002:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001006:	42a8      	cmp	r0, r5
 8001008:	d064      	beq.n	80010d4 <HAL_GPIO_Init+0x19c>
 800100a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100e:	42a8      	cmp	r0, r5
 8001010:	bf0c      	ite	eq
 8001012:	2503      	moveq	r5, #3
 8001014:	2504      	movne	r5, #4
 8001016:	fa05 f50b 	lsl.w	r5, r5, fp
 800101a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800101e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001022:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001024:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001028:	bf14      	ite	ne
 800102a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800102c:	43a5      	biceq	r5, r4
 800102e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001030:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001032:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001036:	bf14      	ite	ne
 8001038:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103a:	43a5      	biceq	r5, r4
 800103c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800103e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001044:	bf14      	ite	ne
 8001046:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001048:	43a5      	biceq	r5, r4
 800104a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800104c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001052:	bf14      	ite	ne
 8001054:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001056:	ea25 0404 	biceq.w	r4, r5, r4
 800105a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800105c:	3601      	adds	r6, #1
 800105e:	2e10      	cmp	r6, #16
 8001060:	f47f af73 	bne.w	8000f4a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001064:	b003      	add	sp, #12
 8001066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800106a:	2d03      	cmp	r5, #3
 800106c:	d022      	beq.n	80010b4 <HAL_GPIO_Init+0x17c>
 800106e:	2d11      	cmp	r5, #17
 8001070:	d184      	bne.n	8000f7c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001072:	68ca      	ldr	r2, [r1, #12]
 8001074:	3204      	adds	r2, #4
          break;
 8001076:	e781      	b.n	8000f7c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001078:	4f1a      	ldr	r7, [pc, #104]	; (80010e4 <HAL_GPIO_Init+0x1ac>)
 800107a:	42bd      	cmp	r5, r7
 800107c:	d009      	beq.n	8001092 <HAL_GPIO_Init+0x15a>
 800107e:	d812      	bhi.n	80010a6 <HAL_GPIO_Init+0x16e>
 8001080:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80010f0 <HAL_GPIO_Init+0x1b8>
 8001084:	454d      	cmp	r5, r9
 8001086:	d004      	beq.n	8001092 <HAL_GPIO_Init+0x15a>
 8001088:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800108c:	454d      	cmp	r5, r9
 800108e:	f47f af75 	bne.w	8000f7c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001092:	688a      	ldr	r2, [r1, #8]
 8001094:	b1c2      	cbz	r2, 80010c8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001096:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001098:	bf0c      	ite	eq
 800109a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800109e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a2:	2208      	movs	r2, #8
 80010a4:	e76a      	b.n	8000f7c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80010a6:	4575      	cmp	r5, lr
 80010a8:	d0f3      	beq.n	8001092 <HAL_GPIO_Init+0x15a>
 80010aa:	4565      	cmp	r5, ip
 80010ac:	d0f1      	beq.n	8001092 <HAL_GPIO_Init+0x15a>
 80010ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80010f4 <HAL_GPIO_Init+0x1bc>
 80010b2:	e7eb      	b.n	800108c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b4:	2200      	movs	r2, #0
 80010b6:	e761      	b.n	8000f7c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b8:	68ca      	ldr	r2, [r1, #12]
          break;
 80010ba:	e75f      	b.n	8000f7c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010bc:	68ca      	ldr	r2, [r1, #12]
 80010be:	3208      	adds	r2, #8
          break;
 80010c0:	e75c      	b.n	8000f7c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c2:	68ca      	ldr	r2, [r1, #12]
 80010c4:	320c      	adds	r2, #12
          break;
 80010c6:	e759      	b.n	8000f7c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010c8:	2204      	movs	r2, #4
 80010ca:	e757      	b.n	8000f7c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010cc:	2500      	movs	r5, #0
 80010ce:	e7a2      	b.n	8001016 <HAL_GPIO_Init+0xde>
 80010d0:	2501      	movs	r5, #1
 80010d2:	e7a0      	b.n	8001016 <HAL_GPIO_Init+0xde>
 80010d4:	2502      	movs	r5, #2
 80010d6:	e79e      	b.n	8001016 <HAL_GPIO_Init+0xde>
 80010d8:	40010400 	.word	0x40010400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	10210000 	.word	0x10210000
 80010e8:	10310000 	.word	0x10310000
 80010ec:	10320000 	.word	0x10320000
 80010f0:	10110000 	.word	0x10110000
 80010f4:	10220000 	.word	0x10220000

080010f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80010fc:	4604      	mov	r4, r0
{
 80010fe:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8001100:	2800      	cmp	r0, #0
 8001102:	d060      	beq.n	80011c6 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001104:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8001108:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800110c:	b91b      	cbnz	r3, 8001116 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800110e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001112:	f002 fdbb 	bl	8003c8c <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001116:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001118:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800111a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 800111c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001120:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8001124:	f001 fa3a 	bl	800259c <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	f104 0804 	add.w	r8, r4, #4
 8001132:	6033      	str	r3, [r6, #0]
 8001134:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001138:	6820      	ldr	r0, [r4, #0]
 800113a:	f001 fa1f 	bl	800257c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800113e:	2100      	movs	r1, #0
 8001140:	6820      	ldr	r0, [r4, #0]
 8001142:	f001 fa35 	bl	80025b0 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8001146:	2100      	movs	r1, #0
 8001148:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800114a:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 800114c:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800114e:	4608      	mov	r0, r1
 8001150:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8001154:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001158:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800115a:	3101      	adds	r1, #1
 800115c:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 800115e:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001162:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8001166:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8001168:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 800116a:	6410      	str	r0, [r2, #64]	; 0x40
 800116c:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8001170:	d1f0      	bne.n	8001154 <HAL_PCD_Init+0x5c>
 8001172:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8001174:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8001176:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800117a:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800117c:	3201      	adds	r2, #1
 800117e:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8001180:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001184:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8001188:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800118c:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8001190:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8001194:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8001198:	d1ed      	bne.n	8001176 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800119a:	466e      	mov	r6, sp
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	6033      	str	r3, [r6, #0]
 80011a4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80011a8:	6820      	ldr	r0, [r4, #0]
 80011aa:	f001 fa03 	bl	80025b4 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 80011ae:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80011b0:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80011b4:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80011b6:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 80011ba:	f001 fcd3 	bl	8002b64 <USB_DevDisconnect>
  return HAL_OK;
 80011be:	2000      	movs	r0, #0
}
 80011c0:	b006      	add	sp, #24
 80011c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80011c6:	2001      	movs	r0, #1
 80011c8:	e7fa      	b.n	80011c0 <HAL_PCD_Init+0xc8>

080011ca <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80011ca:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80011ce:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80011d0:	2b01      	cmp	r3, #1
{
 80011d2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80011d4:	d00e      	beq.n	80011f4 <HAL_PCD_Start+0x2a>
 80011d6:	2101      	movs	r1, #1
 80011d8:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80011dc:	f002 fe8b 	bl	8003ef6 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80011e0:	6820      	ldr	r0, [r4, #0]
 80011e2:	f001 fcbd 	bl	8002b60 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011e6:	6820      	ldr	r0, [r4, #0]
 80011e8:	f001 f9cf 	bl	800258a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80011f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80011f4:	2002      	movs	r0, #2
}
 80011f6:	bd10      	pop	{r4, pc}

080011f8 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80011f8:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80011fc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80011fe:	2a01      	cmp	r2, #1
{
 8001200:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001202:	d00b      	beq.n	800121c <HAL_PCD_SetAddress+0x24>
 8001204:	2201      	movs	r2, #1
 8001206:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 800120a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800120e:	6800      	ldr	r0, [r0, #0]
 8001210:	f001 fca0 	bl	8002b54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001214:	2000      	movs	r0, #0
 8001216:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 800121a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800121c:	2002      	movs	r0, #2
  return HAL_OK;
}
 800121e:	bd10      	pop	{r4, pc}

08001220 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001224:	b248      	sxtb	r0, r1
 8001226:	2800      	cmp	r0, #0
 8001228:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800122c:	bfb5      	itete	lt
 800122e:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001232:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001236:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001238:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800123c:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 800123e:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001240:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8001242:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8001244:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8001248:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800124a:	2b01      	cmp	r3, #1
 800124c:	d009      	beq.n	8001262 <HAL_PCD_EP_Open+0x42>
 800124e:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001250:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001252:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001256:	f001 f9c9 	bl	80025ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800125a:	2000      	movs	r0, #0
 800125c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8001260:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001262:	2002      	movs	r0, #2
}
 8001264:	bd38      	pop	{r3, r4, r5, pc}

08001266 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001266:	b24b      	sxtb	r3, r1
 8001268:	2b00      	cmp	r3, #0
 800126a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800126e:	bfb5      	itete	lt
 8001270:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001274:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001278:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800127a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800127e:	0fdb      	lsrs	r3, r3, #31
{  
 8001280:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8001282:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001284:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8001286:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 800128a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800128c:	2b01      	cmp	r3, #1
 800128e:	d009      	beq.n	80012a4 <HAL_PCD_EP_Close+0x3e>
 8001290:	2301      	movs	r3, #1
 8001292:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001296:	6800      	ldr	r0, [r0, #0]
 8001298:	f001 fb1a 	bl	80028d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800129c:	2000      	movs	r0, #0
 800129e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80012a2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80012a4:	2002      	movs	r0, #2
}
 80012a6:	bd10      	pop	{r4, pc}

080012a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80012aa:	2600      	movs	r6, #0
 80012ac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80012b0:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 80012b2:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 80012b4:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80012b8:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80012bc:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80012be:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 80012c2:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 80012c6:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 80012ca:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 80012ce:	6800      	ldr	r0, [r0, #0]
 80012d0:	f001 fc62 	bl	8002b98 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80012d4:	4630      	mov	r0, r6
 80012d6:	bd70      	pop	{r4, r5, r6, pc}

080012d8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80012d8:	f001 010f 	and.w	r1, r1, #15
 80012dc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80012e0:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 80012e4:	4770      	bx	lr

080012e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80012ea:	b570      	push	{r4, r5, r6, lr}
 80012ec:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80012ee:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80012f0:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80012f2:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80012f4:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80012f6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80012fa:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80012fe:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8001300:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001302:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001304:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8001308:	6800      	ldr	r0, [r0, #0]
 800130a:	f001 fc45 	bl	8002b98 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800130e:	4630      	mov	r0, r6
 8001310:	bd70      	pop	{r4, r5, r6, pc}
	...

08001314 <HAL_PCD_IRQHandler>:
{ 
 8001314:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001318:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800131a:	6800      	ldr	r0, [r0, #0]
 800131c:	f001 fc24 	bl	8002b68 <USB_ReadInterrupts>
 8001320:	0400      	lsls	r0, r0, #16
 8001322:	f100 8098 	bmi.w	8001456 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001326:	6820      	ldr	r0, [r4, #0]
 8001328:	f001 fc1e 	bl	8002b68 <USB_ReadInterrupts>
 800132c:	0541      	lsls	r1, r0, #21
 800132e:	d50f      	bpl.n	8001350 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001330:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001332:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001334:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001344:	f002 fce1 	bl	8003d0a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001348:	2100      	movs	r1, #0
 800134a:	4620      	mov	r0, r4
 800134c:	f7ff ff54 	bl	80011f8 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001350:	6820      	ldr	r0, [r4, #0]
 8001352:	f001 fc09 	bl	8002b68 <USB_ReadInterrupts>
 8001356:	0447      	lsls	r7, r0, #17
 8001358:	d508      	bpl.n	800136c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800136c:	6820      	ldr	r0, [r4, #0]
 800136e:	f001 fbfb 	bl	8002b68 <USB_ReadInterrupts>
 8001372:	0486      	lsls	r6, r0, #18
 8001374:	d508      	bpl.n	8001388 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800137c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	f001 fbed 	bl	8002b68 <USB_ReadInterrupts>
 800138e:	04c5      	lsls	r5, r0, #19
 8001390:	d51c      	bpl.n	80013cc <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001392:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001394:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001396:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800139a:	f023 0304 	bic.w	r3, r3, #4
 800139e:	041b      	lsls	r3, r3, #16
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80013a6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80013aa:	f023 0308 	bic.w	r3, r3, #8
 80013ae:	041b      	lsls	r3, r3, #16
 80013b0:	0c1b      	lsrs	r3, r3, #16
 80013b2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80013b6:	f002 fcc5 	bl	8003d44 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80013c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80013cc:	6820      	ldr	r0, [r4, #0]
 80013ce:	f001 fbcb 	bl	8002b68 <USB_ReadInterrupts>
 80013d2:	0500      	lsls	r0, r0, #20
 80013d4:	d51d      	bpl.n	8001412 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80013d6:	6820      	ldr	r0, [r4, #0]
 80013d8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80013e6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80013ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80013f6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001404:	f001 fbb0 	bl	8002b68 <USB_ReadInterrupts>
 8001408:	04c1      	lsls	r1, r0, #19
 800140a:	d402      	bmi.n	8001412 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 800140c:	4620      	mov	r0, r4
 800140e:	f002 fc89 	bl	8003d24 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001412:	6820      	ldr	r0, [r4, #0]
 8001414:	f001 fba8 	bl	8002b68 <USB_ReadInterrupts>
 8001418:	0582      	lsls	r2, r0, #22
 800141a:	d50b      	bpl.n	8001434 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800141c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800141e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001420:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001430:	f002 fc67 	bl	8003d02 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001434:	6820      	ldr	r0, [r4, #0]
 8001436:	f001 fb97 	bl	8002b68 <USB_ReadInterrupts>
 800143a:	05c3      	lsls	r3, r0, #23
 800143c:	d508      	bpl.n	8001450 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800143e:	6822      	ldr	r2, [r4, #0]
 8001440:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001448:	041b      	lsls	r3, r3, #16
 800144a:	0c1b      	lsrs	r3, r3, #16
 800144c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001450:	b002      	add	sp, #8
 8001452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8001456:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001458:	4fc8      	ldr	r7, [pc, #800]	; (800177c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800145a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001780 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800145e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001784 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8001462:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8001466:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800146a:	6820      	ldr	r0, [r4, #0]
 800146c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001470:	b29b      	uxth	r3, r3
 8001472:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	f57f af55 	bpl.w	8001326 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800147c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8001480:	f015 050f 	ands.w	r5, r5, #15
 8001484:	f040 80ab 	bne.w	80015de <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001488:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800148c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800148e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001492:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001494:	d126      	bne.n	80014e4 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001496:	403b      	ands	r3, r7
 8001498:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800149a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800149e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80014ac:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80014b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80014b8:	4413      	add	r3, r2
 80014ba:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014bc:	4620      	mov	r0, r4
 80014be:	f002 fc19 	bl	8003cf4 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80014c2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0cf      	beq.n	800146a <HAL_PCD_IRQHandler+0x156>
 80014ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d1cc      	bne.n	800146a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80014d0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014d4:	6821      	ldr	r1, [r4, #0]
 80014d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014da:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80014de:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80014e2:	e7c2      	b.n	800146a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014e4:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80014ec:	051a      	lsls	r2, r3, #20
 80014ee:	d51f      	bpl.n	8001530 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014f4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001502:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001506:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800150a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800150e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001512:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001516:	f001 fc3f 	bl	8002d98 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800151a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800151c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800151e:	8813      	ldrh	r3, [r2, #0]
 8001520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001524:	051b      	lsls	r3, r3, #20
 8001526:	0d1b      	lsrs	r3, r3, #20
 8001528:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800152a:	f002 fbd5 	bl	8003cd8 <HAL_PCD_SetupStageCallback>
 800152e:	e79c      	b.n	800146a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001530:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	d598      	bpl.n	800146a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001538:	8803      	ldrh	r3, [r0, #0]
 800153a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800153e:	051b      	lsls	r3, r3, #20
 8001540:	0d1b      	lsrs	r3, r3, #20
 8001542:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001544:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001548:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800154c:	b29b      	uxth	r3, r3
 800154e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001552:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001556:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800155a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8001562:	b163      	cbz	r3, 800157e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001564:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8001568:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800156c:	f001 fc14 	bl	8002d98 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001570:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001574:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001578:	4413      	add	r3, r2
 800157a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800157e:	2100      	movs	r1, #0
 8001580:	4620      	mov	r0, r4
 8001582:	f002 fbaf 	bl	8003ce4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 800158c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001590:	2d3e      	cmp	r5, #62	; 0x3e
 8001592:	b289      	uxth	r1, r1
 8001594:	f101 0106 	add.w	r1, r1, #6
 8001598:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800159c:	d917      	bls.n	80015ce <HAL_PCD_IRQHandler+0x2ba>
 800159e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80015a2:	06ee      	lsls	r6, r5, #27
 80015a4:	bf04      	itt	eq
 80015a6:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80015aa:	b29b      	uxtheq	r3, r3
 80015ac:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80015b6:	8813      	ldrh	r3, [r2, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	ea03 0308 	and.w	r3, r3, r8
 80015be:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ca:	8013      	strh	r3, [r2, #0]
 80015cc:	e74d      	b.n	800146a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015ce:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80015d2:	07ed      	lsls	r5, r5, #31
 80015d4:	bf44      	itt	mi
 80015d6:	3301      	addmi	r3, #1
 80015d8:	b29b      	uxthmi	r3, r3
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	e7e8      	b.n	80015b0 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80015de:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015ec:	0419      	lsls	r1, r3, #16
 80015ee:	d53f      	bpl.n	8001670 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80015f0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80015f4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80015f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015fc:	051b      	lsls	r3, r3, #20
 80015fe:	0d1b      	lsrs	r3, r3, #20
 8001600:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001604:	eb04 010a 	add.w	r1, r4, sl
 8001608:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 800160c:	2b00      	cmp	r3, #0
 800160e:	d174      	bne.n	80016fa <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001610:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001614:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8001618:	b29b      	uxth	r3, r3
 800161a:	3306      	adds	r3, #6
 800161c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001620:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001624:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001628:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 800162c:	b136      	cbz	r6, 800163c <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800162e:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8001632:	4633      	mov	r3, r6
 8001634:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001638:	f001 fbae 	bl	8002d98 <USB_ReadPMA>
 800163c:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8001640:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8001644:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8001648:	4433      	add	r3, r6
 800164a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800164e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8001652:	4432      	add	r2, r6
 8001654:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001658:	b123      	cbz	r3, 8001664 <HAL_PCD_IRQHandler+0x350>
 800165a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 800165e:	4286      	cmp	r6, r0
 8001660:	f080 8086 	bcs.w	8001770 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001664:	44a2      	add	sl, r4
 8001666:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 800166a:	4620      	mov	r0, r4
 800166c:	f002 fb3a 	bl	8003ce4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001670:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001674:	061a      	lsls	r2, r3, #24
 8001676:	f57f aef8 	bpl.w	800146a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800167a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800167c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800167e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001682:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001684:	b29b      	uxth	r3, r3
 8001686:	403b      	ands	r3, r7
 8001688:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800168c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001690:	3502      	adds	r5, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d178      	bne.n	8001788 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001696:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800169a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 800169e:	b29b      	uxth	r3, r3
 80016a0:	3302      	adds	r3, #2
 80016a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80016a6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80016aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80016ae:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80016b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016b6:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 80016b8:	b11b      	cbz	r3, 80016c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80016ba:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80016bc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80016be:	f001 fa59 	bl	8002b74 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016c2:	6822      	ldr	r2, [r4, #0]
 80016c4:	4426      	add	r6, r4
 80016c6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80016ca:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3302      	adds	r3, #2
 80016d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80016d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80016da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 80016de:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80016e4:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 80016e6:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80016e8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 80016ea:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016ec:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 8085 	bne.w	80017fe <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016f4:	f002 fafe 	bl	8003cf4 <HAL_PCD_DataInStageCallback>
 80016f8:	e6b7      	b.n	800146a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80016fa:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 80016fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001708:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800170c:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800170e:	d021      	beq.n	8001754 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001710:	3202      	adds	r2, #2
 8001712:	4413      	add	r3, r2
 8001714:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001718:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 800171c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001720:	b136      	cbz	r6, 8001730 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001722:	4633      	mov	r3, r6
 8001724:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001728:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 800172c:	f001 fb34 	bl	8002d98 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001730:	eb04 030a 	add.w	r3, r4, sl
 8001734:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800173e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001742:	051b      	lsls	r3, r3, #20
 8001744:	0d1b      	lsrs	r3, r3, #20
 8001746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800174e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001752:	e773      	b.n	800163c <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001754:	3206      	adds	r2, #6
 8001756:	4413      	add	r3, r2
 8001758:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800175c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001760:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001764:	2e00      	cmp	r6, #0
 8001766:	d0e3      	beq.n	8001730 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001768:	4633      	mov	r3, r6
 800176a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 800176e:	e7db      	b.n	8001728 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001770:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff fd97 	bl	80012a8 <HAL_PCD_EP_Receive>
 800177a:	e779      	b.n	8001670 <HAL_PCD_IRQHandler+0x35c>
 800177c:	ffff8f0f 	.word	0xffff8f0f
 8001780:	ffffbf8f 	.word	0xffffbf8f
 8001784:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001788:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800178c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001796:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800179a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800179c:	d020      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800179e:	3202      	adds	r2, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80017aa:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80017ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017b2:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 80017b4:	b11b      	cbz	r3, 80017be <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80017b6:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80017b8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80017ba:	f001 f9db 	bl	8002b74 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80017be:	19a3      	adds	r3, r4, r6
 80017c0:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80017ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ce:	051b      	lsls	r3, r3, #20
 80017d0:	0d1b      	lsrs	r3, r3, #20
 80017d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017da:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80017de:	e770      	b.n	80016c2 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017e0:	3206      	adds	r2, #6
 80017e2:	4413      	add	r3, r2
 80017e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017e8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80017ec:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80017f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0e1      	beq.n	80017be <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80017fa:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80017fc:	e7dc      	b.n	80017b8 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80017fe:	f7ff fd72 	bl	80012e6 <HAL_PCD_EP_Transmit>
 8001802:	e632      	b.n	800146a <HAL_PCD_IRQHandler+0x156>

08001804 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8001804:	2201      	movs	r2, #1
{
 8001806:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001808:	b24b      	sxtb	r3, r1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001810:	bfb5      	itete	lt
 8001812:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001816:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800181a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800181c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001820:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8001822:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001824:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001826:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001828:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 800182a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800182e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001830:	4293      	cmp	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_PCD_EP_SetStall+0x4e>
 8001834:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001838:	6800      	ldr	r0, [r0, #0]
 800183a:	f001 f917 	bl	8002a6c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 800183e:	b925      	cbnz	r5, 800184a <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001840:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	f001 f993 	bl	8002b70 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800184a:	2000      	movs	r0, #0
 800184c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001850:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001852:	2002      	movs	r0, #2
}
 8001854:	bd38      	pop	{r3, r4, r5, pc}

08001856 <HAL_PCD_EP_ClrStall>:
{
 8001856:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001858:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 800185a:	b24b      	sxtb	r3, r1
 800185c:	2b00      	cmp	r3, #0
 800185e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001862:	bfb5      	itete	lt
 8001864:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001868:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800186c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800186e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001872:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001874:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001876:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001878:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800187a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800187e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001880:	2b01      	cmp	r3, #1
 8001882:	d009      	beq.n	8001898 <HAL_PCD_EP_ClrStall+0x42>
 8001884:	2301      	movs	r3, #1
 8001886:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800188a:	6800      	ldr	r0, [r0, #0]
 800188c:	f001 f920 	bl	8002ad0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001890:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001894:	4620      	mov	r0, r4
 8001896:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001898:	2002      	movs	r0, #2
}
 800189a:	bd38      	pop	{r3, r4, r5, pc}

0800189c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 800189c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80018a0:	bf1b      	ittet	ne
 80018a2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80018a6:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018aa:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80018ae:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80018b0:	bf08      	it	eq
 80018b2:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80018b6:	b91a      	cbnz	r2, 80018c0 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80018b8:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80018ba:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 80018bc:	2000      	movs	r0, #0
 80018be:	4770      	bx	lr
    ep->doublebuffer = 1U;
 80018c0:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80018c2:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80018c4:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80018c6:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80018c8:	8103      	strh	r3, [r0, #8]
 80018ca:	e7f7      	b.n	80018bc <HAL_PCDEx_PMAConfig+0x20>

080018cc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018cc:	6803      	ldr	r3, [r0, #0]
{
 80018ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	07db      	lsls	r3, r3, #31
{
 80018d4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	d410      	bmi.n	80018fa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d8:	682b      	ldr	r3, [r5, #0]
 80018da:	079f      	lsls	r7, r3, #30
 80018dc:	d45e      	bmi.n	800199c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	682b      	ldr	r3, [r5, #0]
 80018e0:	0719      	lsls	r1, r3, #28
 80018e2:	f100 8095 	bmi.w	8001a10 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	075a      	lsls	r2, r3, #29
 80018ea:	f100 80bf 	bmi.w	8001a6c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ee:	69ea      	ldr	r2, [r5, #28]
 80018f0:	2a00      	cmp	r2, #0
 80018f2:	f040 812d 	bne.w	8001b50 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80018f6:	2000      	movs	r0, #0
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018fa:	4c90      	ldr	r4, [pc, #576]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80018fc:	6863      	ldr	r3, [r4, #4]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d007      	beq.n	8001916 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001906:	6863      	ldr	r3, [r4, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d10c      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	03de      	lsls	r6, r3, #15
 8001914:	d509      	bpl.n	800192a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	039c      	lsls	r4, r3, #14
 800191a:	d5dd      	bpl.n	80018d8 <HAL_RCC_OscConfig+0xc>
 800191c:	686b      	ldr	r3, [r5, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1da      	bne.n	80018d8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001922:	2001      	movs	r0, #1
}
 8001924:	b002      	add	sp, #8
 8001926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	686b      	ldr	r3, [r5, #4]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d110      	bne.n	8001954 <HAL_RCC_OscConfig+0x88>
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800193a:	f7ff fa6b 	bl	8000e14 <HAL_GetTick>
 800193e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	0398      	lsls	r0, r3, #14
 8001944:	d4c8      	bmi.n	80018d8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001946:	f7ff fa65 	bl	8000e14 <HAL_GetTick>
 800194a:	1b80      	subs	r0, r0, r6
 800194c:	2864      	cmp	r0, #100	; 0x64
 800194e:	d9f7      	bls.n	8001940 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001950:	2003      	movs	r0, #3
 8001952:	e7e7      	b.n	8001924 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	b99b      	cbnz	r3, 800197e <HAL_RCC_OscConfig+0xb2>
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	6023      	str	r3, [r4, #0]
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001964:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001966:	f7ff fa55 	bl	8000e14 <HAL_GetTick>
 800196a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	0399      	lsls	r1, r3, #14
 8001970:	d5b2      	bpl.n	80018d8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff fa4f 	bl	8000e14 <HAL_GetTick>
 8001976:	1b80      	subs	r0, r0, r6
 8001978:	2864      	cmp	r0, #100	; 0x64
 800197a:	d9f7      	bls.n	800196c <HAL_RCC_OscConfig+0xa0>
 800197c:	e7e8      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	d103      	bne.n	800198e <HAL_RCC_OscConfig+0xc2>
 8001986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198a:	6023      	str	r3, [r4, #0]
 800198c:	e7d1      	b.n	8001932 <HAL_RCC_OscConfig+0x66>
 800198e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001992:	6023      	str	r3, [r4, #0]
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	e7cd      	b.n	8001938 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800199c:	4c67      	ldr	r4, [pc, #412]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 800199e:	6863      	ldr	r3, [r4, #4]
 80019a0:	f013 0f0c 	tst.w	r3, #12
 80019a4:	d007      	beq.n	80019b6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019a6:	6863      	ldr	r3, [r4, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d110      	bne.n	80019d2 <HAL_RCC_OscConfig+0x106>
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	03da      	lsls	r2, r3, #15
 80019b4:	d40d      	bmi.n	80019d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	079b      	lsls	r3, r3, #30
 80019ba:	d502      	bpl.n	80019c2 <HAL_RCC_OscConfig+0xf6>
 80019bc:	692b      	ldr	r3, [r5, #16]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d1af      	bne.n	8001922 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	696a      	ldr	r2, [r5, #20]
 80019c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019ce:	6023      	str	r3, [r4, #0]
 80019d0:	e785      	b.n	80018de <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d2:	692a      	ldr	r2, [r5, #16]
 80019d4:	4b5a      	ldr	r3, [pc, #360]	; (8001b40 <HAL_RCC_OscConfig+0x274>)
 80019d6:	b16a      	cbz	r2, 80019f4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019dc:	f7ff fa1a 	bl	8000e14 <HAL_GetTick>
 80019e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	079f      	lsls	r7, r3, #30
 80019e6:	d4ec      	bmi.n	80019c2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fa14 	bl	8000e14 <HAL_GetTick>
 80019ec:	1b80      	subs	r0, r0, r6
 80019ee:	2802      	cmp	r0, #2
 80019f0:	d9f7      	bls.n	80019e2 <HAL_RCC_OscConfig+0x116>
 80019f2:	e7ad      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80019f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019f6:	f7ff fa0d 	bl	8000e14 <HAL_GetTick>
 80019fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	0798      	lsls	r0, r3, #30
 8001a00:	f57f af6d 	bpl.w	80018de <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fa06 	bl	8000e14 <HAL_GetTick>
 8001a08:	1b80      	subs	r0, r0, r6
 8001a0a:	2802      	cmp	r0, #2
 8001a0c:	d9f6      	bls.n	80019fc <HAL_RCC_OscConfig+0x130>
 8001a0e:	e79f      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a10:	69aa      	ldr	r2, [r5, #24]
 8001a12:	4c4a      	ldr	r4, [pc, #296]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a14:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_RCC_OscConfig+0x278>)
 8001a16:	b1da      	cbz	r2, 8001a50 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f9fa 	bl	8000e14 <HAL_GetTick>
 8001a20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a24:	079b      	lsls	r3, r3, #30
 8001a26:	d50d      	bpl.n	8001a44 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a28:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a2c:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a34:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001a36:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001a38:	9b01      	ldr	r3, [sp, #4]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f9      	bne.n	8001a36 <HAL_RCC_OscConfig+0x16a>
 8001a42:	e750      	b.n	80018e6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff f9e6 	bl	8000e14 <HAL_GetTick>
 8001a48:	1b80      	subs	r0, r0, r6
 8001a4a:	2802      	cmp	r0, #2
 8001a4c:	d9e9      	bls.n	8001a22 <HAL_RCC_OscConfig+0x156>
 8001a4e:	e77f      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001a50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a52:	f7ff f9df 	bl	8000e14 <HAL_GetTick>
 8001a56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a5a:	079f      	lsls	r7, r3, #30
 8001a5c:	f57f af43 	bpl.w	80018e6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff f9d8 	bl	8000e14 <HAL_GetTick>
 8001a64:	1b80      	subs	r0, r0, r6
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d9f6      	bls.n	8001a58 <HAL_RCC_OscConfig+0x18c>
 8001a6a:	e771      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6c:	4c33      	ldr	r4, [pc, #204]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a6e:	69e3      	ldr	r3, [r4, #28]
 8001a70:	00d8      	lsls	r0, r3, #3
 8001a72:	d424      	bmi.n	8001abe <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001a74:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	69e3      	ldr	r3, [r4, #28]
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	61e3      	str	r3, [r4, #28]
 8001a7e:	69e3      	ldr	r3, [r4, #28]
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4e30      	ldr	r6, [pc, #192]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a8a:	6833      	ldr	r3, [r6, #0]
 8001a8c:	05d9      	lsls	r1, r3, #23
 8001a8e:	d518      	bpl.n	8001ac2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a90:	68eb      	ldr	r3, [r5, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d126      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x218>
 8001a96:	6a23      	ldr	r3, [r4, #32]
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f9b9 	bl	8000e14 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001aa6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	6a23      	ldr	r3, [r4, #32]
 8001aaa:	079b      	lsls	r3, r3, #30
 8001aac:	d53f      	bpl.n	8001b2e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001aae:	2f00      	cmp	r7, #0
 8001ab0:	f43f af1d 	beq.w	80018ee <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab4:	69e3      	ldr	r3, [r4, #28]
 8001ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aba:	61e3      	str	r3, [r4, #28]
 8001abc:	e717      	b.n	80018ee <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2700      	movs	r7, #0
 8001ac0:	e7e2      	b.n	8001a88 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	6833      	ldr	r3, [r6, #0]
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001aca:	f7ff f9a3 	bl	8000e14 <HAL_GetTick>
 8001ace:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	6833      	ldr	r3, [r6, #0]
 8001ad2:	05da      	lsls	r2, r3, #23
 8001ad4:	d4dc      	bmi.n	8001a90 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff f99d 	bl	8000e14 <HAL_GetTick>
 8001ada:	eba0 0008 	sub.w	r0, r0, r8
 8001ade:	2864      	cmp	r0, #100	; 0x64
 8001ae0:	d9f6      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x204>
 8001ae2:	e735      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	b9ab      	cbnz	r3, 8001b12 <HAL_RCC_OscConfig+0x246>
 8001ae6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6223      	str	r3, [r4, #32]
 8001af2:	6a23      	ldr	r3, [r4, #32]
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001afa:	f7ff f98b 	bl	8000e14 <HAL_GetTick>
 8001afe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b00:	6a23      	ldr	r3, [r4, #32]
 8001b02:	0798      	lsls	r0, r3, #30
 8001b04:	d5d3      	bpl.n	8001aae <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff f985 	bl	8000e14 <HAL_GetTick>
 8001b0a:	1b80      	subs	r0, r0, r6
 8001b0c:	4540      	cmp	r0, r8
 8001b0e:	d9f7      	bls.n	8001b00 <HAL_RCC_OscConfig+0x234>
 8001b10:	e71e      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	6a23      	ldr	r3, [r4, #32]
 8001b16:	d103      	bne.n	8001b20 <HAL_RCC_OscConfig+0x254>
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6223      	str	r3, [r4, #32]
 8001b1e:	e7ba      	b.n	8001a96 <HAL_RCC_OscConfig+0x1ca>
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6223      	str	r3, [r4, #32]
 8001b26:	6a23      	ldr	r3, [r4, #32]
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	e7b6      	b.n	8001a9c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f971 	bl	8000e14 <HAL_GetTick>
 8001b32:	eba0 0008 	sub.w	r0, r0, r8
 8001b36:	42b0      	cmp	r0, r6
 8001b38:	d9b6      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x1dc>
 8001b3a:	e709      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	42420000 	.word	0x42420000
 8001b44:	42420480 	.word	0x42420480
 8001b48:	20000118 	.word	0x20000118
 8001b4c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4c22      	ldr	r4, [pc, #136]	; (8001bdc <HAL_RCC_OscConfig+0x310>)
 8001b52:	6863      	ldr	r3, [r4, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	f43f aee2 	beq.w	8001922 <HAL_RCC_OscConfig+0x56>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	4e1f      	ldr	r6, [pc, #124]	; (8001be0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b62:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b64:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b66:	d12b      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001b68:	f7ff f954 	bl	8000e14 <HAL_GetTick>
 8001b6c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	0199      	lsls	r1, r3, #6
 8001b72:	d41f      	bmi.n	8001bb4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b74:	6a2b      	ldr	r3, [r5, #32]
 8001b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7c:	6862      	ldr	r2, [r4, #4]
 8001b7e:	68a9      	ldr	r1, [r5, #8]
 8001b80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b84:	430a      	orrs	r2, r1
 8001b86:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001b8a:	6862      	ldr	r2, [r4, #4]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001b92:	4313      	orrs	r3, r2
 8001b94:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b96:	2301      	movs	r3, #1
 8001b98:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f93b 	bl	8000e14 <HAL_GetTick>
 8001b9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	019a      	lsls	r2, r3, #6
 8001ba4:	f53f aea7 	bmi.w	80018f6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f934 	bl	8000e14 <HAL_GetTick>
 8001bac:	1b40      	subs	r0, r0, r5
 8001bae:	2802      	cmp	r0, #2
 8001bb0:	d9f6      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2d4>
 8001bb2:	e6cd      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f92e 	bl	8000e14 <HAL_GetTick>
 8001bb8:	1bc0      	subs	r0, r0, r7
 8001bba:	2802      	cmp	r0, #2
 8001bbc:	d9d7      	bls.n	8001b6e <HAL_RCC_OscConfig+0x2a2>
 8001bbe:	e6c7      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f928 	bl	8000e14 <HAL_GetTick>
 8001bc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	f57f ae94 	bpl.w	80018f6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff f921 	bl	8000e14 <HAL_GetTick>
 8001bd2:	1b40      	subs	r0, r0, r5
 8001bd4:	2802      	cmp	r0, #2
 8001bd6:	d9f6      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x2fa>
 8001bd8:	e6ba      	b.n	8001950 <HAL_RCC_OscConfig+0x84>
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	42420060 	.word	0x42420060

08001be4 <HAL_RCC_MCOConfig>:
{
 8001be4:	b530      	push	{r4, r5, lr}
 8001be6:	b087      	sub	sp, #28
 8001be8:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 8001bea:	2210      	movs	r2, #16
 8001bec:	2100      	movs	r1, #0
 8001bee:	a802      	add	r0, sp, #8
 8001bf0:	f002 fa1e 	bl	8004030 <memset>
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 8001bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
  MCO1_CLK_ENABLE();
 8001c00:	4c0a      	ldr	r4, [pc, #40]	; (8001c2c <HAL_RCC_MCOConfig+0x48>)
  gpio.Pin       = MCO1_PIN;
 8001c02:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8001c04:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001c06:	a902      	add	r1, sp, #8
  MCO1_CLK_ENABLE();
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	61a3      	str	r3, [r4, #24]
 8001c0e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <HAL_RCC_MCOConfig+0x4c>)
  MCO1_CLK_ENABLE();
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001c1a:	f7ff f98d 	bl	8000f38 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001c1e:	6861      	ldr	r1, [r4, #4]
 8001c20:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8001c24:	4329      	orrs	r1, r5
 8001c26:	6061      	str	r1, [r4, #4]
}
 8001c28:	b007      	add	sp, #28
 8001c2a:	bd30      	pop	{r4, r5, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010800 	.word	0x40010800

08001c34 <HAL_RCC_GetSysClockFreq>:
{
 8001c34:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001c38:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c3a:	ac02      	add	r4, sp, #8
 8001c3c:	f103 0510 	add.w	r5, r3, #16
 8001c40:	4622      	mov	r2, r4
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	3308      	adds	r3, #8
 8001c48:	c203      	stmia	r2!, {r0, r1}
 8001c4a:	42ab      	cmp	r3, r5
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	d1f7      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c50:	2301      	movs	r3, #1
 8001c52:	f88d 3004 	strb.w	r3, [sp, #4]
 8001c56:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001c58:	4911      	ldr	r1, [pc, #68]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c5a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001c5e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c60:	f003 020c 	and.w	r2, r3, #12
 8001c64:	2a08      	cmp	r2, #8
 8001c66:	d117      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c68:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001c6c:	a806      	add	r0, sp, #24
 8001c6e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c70:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c72:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c76:	d50c      	bpl.n	8001c92 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c78:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c7a:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c7c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c80:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c82:	aa06      	add	r2, sp, #24
 8001c84:	4413      	add	r3, r2
 8001c86:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c8a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001c8e:	b007      	add	sp, #28
 8001c90:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x74>)
 8001c94:	4350      	muls	r0, r2
 8001c96:	e7fa      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001c9a:	e7f8      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x5a>
 8001c9c:	08006e60 	.word	0x08006e60
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	007a1200 	.word	0x007a1200
 8001ca8:	003d0900 	.word	0x003d0900

08001cac <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cac:	4a4d      	ldr	r2, [pc, #308]	; (8001de4 <HAL_RCC_ClockConfig+0x138>)
{
 8001cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cb2:	6813      	ldr	r3, [r2, #0]
{
 8001cb4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	428b      	cmp	r3, r1
{
 8001cbc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cbe:	d328      	bcc.n	8001d12 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	682a      	ldr	r2, [r5, #0]
 8001cc2:	0791      	lsls	r1, r2, #30
 8001cc4:	d432      	bmi.n	8001d2c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	07d2      	lsls	r2, r2, #31
 8001cc8:	d438      	bmi.n	8001d3c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cca:	4a46      	ldr	r2, [pc, #280]	; (8001de4 <HAL_RCC_ClockConfig+0x138>)
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	429e      	cmp	r6, r3
 8001cd4:	d373      	bcc.n	8001dbe <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd6:	682a      	ldr	r2, [r5, #0]
 8001cd8:	4c43      	ldr	r4, [pc, #268]	; (8001de8 <HAL_RCC_ClockConfig+0x13c>)
 8001cda:	f012 0f04 	tst.w	r2, #4
 8001cde:	d179      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	0713      	lsls	r3, r2, #28
 8001ce2:	d506      	bpl.n	8001cf2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ce4:	6863      	ldr	r3, [r4, #4]
 8001ce6:	692a      	ldr	r2, [r5, #16]
 8001ce8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001cec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cf0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cf2:	f7ff ff9f 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	4a3c      	ldr	r2, [pc, #240]	; (8001dec <HAL_RCC_ClockConfig+0x140>)
 8001cfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	40d8      	lsrs	r0, r3
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_ClockConfig+0x144>)
 8001d04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f842 	bl	8000d90 <HAL_InitTick>
  return HAL_OK;
 8001d0c:	2000      	movs	r0, #0
}
 8001d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	f023 0307 	bic.w	r3, r3, #7
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	4299      	cmp	r1, r3
 8001d24:	d0cc      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
 8001d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2c:	492e      	ldr	r1, [pc, #184]	; (8001de8 <HAL_RCC_ClockConfig+0x13c>)
 8001d2e:	68a8      	ldr	r0, [r5, #8]
 8001d30:	684b      	ldr	r3, [r1, #4]
 8001d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d36:	4303      	orrs	r3, r0
 8001d38:	604b      	str	r3, [r1, #4]
 8001d3a:	e7c4      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	686a      	ldr	r2, [r5, #4]
 8001d3e:	4c2a      	ldr	r4, [pc, #168]	; (8001de8 <HAL_RCC_ClockConfig+0x13c>)
 8001d40:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	d0ec      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001d5a:	f7ff f85b 	bl	8000e14 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001d60:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d114      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d66:	6863      	ldr	r3, [r4, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d0ac      	beq.n	8001cca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff f850 	bl	8000e14 <HAL_GetTick>
 8001d74:	1bc0      	subs	r0, r0, r7
 8001d76:	4540      	cmp	r0, r8
 8001d78:	d9f5      	bls.n	8001d66 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	2a02      	cmp	r2, #2
 8001d82:	d102      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d88:	e7df      	b.n	8001d4a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	f013 0f02 	tst.w	r3, #2
 8001d8e:	e7dc      	b.n	8001d4a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d10f      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	6863      	ldr	r3, [r4, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d095      	beq.n	8001cca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9e:	f7ff f839 	bl	8000e14 <HAL_GetTick>
 8001da2:	1bc0      	subs	r0, r0, r7
 8001da4:	4540      	cmp	r0, r8
 8001da6:	d9f5      	bls.n	8001d94 <HAL_RCC_ClockConfig+0xe8>
 8001da8:	e7e7      	b.n	8001d7a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001daa:	f7ff f833 	bl	8000e14 <HAL_GetTick>
 8001dae:	1bc0      	subs	r0, r0, r7
 8001db0:	4540      	cmp	r0, r8
 8001db2:	d8e2      	bhi.n	8001d7a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db4:	6863      	ldr	r3, [r4, #4]
 8001db6:	f013 0f0c 	tst.w	r3, #12
 8001dba:	d1f6      	bne.n	8001daa <HAL_RCC_ClockConfig+0xfe>
 8001dbc:	e785      	b.n	8001cca <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	6813      	ldr	r3, [r2, #0]
 8001dc0:	f023 0307 	bic.w	r3, r3, #7
 8001dc4:	4333      	orrs	r3, r6
 8001dc6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc8:	6813      	ldr	r3, [r2, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	429e      	cmp	r6, r3
 8001dd0:	d1a9      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x7a>
 8001dd2:	e780      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	6863      	ldr	r3, [r4, #4]
 8001dd6:	68e9      	ldr	r1, [r5, #12]
 8001dd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6063      	str	r3, [r4, #4]
 8001de0:	e77e      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x34>
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08006f04 	.word	0x08006f04
 8001df0:	20000118 	.word	0x20000118

08001df4 <HAL_RCC_GetHCLKFreq>:
}
 8001df4:	4b01      	ldr	r3, [pc, #4]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x8>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000118 	.word	0x20000118

08001e00 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e00:	6803      	ldr	r3, [r0, #0]
{
 8001e02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e06:	07d9      	lsls	r1, r3, #31
{
 8001e08:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e0a:	d520      	bpl.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0c:	4c35      	ldr	r4, [pc, #212]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001e0e:	69e3      	ldr	r3, [r4, #28]
 8001e10:	00da      	lsls	r2, r3, #3
 8001e12:	d432      	bmi.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001e14:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	69e3      	ldr	r3, [r4, #28]
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	61e3      	str	r3, [r4, #28]
 8001e1e:	69e3      	ldr	r3, [r4, #28]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4e2f      	ldr	r6, [pc, #188]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001e2a:	6833      	ldr	r3, [r6, #0]
 8001e2c:	05db      	lsls	r3, r3, #23
 8001e2e:	d526      	bpl.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e30:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e32:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e36:	d136      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001e38:	6a23      	ldr	r3, [r4, #32]
 8001e3a:	686a      	ldr	r2, [r5, #4]
 8001e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e40:	4313      	orrs	r3, r2
 8001e42:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e44:	b11f      	cbz	r7, 8001e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e46:	69e3      	ldr	r3, [r4, #28]
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e4e:	6828      	ldr	r0, [r5, #0]
 8001e50:	0783      	lsls	r3, r0, #30
 8001e52:	d506      	bpl.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e54:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001e56:	68a9      	ldr	r1, [r5, #8]
 8001e58:	6853      	ldr	r3, [r2, #4]
 8001e5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e62:	f010 0010 	ands.w	r0, r0, #16
 8001e66:	d01b      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001e6a:	68e9      	ldr	r1, [r5, #12]
 8001e6c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e6e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e74:	430b      	orrs	r3, r1
 8001e76:	6053      	str	r3, [r2, #4]
 8001e78:	e012      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2700      	movs	r7, #0
 8001e7c:	e7d4      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	6833      	ldr	r3, [r6, #0]
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e86:	f7fe ffc5 	bl	8000e14 <HAL_GetTick>
 8001e8a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	6833      	ldr	r3, [r6, #0]
 8001e8e:	05d8      	lsls	r0, r3, #23
 8001e90:	d4ce      	bmi.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7fe ffbf 	bl	8000e14 <HAL_GetTick>
 8001e96:	eba0 0008 	sub.w	r0, r0, r8
 8001e9a:	2864      	cmp	r0, #100	; 0x64
 8001e9c:	d9f6      	bls.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001e9e:	2003      	movs	r0, #3
}
 8001ea0:	b002      	add	sp, #8
 8001ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ea6:	686a      	ldr	r2, [r5, #4]
 8001ea8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d0c3      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eb4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ebe:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001ec0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ec2:	07d9      	lsls	r1, r3, #31
 8001ec4:	d5b8      	bpl.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001ec6:	f7fe ffa5 	bl	8000e14 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ece:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	6a23      	ldr	r3, [r4, #32]
 8001ed2:	079a      	lsls	r2, r3, #30
 8001ed4:	d4b0      	bmi.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe ff9d 	bl	8000e14 <HAL_GetTick>
 8001eda:	1b80      	subs	r0, r0, r6
 8001edc:	4540      	cmp	r0, r8
 8001ede:	d9f7      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001ee0:	e7dd      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42420440 	.word	0x42420440

08001ef0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef0:	6a03      	ldr	r3, [r0, #32]
{
 8001ef2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001efe:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f06:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f08:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f0a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001f0e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f10:	4d0a      	ldr	r5, [pc, #40]	; (8001f3c <TIM_OC1_SetConfig+0x4c>)
 8001f12:	42a8      	cmp	r0, r5
 8001f14:	d10b      	bne.n	8001f2e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f16:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f18:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001f1c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f1e:	698e      	ldr	r6, [r1, #24]
 8001f20:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f22:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f26:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f28:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f2c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f30:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f32:	684a      	ldr	r2, [r1, #4]
 8001f34:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f36:	6203      	str	r3, [r0, #32]
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f40:	6a03      	ldr	r3, [r0, #32]
{
 8001f42:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f4e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f52:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f56:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f58:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001f5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f62:	4d0b      	ldr	r5, [pc, #44]	; (8001f90 <TIM_OC3_SetConfig+0x50>)
 8001f64:	42a8      	cmp	r0, r5
 8001f66:	d10d      	bne.n	8001f84 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f68:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f72:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f74:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f76:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f7a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f80:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f84:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f86:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f88:	684a      	ldr	r2, [r1, #4]
 8001f8a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f8c:	6203      	str	r3, [r0, #32]
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
 8001f90:	40012c00 	.word	0x40012c00

08001f94 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f94:	6a03      	ldr	r3, [r0, #32]
{
 8001f96:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f9c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f9e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fa2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fa4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fa6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001faa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fb4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fb8:	4d06      	ldr	r5, [pc, #24]	; (8001fd4 <TIM_OC4_SetConfig+0x40>)
 8001fba:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001fbc:	bf02      	ittt	eq
 8001fbe:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fc0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001fc4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fca:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fcc:	684a      	ldr	r2, [r1, #4]
 8001fce:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fd0:	6203      	str	r3, [r0, #32]
 8001fd2:	bd30      	pop	{r4, r5, pc}
 8001fd4:	40012c00 	.word	0x40012c00

08001fd8 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd8:	6803      	ldr	r3, [r0, #0]
}
 8001fda:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	4770      	bx	lr

08001fee <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001fee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001ff2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	f04f 0302 	mov.w	r3, #2
 8001ffa:	d01c      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0x48>
 8001ffc:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002002:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002004:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002008:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800200a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800200e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002012:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002014:	680a      	ldr	r2, [r1, #0]
 8002016:	2a40      	cmp	r2, #64	; 0x40
 8002018:	d079      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x120>
 800201a:	d819      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x62>
 800201c:	2a10      	cmp	r2, #16
 800201e:	f000 8093 	beq.w	8002148 <HAL_TIM_ConfigClockSource+0x15a>
 8002022:	d80a      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x4c>
 8002024:	2a00      	cmp	r2, #0
 8002026:	f000 8089 	beq.w	800213c <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 800202a:	2301      	movs	r3, #1
 800202c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002030:	2300      	movs	r3, #0
 8002032:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002036:	4618      	mov	r0, r3
}
 8002038:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800203a:	2a20      	cmp	r2, #32
 800203c:	f000 808a 	beq.w	8002154 <HAL_TIM_ConfigClockSource+0x166>
 8002040:	2a30      	cmp	r2, #48	; 0x30
 8002042:	d1f2      	bne.n	800202a <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002044:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002046:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800204a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800204e:	e036      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002050:	2a70      	cmp	r2, #112	; 0x70
 8002052:	d036      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0xd4>
 8002054:	d81b      	bhi.n	800208e <HAL_TIM_ConfigClockSource+0xa0>
 8002056:	2a50      	cmp	r2, #80	; 0x50
 8002058:	d042      	beq.n	80020e0 <HAL_TIM_ConfigClockSource+0xf2>
 800205a:	2a60      	cmp	r2, #96	; 0x60
 800205c:	d1e5      	bne.n	800202a <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800205e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002060:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002062:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002066:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002068:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800206a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800206c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800206e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002072:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002076:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800207a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800207e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002080:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002082:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002084:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002088:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800208c:	e017      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800208e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002092:	d011      	beq.n	80020b8 <HAL_TIM_ConfigClockSource+0xca>
 8002094:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002098:	d1c7      	bne.n	800202a <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800209a:	688a      	ldr	r2, [r1, #8]
 800209c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800209e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020a0:	68c9      	ldr	r1, [r1, #12]
 80020a2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020a4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020ac:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ae:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b6:	e002      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e7b3      	b.n	800202a <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020c2:	688a      	ldr	r2, [r1, #8]
 80020c4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80020c6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020c8:	68c9      	ldr	r1, [r1, #12]
 80020ca:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020d4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80020d6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80020d8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020da:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80020de:	e7ee      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e0:	684c      	ldr	r4, [r1, #4]
 80020e2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80020e4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020e6:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ec:	f025 0501 	bic.w	r5, r5, #1
 80020f0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020f2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80020f4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020fa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80020fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002100:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002102:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002104:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002108:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800210c:	e7d7      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800210e:	684c      	ldr	r4, [r1, #4]
 8002110:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002112:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002114:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002116:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800211a:	f025 0501 	bic.w	r5, r5, #1
 800211e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002120:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002122:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002124:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002128:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800212c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800212e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002130:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002132:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002136:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800213a:	e7c0      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800213c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800213e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002142:	f042 0207 	orr.w	r2, r2, #7
 8002146:	e7ba      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002148:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800214a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800214e:	f042 0217 	orr.w	r2, r2, #23
 8002152:	e7b4      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002154:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002156:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800215a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800215e:	e7ae      	b.n	80020be <HAL_TIM_ConfigClockSource+0xd0>

08002160 <HAL_TIM_PeriodElapsedCallback>:
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_OC_DelayElapsedCallback>:
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_IC_CaptureCallback>:
 8002164:	4770      	bx	lr

08002166 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002166:	4770      	bx	lr

08002168 <HAL_TIM_TriggerCallback>:
 8002168:	4770      	bx	lr

0800216a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800216a:	6803      	ldr	r3, [r0, #0]
{
 800216c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800216e:	691a      	ldr	r2, [r3, #16]
{
 8002170:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002172:	0791      	lsls	r1, r2, #30
 8002174:	d50e      	bpl.n	8002194 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	0792      	lsls	r2, r2, #30
 800217a:	d50b      	bpl.n	8002194 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800217c:	f06f 0202 	mvn.w	r2, #2
 8002180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002182:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002184:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002186:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002188:	079b      	lsls	r3, r3, #30
 800218a:	d077      	beq.n	800227c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800218c:	f7ff ffea 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002190:	2300      	movs	r3, #0
 8002192:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	0750      	lsls	r0, r2, #29
 800219a:	d510      	bpl.n	80021be <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	0751      	lsls	r1, r2, #29
 80021a0:	d50d      	bpl.n	80021be <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021a2:	f06f 0204 	mvn.w	r2, #4
 80021a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021aa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ac:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ae:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b4:	d068      	beq.n	8002288 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	f7ff ffd5 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	2300      	movs	r3, #0
 80021bc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	0712      	lsls	r2, r2, #28
 80021c4:	d50f      	bpl.n	80021e6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	0710      	lsls	r0, r2, #28
 80021ca:	d50c      	bpl.n	80021e6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021cc:	f06f 0208 	mvn.w	r2, #8
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d8:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021dc:	d05a      	beq.n	8002294 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	f7ff ffc1 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	2300      	movs	r3, #0
 80021e4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	06d2      	lsls	r2, r2, #27
 80021ec:	d510      	bpl.n	8002210 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	06d0      	lsls	r0, r2, #27
 80021f2:	d50d      	bpl.n	8002210 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021f4:	f06f 0210 	mvn.w	r2, #16
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021fa:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021fc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021fe:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002200:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002204:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002206:	d04b      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002208:	f7ff ffac 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220c:	2300      	movs	r3, #0
 800220e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	07d1      	lsls	r1, r2, #31
 8002216:	d508      	bpl.n	800222a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	07d2      	lsls	r2, r2, #31
 800221c:	d505      	bpl.n	800222a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800221e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002222:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002224:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002226:	f7ff ff9b 	bl	8002160 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	0610      	lsls	r0, r2, #24
 8002230:	d508      	bpl.n	8002244 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	0611      	lsls	r1, r2, #24
 8002236:	d505      	bpl.n	8002244 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002238:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800223c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800223e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002240:	f000 f99b 	bl	800257a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	0652      	lsls	r2, r2, #25
 800224a:	d508      	bpl.n	800225e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	0650      	lsls	r0, r2, #25
 8002250:	d505      	bpl.n	800225e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002252:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002256:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002258:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800225a:	f7ff ff85 	bl	8002168 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	0691      	lsls	r1, r2, #26
 8002264:	d522      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	0692      	lsls	r2, r2, #26
 800226a:	d51f      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800226c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002270:	4620      	mov	r0, r4
}
 8002272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002276:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002278:	f000 b97e 	b.w	8002578 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800227c:	f7ff ff71 	bl	8002162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	4620      	mov	r0, r4
 8002282:	f7ff ff70 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
 8002286:	e783      	b.n	8002190 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002288:	f7ff ff6b 	bl	8002162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	4620      	mov	r0, r4
 800228e:	f7ff ff6a 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
 8002292:	e792      	b.n	80021ba <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002294:	f7ff ff65 	bl	8002162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff ff64 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
 800229e:	e7a0      	b.n	80021e2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a0:	f7ff ff5f 	bl	8002162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	4620      	mov	r0, r4
 80022a6:	f7ff ff5e 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
 80022aa:	e7af      	b.n	800220c <HAL_TIM_IRQHandler+0xa2>
 80022ac:	bd10      	pop	{r4, pc}
	...

080022b0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b0:	4a1a      	ldr	r2, [pc, #104]	; (800231c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80022b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	4290      	cmp	r0, r2
 80022b6:	d00a      	beq.n	80022ce <TIM_Base_SetConfig+0x1e>
 80022b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022bc:	d007      	beq.n	80022ce <TIM_Base_SetConfig+0x1e>
 80022be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022c2:	4290      	cmp	r0, r2
 80022c4:	d003      	beq.n	80022ce <TIM_Base_SetConfig+0x1e>
 80022c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ca:	4290      	cmp	r0, r2
 80022cc:	d115      	bne.n	80022fa <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80022ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022d4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022d6:	4a11      	ldr	r2, [pc, #68]	; (800231c <TIM_Base_SetConfig+0x6c>)
 80022d8:	4290      	cmp	r0, r2
 80022da:	d00a      	beq.n	80022f2 <TIM_Base_SetConfig+0x42>
 80022dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022e0:	d007      	beq.n	80022f2 <TIM_Base_SetConfig+0x42>
 80022e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022e6:	4290      	cmp	r0, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_Base_SetConfig+0x42>
 80022ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ee:	4290      	cmp	r0, r2
 80022f0:	d103      	bne.n	80022fa <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f8:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80022fa:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80022fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002300:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002302:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002304:	688b      	ldr	r3, [r1, #8]
 8002306:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002308:	680b      	ldr	r3, [r1, #0]
 800230a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <TIM_Base_SetConfig+0x6c>)
 800230e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002310:	bf04      	itt	eq
 8002312:	690b      	ldreq	r3, [r1, #16]
 8002314:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002316:	2301      	movs	r3, #1
 8002318:	6143      	str	r3, [r0, #20]
 800231a:	4770      	bx	lr
 800231c:	40012c00 	.word	0x40012c00

08002320 <HAL_TIM_Base_Init>:
{
 8002320:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002322:	4604      	mov	r4, r0
 8002324:	b1a0      	cbz	r0, 8002350 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002326:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800232a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800232e:	b91b      	cbnz	r3, 8002338 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002330:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002334:	f001 fb94 	bl	8003a60 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002338:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800233c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002340:	1d21      	adds	r1, r4, #4
 8002342:	f7ff ffb5 	bl	80022b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002346:	2301      	movs	r3, #1
  return HAL_OK;
 8002348:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800234a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800234e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002350:	2001      	movs	r0, #1
}
 8002352:	bd10      	pop	{r4, pc}

08002354 <HAL_TIM_PWM_Init>:
{
 8002354:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002356:	4604      	mov	r4, r0
 8002358:	b1a0      	cbz	r0, 8002384 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800235a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800235e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002362:	b91b      	cbnz	r3, 800236c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002364:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002368:	f001 fb66 	bl	8003a38 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800236c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002370:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002374:	1d21      	adds	r1, r4, #4
 8002376:	f7ff ff9b 	bl	80022b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800237a:	2301      	movs	r3, #1
  return HAL_OK;
 800237c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800237e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002382:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002384:	2001      	movs	r0, #1
}
 8002386:	bd10      	pop	{r4, pc}

08002388 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002388:	6a03      	ldr	r3, [r0, #32]
{
 800238a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800238c:	f023 0310 	bic.w	r3, r3, #16
 8002390:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002392:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002394:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002396:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002398:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800239a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800239e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80023a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023ac:	4d0b      	ldr	r5, [pc, #44]	; (80023dc <TIM_OC2_SetConfig+0x54>)
 80023ae:	42a8      	cmp	r0, r5
 80023b0:	d10d      	bne.n	80023ce <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023b2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80023b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80023bc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80023be:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023c0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80023c4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80023c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80023ca:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80023ce:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80023d0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80023d2:	684a      	ldr	r2, [r1, #4]
 80023d4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80023d6:	6203      	str	r3, [r0, #32]
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00

080023e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80023e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80023e6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f04f 0002 	mov.w	r0, #2
 80023ee:	d025      	beq.n	800243c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80023f0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80023f2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80023f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80023fa:	2a0c      	cmp	r2, #12
 80023fc:	d818      	bhi.n	8002430 <HAL_TIM_PWM_ConfigChannel+0x50>
 80023fe:	e8df f002 	tbb	[pc, r2]
 8002402:	1707      	.short	0x1707
 8002404:	171e1717 	.word	0x171e1717
 8002408:	172f1717 	.word	0x172f1717
 800240c:	1717      	.short	0x1717
 800240e:	40          	.byte	0x40
 800240f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002410:	6820      	ldr	r0, [r4, #0]
 8002412:	f7ff fd6d 	bl	8001ef0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002416:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002418:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	f042 0208 	orr.w	r2, r2, #8
 8002420:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	f022 0204 	bic.w	r2, r2, #4
 8002428:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800242e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002430:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002432:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002434:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002438:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800243c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	f7ff ffa2 	bl	8002388 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002444:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002446:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800245e:	e7e6      	b.n	800242e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	f7ff fd6d 	bl	8001f40 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002466:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002468:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	f042 0208 	orr.w	r2, r2, #8
 8002470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	f022 0204 	bic.w	r2, r2, #4
 8002478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800247e:	61da      	str	r2, [r3, #28]
    break;
 8002480:	e7d6      	b.n	8002430 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002482:	6820      	ldr	r0, [r4, #0]
 8002484:	f7ff fd86 	bl	8001f94 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002488:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800248a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002492:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024a2:	e7ec      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x9e>

080024a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024a4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80024a6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024a8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80024aa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80024ac:	ea23 0304 	bic.w	r3, r3, r4
 80024b0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80024b2:	6a03      	ldr	r3, [r0, #32]
 80024b4:	408a      	lsls	r2, r1
 80024b6:	431a      	orrs	r2, r3
 80024b8:	6202      	str	r2, [r0, #32]
 80024ba:	bd10      	pop	{r4, pc}

080024bc <HAL_TIM_PWM_Start>:
{
 80024bc:	b510      	push	{r4, lr}
 80024be:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024c0:	2201      	movs	r2, #1
 80024c2:	6800      	ldr	r0, [r0, #0]
 80024c4:	f7ff ffee 	bl	80024a4 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <HAL_TIM_PWM_Start+0x28>)
}
 80024cc:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024ce:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80024d0:	bf02      	ittt	eq
 80024d2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80024d4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80024d8:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
}
 80024e2:	bd10      	pop	{r4, pc}
 80024e4:	40012c00 	.word	0x40012c00

080024e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d01f      	beq.n	8002530 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80024f0:	68cb      	ldr	r3, [r1, #12]
 80024f2:	688a      	ldr	r2, [r1, #8]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80024fa:	684a      	ldr	r2, [r1, #4]
 80024fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002500:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002502:	680a      	ldr	r2, [r1, #0]
 8002504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002508:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800250a:	690a      	ldr	r2, [r1, #16]
 800250c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002510:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002512:	694a      	ldr	r2, [r1, #20]
 8002514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002518:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800251a:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800251c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002520:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002522:	6802      	ldr	r2, [r0, #0]
 8002524:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002526:	2300      	movs	r3, #0
 8002528:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800252c:	4618      	mov	r0, r3
 800252e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002530:	2002      	movs	r0, #2
}
 8002532:	4770      	bx	lr

08002534 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002534:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002538:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800253a:	2b01      	cmp	r3, #1
 800253c:	f04f 0302 	mov.w	r3, #2
 8002540:	d018      	beq.n	8002574 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002542:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002546:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002548:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800254a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800254c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800254e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002552:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4322      	orrs	r2, r4
 8002558:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002560:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002568:	2301      	movs	r3, #1
 800256a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800256e:	2300      	movs	r3, #0
 8002570:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002574:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002576:	bd10      	pop	{r4, pc}

08002578 <HAL_TIMEx_CommutationCallback>:
 8002578:	4770      	bx	lr

0800257a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800257a:	4770      	bx	lr

0800257c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800257c:	b084      	sub	sp, #16
 800257e:	a801      	add	r0, sp, #4
 8002580:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002584:	b004      	add	sp, #16
 8002586:	2000      	movs	r0, #0
 8002588:	4770      	bx	lr

0800258a <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800258a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800258e:	b29b      	uxth	r3, r3
 8002590:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002594:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002598:	2000      	movs	r0, #0
 800259a:	4770      	bx	lr

0800259c <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800259c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80025a0:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80025a4:	045b      	lsls	r3, r3, #17
 80025a6:	0c5b      	lsrs	r3, r3, #17
 80025a8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80025ac:	2000      	movs	r0, #0
 80025ae:	4770      	bx	lr

080025b0 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80025b0:	2000      	movs	r0, #0
 80025b2:	4770      	bx	lr

080025b4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80025b4:	b084      	sub	sp, #16
 80025b6:	b510      	push	{r4, lr}
 80025b8:	ac03      	add	r4, sp, #12
 80025ba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 80025be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 80025c2:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80025ca:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80025ce:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80025d2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80025d6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 80025da:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80025e2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80025e6:	4610      	mov	r0, r2
 80025e8:	4770      	bx	lr
	...

080025ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80025ec:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80025ee:	78cb      	ldrb	r3, [r1, #3]
 80025f0:	780a      	ldrb	r2, [r1, #0]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d80f      	bhi.n	8002616 <USB_ActivateEndpoint+0x2a>
 80025f6:	e8df f003 	tbb	[pc, r3]
 80025fa:	6402      	.short	0x6402
 80025fc:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80025fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002602:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002612:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002616:	f640 730f 	movw	r3, #3855	; 0xf0f
 800261a:	780c      	ldrb	r4, [r1, #0]
 800261c:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002620:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8002624:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002628:	401a      	ands	r2, r3
 800262a:	432a      	orrs	r2, r5
 800262c:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002630:	7a8a      	ldrb	r2, [r1, #10]
 8002632:	780d      	ldrb	r5, [r1, #0]
 8002634:	2a00      	cmp	r2, #0
 8002636:	f040 8097 	bne.w	8002768 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 800263a:	784c      	ldrb	r4, [r1, #1]
 800263c:	888a      	ldrh	r2, [r1, #4]
 800263e:	2c00      	cmp	r4, #0
 8002640:	d04a      	beq.n	80026d8 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002642:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002646:	0852      	lsrs	r2, r2, #1
 8002648:	b2a4      	uxth	r4, r4
 800264a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800264e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002652:	0052      	lsls	r2, r2, #1
 8002654:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002658:	780c      	ldrb	r4, [r1, #0]
 800265a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800265e:	0652      	lsls	r2, r2, #25
 8002660:	d508      	bpl.n	8002674 <USB_ActivateEndpoint+0x88>
 8002662:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002666:	4013      	ands	r3, r2
 8002668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002670:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002674:	780a      	ldrb	r2, [r1, #0]
 8002676:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800267a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800268a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002692:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002696:	2000      	movs	r0, #0
 8002698:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800269a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800269e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	e7b2      	b.n	8002612 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80026ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026b0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	0c1b      	lsrs	r3, r3, #16
 80026bc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80026c0:	e7a7      	b.n	8002612 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80026c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d6:	e79c      	b.n	8002612 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80026d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80026dc:	0852      	lsrs	r2, r2, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3304      	adds	r3, #4
 80026e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80026e6:	0052      	lsls	r2, r2, #1
 80026e8:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80026ec:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80026f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80026f4:	690d      	ldr	r5, [r1, #16]
 80026f6:	b292      	uxth	r2, r2
 80026f8:	780b      	ldrb	r3, [r1, #0]
 80026fa:	3206      	adds	r2, #6
 80026fc:	2d3e      	cmp	r5, #62	; 0x3e
 80026fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002702:	d929      	bls.n	8002758 <USB_ActivateEndpoint+0x16c>
 8002704:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8002708:	06eb      	lsls	r3, r5, #27
 800270a:	bf04      	itt	eq
 800270c:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8002710:	b29e      	uxtheq	r6, r3
 8002712:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <USB_ActivateEndpoint+0x2e0>)
 8002714:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002718:	b29b      	uxth	r3, r3
 800271a:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800271e:	780a      	ldrb	r2, [r1, #0]
 8002720:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002724:	045e      	lsls	r6, r3, #17
 8002726:	d50b      	bpl.n	8002740 <USB_ActivateEndpoint+0x154>
 8002728:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800272c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002730:	051b      	lsls	r3, r3, #20
 8002732:	0d1b      	lsrs	r3, r3, #20
 8002734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002740:	780a      	ldrb	r2, [r1, #0]
 8002742:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	041b      	lsls	r3, r3, #16
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002756:	e798      	b.n	800268a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002758:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800275c:	07ed      	lsls	r5, r5, #31
 800275e:	bf44      	itt	mi
 8002760:	3301      	addmi	r3, #1
 8002762:	b29b      	uxthmi	r3, r3
 8002764:	029b      	lsls	r3, r3, #10
 8002766:	e7d7      	b.n	8002718 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002768:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 800276c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002770:	0512      	lsls	r2, r2, #20
 8002772:	0d12      	lsrs	r2, r2, #20
 8002774:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800277c:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002780:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002784:	780c      	ldrb	r4, [r1, #0]
 8002786:	b292      	uxth	r2, r2
 8002788:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800278c:	88cc      	ldrh	r4, [r1, #6]
 800278e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8002792:	0864      	lsrs	r4, r4, #1
 8002794:	0064      	lsls	r4, r4, #1
 8002796:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800279a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800279e:	780c      	ldrb	r4, [r1, #0]
 80027a0:	b292      	uxth	r2, r2
 80027a2:	3204      	adds	r2, #4
 80027a4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80027a8:	890c      	ldrh	r4, [r1, #8]
 80027aa:	0864      	lsrs	r4, r4, #1
 80027ac:	0064      	lsls	r4, r4, #1
 80027ae:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 80027b2:	784a      	ldrb	r2, [r1, #1]
 80027b4:	780c      	ldrb	r4, [r1, #0]
 80027b6:	2a00      	cmp	r2, #0
 80027b8:	d147      	bne.n	800284a <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027ba:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80027be:	0455      	lsls	r5, r2, #17
 80027c0:	d508      	bpl.n	80027d4 <USB_ActivateEndpoint+0x1e8>
 80027c2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80027c6:	4013      	ands	r3, r2
 80027c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027d4:	780a      	ldrb	r2, [r1, #0]
 80027d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027da:	065c      	lsls	r4, r3, #25
 80027dc:	d50b      	bpl.n	80027f6 <USB_ActivateEndpoint+0x20a>
 80027de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e6:	051b      	lsls	r3, r3, #20
 80027e8:	0d1b      	lsrs	r3, r3, #20
 80027ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80027f6:	780a      	ldrb	r2, [r1, #0]
 80027f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002800:	051b      	lsls	r3, r3, #20
 8002802:	0d1b      	lsrs	r3, r3, #20
 8002804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002810:	f248 0280 	movw	r2, #32896	; 0x8080
 8002814:	780c      	ldrb	r4, [r1, #0]
 8002816:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800281a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800282a:	4313      	orrs	r3, r2
 800282c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002830:	7809      	ldrb	r1, [r1, #0]
 8002832:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	4313      	orrs	r3, r2
 8002844:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002848:	e725      	b.n	8002696 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800284a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800284e:	0452      	lsls	r2, r2, #17
 8002850:	d508      	bpl.n	8002864 <USB_ActivateEndpoint+0x278>
 8002852:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002856:	4013      	ands	r3, r2
 8002858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800285c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002860:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002864:	780a      	ldrb	r2, [r1, #0]
 8002866:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800286a:	065b      	lsls	r3, r3, #25
 800286c:	d50b      	bpl.n	8002886 <USB_ActivateEndpoint+0x29a>
 800286e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	051b      	lsls	r3, r3, #20
 8002878:	0d1b      	lsrs	r3, r3, #20
 800287a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002882:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002886:	780a      	ldrb	r2, [r1, #0]
 8002888:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800288c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002890:	051b      	lsls	r3, r3, #20
 8002892:	0d1b      	lsrs	r3, r3, #20
 8002894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028a0:	f248 0280 	movw	r2, #32896	; 0x8080
 80028a4:	780c      	ldrb	r4, [r1, #0]
 80028a6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80028aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028bc:	7809      	ldrb	r1, [r1, #0]
 80028be:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80028c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	e7b8      	b.n	800283e <USB_ActivateEndpoint+0x252>
 80028cc:	ffff8000 	.word	0xffff8000

080028d0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028d0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 80028d2:	7a8c      	ldrb	r4, [r1, #10]
 80028d4:	784a      	ldrb	r2, [r1, #1]
 80028d6:	780b      	ldrb	r3, [r1, #0]
 80028d8:	bbcc      	cbnz	r4, 800294e <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 80028da:	b302      	cbz	r2, 800291e <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80028e0:	0652      	lsls	r2, r2, #25
 80028e2:	d50b      	bpl.n	80028fc <USB_DeactivateEndpoint+0x2c>
 80028e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80028e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028ec:	0512      	lsls	r2, r2, #20
 80028ee:	0d12      	lsrs	r2, r2, #20
 80028f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80028f8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80028fc:	780a      	ldrb	r2, [r1, #0]
 80028fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	0c1b      	lsrs	r3, r3, #16
 800290e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002916:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800291a:	2000      	movs	r0, #0
 800291c:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800291e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002922:	0454      	lsls	r4, r2, #17
 8002924:	d50b      	bpl.n	800293e <USB_DeactivateEndpoint+0x6e>
 8002926:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800292a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800292e:	0512      	lsls	r2, r2, #20
 8002930:	0d12      	lsrs	r2, r2, #20
 8002932:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800293a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800293e:	780a      	ldrb	r2, [r1, #0]
 8002940:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294c:	e7dd      	b.n	800290a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 800294e:	2a00      	cmp	r2, #0
 8002950:	d148      	bne.n	80029e4 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002952:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002956:	0452      	lsls	r2, r2, #17
 8002958:	d50b      	bpl.n	8002972 <USB_DeactivateEndpoint+0xa2>
 800295a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800295e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002962:	0512      	lsls	r2, r2, #20
 8002964:	0d12      	lsrs	r2, r2, #20
 8002966:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800296a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800296e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002972:	780a      	ldrb	r2, [r1, #0]
 8002974:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002978:	065c      	lsls	r4, r3, #25
 800297a:	d50b      	bpl.n	8002994 <USB_DeactivateEndpoint+0xc4>
 800297c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002980:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002984:	051b      	lsls	r3, r3, #20
 8002986:	0d1b      	lsrs	r3, r3, #20
 8002988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002990:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002994:	780a      	ldrb	r2, [r1, #0]
 8002996:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800299a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800299e:	051b      	lsls	r3, r3, #20
 80029a0:	0d1b      	lsrs	r3, r3, #20
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029ae:	f248 0280 	movw	r2, #32896	; 0x8080
 80029b2:	780c      	ldrb	r4, [r1, #0]
 80029b4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80029b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029ca:	7809      	ldrb	r1, [r1, #0]
 80029cc:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80029d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	0c1b      	lsrs	r3, r3, #16
 80029dc:	4313      	orrs	r3, r2
 80029de:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80029e2:	e79a      	b.n	800291a <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80029e8:	0452      	lsls	r2, r2, #17
 80029ea:	d50b      	bpl.n	8002a04 <USB_DeactivateEndpoint+0x134>
 80029ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80029f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029f4:	0512      	lsls	r2, r2, #20
 80029f6:	0d12      	lsrs	r2, r2, #20
 80029f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a00:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a04:	780a      	ldrb	r2, [r1, #0]
 8002a06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a0a:	065b      	lsls	r3, r3, #25
 8002a0c:	d50b      	bpl.n	8002a26 <USB_DeactivateEndpoint+0x156>
 8002a0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a16:	051b      	lsls	r3, r3, #20
 8002a18:	0d1b      	lsrs	r3, r3, #20
 8002a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002a26:	780a      	ldrb	r2, [r1, #0]
 8002a28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	0d1b      	lsrs	r3, r3, #20
 8002a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a40:	f248 0280 	movw	r2, #32896	; 0x8080
 8002a44:	780c      	ldrb	r4, [r1, #0]
 8002a46:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a52:	041b      	lsls	r3, r3, #16
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a5c:	7809      	ldrb	r1, [r1, #0]
 8002a5e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	e7b5      	b.n	80029d8 <USB_DeactivateEndpoint+0x108>

08002a6c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002a6c:	780a      	ldrb	r2, [r1, #0]
 8002a6e:	b98a      	cbnz	r2, 8002a94 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002a70:	8803      	ldrh	r3, [r0, #0]
 8002a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a82:	f083 0310 	eor.w	r3, r3, #16
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8e:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002a90:	2000      	movs	r0, #0
 8002a92:	4770      	bx	lr
    if (ep->is_in)
 8002a94:	784b      	ldrb	r3, [r1, #1]
 8002a96:	b183      	cbz	r3, 8002aba <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002a98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002ab8:	e7ea      	b.n	8002a90 <USB_EPSetStall+0x24>
 8002aba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ace:	e7ed      	b.n	8002aac <USB_EPSetStall+0x40>

08002ad0 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002ad0:	784b      	ldrb	r3, [r1, #1]
 8002ad2:	780a      	ldrb	r2, [r1, #0]
 8002ad4:	b313      	cbz	r3, 8002b1c <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ad6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ada:	065b      	lsls	r3, r3, #25
 8002adc:	d50b      	bpl.n	8002af6 <USB_EPClearStall+0x26>
 8002ade:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae6:	051b      	lsls	r3, r3, #20
 8002ae8:	0d1b      	lsrs	r3, r3, #20
 8002aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002af2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002af6:	780a      	ldrb	r2, [r1, #0]
 8002af8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002b18:	2000      	movs	r0, #0
 8002b1a:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b20:	045b      	lsls	r3, r3, #17
 8002b22:	d50b      	bpl.n	8002b3c <USB_EPClearStall+0x6c>
 8002b24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b2c:	051b      	lsls	r3, r3, #20
 8002b2e:	0d1b      	lsrs	r3, r3, #20
 8002b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b3c:	780a      	ldrb	r2, [r1, #0]
 8002b3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b52:	e7db      	b.n	8002b0c <USB_EPClearStall+0x3c>

08002b54 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002b54:	b911      	cbnz	r1, 8002b5c <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	4770      	bx	lr

08002b60 <USB_DevConnect>:
 8002b60:	2000      	movs	r0, #0
 8002b62:	4770      	bx	lr

08002b64 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b64:	2000      	movs	r0, #0
 8002b66:	4770      	bx	lr

08002b68 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002b68:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002b6c:	b280      	uxth	r0, r0
 8002b6e:	4770      	bx	lr

08002b70 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b70:	2000      	movs	r0, #0
 8002b72:	4770      	bx	lr

08002b74 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002b74:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002b76:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002b78:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002b7a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002b7e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002b80:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002b84:	42a3      	cmp	r3, r4
 8002b86:	d100      	bne.n	8002b8a <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002b88:	bd10      	pop	{r4, pc}
 8002b8a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8002b8e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002b92:	3401      	adds	r4, #1
 8002b94:	e7f6      	b.n	8002b84 <USB_WritePMA+0x10>
	...

08002b98 <USB_EPStartXfer>:
{
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8002b9c:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8002b9e:	7849      	ldrb	r1, [r1, #1]
{
 8002ba0:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002ba2:	2901      	cmp	r1, #1
 8002ba4:	6933      	ldr	r3, [r6, #16]
 8002ba6:	7ab0      	ldrb	r0, [r6, #10]
 8002ba8:	d166      	bne.n	8002c78 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002baa:	429a      	cmp	r2, r3
 8002bac:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8002bae:	bf9b      	ittet	ls
 8002bb0:	2300      	movls	r3, #0
 8002bb2:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002bb4:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8002bb6:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002bb8:	bf88      	it	hi
 8002bba:	61b2      	strhi	r2, [r6, #24]
 8002bbc:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8002bbe:	bb10      	cbnz	r0, 8002c06 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002bc0:	88b2      	ldrh	r2, [r6, #4]
 8002bc2:	6971      	ldr	r1, [r6, #20]
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f7ff ffd5 	bl	8002b74 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002bca:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002bce:	7832      	ldrb	r2, [r6, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bd8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002bdc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002be0:	7832      	ldrb	r2, [r6, #0]
 8002be2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfe:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002c02:	2000      	movs	r0, #0
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002c06:	7832      	ldrb	r2, [r6, #0]
 8002c08:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002c0c:	00d2      	lsls	r2, r2, #3
 8002c0e:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c12:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002c16:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002c18:	d01a      	beq.n	8002c50 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c1a:	3102      	adds	r1, #2
 8002c1c:	440a      	add	r2, r1
 8002c1e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002c22:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8002c26:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002c28:	6971      	ldr	r1, [r6, #20]
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f7ff ffa2 	bl	8002b74 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c30:	7873      	ldrb	r3, [r6, #1]
 8002c32:	7832      	ldrb	r2, [r6, #0]
 8002c34:	b99b      	cbnz	r3, 8002c5e <USB_EPStartXfer+0xc6>
 8002c36:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3e:	051b      	lsls	r3, r3, #20
 8002c40:	0d1b      	lsrs	r3, r3, #20
 8002c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c4a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002c4e:	e7c7      	b.n	8002be0 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c50:	440a      	add	r2, r1
 8002c52:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002c56:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8002c5a:	88f2      	ldrh	r2, [r6, #6]
 8002c5c:	e7e4      	b.n	8002c28 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d1be      	bne.n	8002be0 <USB_EPStartXfer+0x48>
 8002c62:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c6a:	051b      	lsls	r3, r3, #20
 8002c6c:	0d1b      	lsrs	r3, r3, #20
 8002c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c76:	e7e8      	b.n	8002c4a <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002c78:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8002c7a:	bf93      	iteet	ls
 8002c7c:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8002c7e:	1ad2      	subhi	r2, r2, r3
 8002c80:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002c82:	61b3      	strls	r3, [r6, #24]
 8002c84:	bf98      	it	ls
 8002c86:	4613      	movls	r3, r2
 8002c88:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8002c8a:	bb70      	cbnz	r0, 8002cea <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002c8c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002c90:	2b3e      	cmp	r3, #62	; 0x3e
 8002c92:	b289      	uxth	r1, r1
 8002c94:	f101 0106 	add.w	r1, r1, #6
 8002c98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002c9c:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002ca0:	d918      	bls.n	8002cd4 <USB_EPStartXfer+0x13c>
 8002ca2:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002ca6:	06db      	lsls	r3, r3, #27
 8002ca8:	bf04      	itt	eq
 8002caa:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8002cae:	b29a      	uxtheq	r2, r3
 8002cb0:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <USB_EPStartXfer+0x1fc>)
 8002cb2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cbc:	7832      	ldrb	r2, [r6, #0]
 8002cbe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002cd2:	e790      	b.n	8002bf6 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002cd4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002cd8:	07dc      	lsls	r4, r3, #31
 8002cda:	bf44      	itt	mi
 8002cdc:	3201      	addmi	r2, #1
 8002cde:	b292      	uxthmi	r2, r2
 8002ce0:	0292      	lsls	r2, r2, #10
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002ce8:	e7e8      	b.n	8002cbc <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002cea:	b9b9      	cbnz	r1, 8002d1c <USB_EPStartXfer+0x184>
 8002cec:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002cf0:	2b3e      	cmp	r3, #62	; 0x3e
 8002cf2:	b289      	uxth	r1, r1
 8002cf4:	f101 0102 	add.w	r1, r1, #2
 8002cf8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002cfc:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002d00:	d928      	bls.n	8002d54 <USB_EPStartXfer+0x1bc>
 8002d02:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8002d06:	06da      	lsls	r2, r3, #27
 8002d08:	bf04      	itt	eq
 8002d0a:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8002d0e:	b290      	uxtheq	r0, r2
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <USB_EPStartXfer+0x1fc>)
 8002d12:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002d16:	b292      	uxth	r2, r2
 8002d18:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8002d1c:	7872      	ldrb	r2, [r6, #1]
 8002d1e:	7831      	ldrb	r1, [r6, #0]
 8002d20:	bb5a      	cbnz	r2, 8002d7a <USB_EPStartXfer+0x1e2>
 8002d22:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d26:	2b3e      	cmp	r3, #62	; 0x3e
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	f102 0206 	add.w	r2, r2, #6
 8002d2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002d32:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002d36:	d915      	bls.n	8002d64 <USB_EPStartXfer+0x1cc>
 8002d38:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8002d3c:	06dc      	lsls	r4, r3, #27
 8002d3e:	bf04      	itt	eq
 8002d40:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8002d44:	b299      	uxtheq	r1, r3
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <USB_EPStartXfer+0x1fc>)
 8002d48:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8002d52:	e7b3      	b.n	8002cbc <USB_EPStartXfer+0x124>
 8002d54:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002d58:	07d8      	lsls	r0, r3, #31
 8002d5a:	bf44      	itt	mi
 8002d5c:	3201      	addmi	r2, #1
 8002d5e:	b292      	uxthmi	r2, r2
 8002d60:	0292      	lsls	r2, r2, #10
 8002d62:	e7d8      	b.n	8002d16 <USB_EPStartXfer+0x17e>
 8002d64:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002d68:	07db      	lsls	r3, r3, #31
 8002d6a:	bf44      	itt	mi
 8002d6c:	3101      	addmi	r1, #1
 8002d6e:	b289      	uxthmi	r1, r1
 8002d70:	0289      	lsls	r1, r1, #10
 8002d72:	b289      	uxth	r1, r1
 8002d74:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002d78:	e7a0      	b.n	8002cbc <USB_EPStartXfer+0x124>
 8002d7a:	2a01      	cmp	r2, #1
 8002d7c:	d19e      	bne.n	8002cbc <USB_EPStartXfer+0x124>
 8002d7e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d82:	b292      	uxth	r2, r2
 8002d84:	3202      	adds	r2, #2
 8002d86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002d8a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002d8e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002d92:	e793      	b.n	8002cbc <USB_EPStartXfer+0x124>
 8002d94:	ffff8000 	.word	0xffff8000

08002d98 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002d98:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002d9a:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002d9c:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d9e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002da2:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002da4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	d100      	bne.n	8002dae <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002dac:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002dae:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002db2:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002db6:	3401      	adds	r4, #1
 8002db8:	e7f6      	b.n	8002da8 <USB_ReadPMA+0x10>

08002dba <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002dba:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002dbe:	b11b      	cbz	r3, 8002dc8 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002dc6:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002dc8:	2002      	movs	r0, #2
  }
}
 8002dca:	4770      	bx	lr

08002dcc <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002dcc:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002dd0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002dd2:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002dd6:	b15b      	cbz	r3, 8002df0 <USBD_CDC_EP0_RxReady+0x24>
 8002dd8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002ddc:	28ff      	cmp	r0, #255	; 0xff
 8002dde:	d007      	beq.n	8002df0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002de6:	4621      	mov	r1, r4
 8002de8:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002dea:	23ff      	movs	r3, #255	; 0xff
 8002dec:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002df0:	2000      	movs	r0, #0
 8002df2:	bd10      	pop	{r4, pc}

08002df4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002df4:	2343      	movs	r3, #67	; 0x43
 8002df6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002df8:	4800      	ldr	r0, [pc, #0]	; (8002dfc <USBD_CDC_GetFSCfgDesc+0x8>)
 8002dfa:	4770      	bx	lr
 8002dfc:	20000040 	.word	0x20000040

08002e00 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002e00:	2343      	movs	r3, #67	; 0x43
 8002e02:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002e04:	4800      	ldr	r0, [pc, #0]	; (8002e08 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002e06:	4770      	bx	lr
 8002e08:	20000084 	.word	0x20000084

08002e0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002e0c:	2343      	movs	r3, #67	; 0x43
 8002e0e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002e10:	4800      	ldr	r0, [pc, #0]	; (8002e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002e12:	4770      	bx	lr
 8002e14:	200000d4 	.word	0x200000d4

08002e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002e18:	230a      	movs	r3, #10
 8002e1a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002e1c:	4800      	ldr	r0, [pc, #0]	; (8002e20 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002e1e:	4770      	bx	lr
 8002e20:	200000c8 	.word	0x200000c8

08002e24 <USBD_CDC_DataOut>:
{      
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002e28:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002e2c:	f001 f858 	bl	8003ee0 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002e30:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002e34:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002e38:	b14b      	cbz	r3, 8002e4e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002e3a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002e3e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002e48:	4798      	blx	r3
    return USBD_OK;
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002e4e:	2002      	movs	r0, #2
}
 8002e50:	bd38      	pop	{r3, r4, r5, pc}
	...

08002e54 <USBD_CDC_Setup>:
{
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e56:	780f      	ldrb	r7, [r1, #0]
{
 8002e58:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e5a:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002e5e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e60:	d023      	beq.n	8002eaa <USBD_CDC_Setup+0x56>
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d119      	bne.n	8002e9a <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002e66:	88ca      	ldrh	r2, [r1, #6]
 8002e68:	784b      	ldrb	r3, [r1, #1]
 8002e6a:	b1c2      	cbz	r2, 8002e9e <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002e6c:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002e6e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002e72:	d50b      	bpl.n	8002e8c <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002e74:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002e78:	4618      	mov	r0, r3
 8002e7a:	688f      	ldr	r7, [r1, #8]
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002e80:	4629      	mov	r1, r5
 8002e82:	4630      	mov	r0, r6
 8002e84:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8002e86:	f000 fb8a 	bl	800359e <USBD_CtlSendData>
      break;
 8002e8a:	e006      	b.n	8002e9a <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002e8c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002e90:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002e94:	4629      	mov	r1, r5
 8002e96:	f000 fb97 	bl	80035c8 <USBD_CtlPrepareRx>
}
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002e9e:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002ea2:	6884      	ldr	r4, [r0, #8]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	47a0      	blx	r4
 8002ea8:	e7f7      	b.n	8002e9a <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002eaa:	784b      	ldrb	r3, [r1, #1]
 8002eac:	2b0a      	cmp	r3, #10
 8002eae:	d1f4      	bne.n	8002e9a <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4901      	ldr	r1, [pc, #4]	; (8002eb8 <USBD_CDC_Setup+0x64>)
 8002eb4:	e7e7      	b.n	8002e86 <USBD_CDC_Setup+0x32>
 8002eb6:	bf00      	nop
 8002eb8:	200007ec 	.word	0x200007ec

08002ebc <USBD_CDC_DeInit>:
{
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002ec0:	2181      	movs	r1, #129	; 0x81
 8002ec2:	f000 ffa9 	bl	8003e18 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 ffa5 	bl	8003e18 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002ece:	2182      	movs	r1, #130	; 0x82
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f000 ffa1 	bl	8003e18 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002ed6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002eda:	b153      	cbz	r3, 8002ef2 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002edc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002ee4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002ee8:	f001 f804 	bl	8003ef4 <USBD_static_free>
    pdev->pClassData = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	bd10      	pop	{r4, pc}

08002ef6 <USBD_CDC_Init>:
{
 8002ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002ef8:	7c03      	ldrb	r3, [r0, #16]
{
 8002efa:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002efc:	bb7b      	cbnz	r3, 8002f5e <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f02:	2202      	movs	r2, #2
 8002f04:	2181      	movs	r1, #129	; 0x81
 8002f06:	f000 ff77 	bl	8003df8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002f0e:	2202      	movs	r2, #2
 8002f10:	2101      	movs	r1, #1
 8002f12:	4620      	mov	r0, r4
 8002f14:	f000 ff70 	bl	8003df8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002f18:	2308      	movs	r3, #8
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	2182      	movs	r1, #130	; 0x82
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f000 ff6a 	bl	8003df8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002f24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002f28:	f000 ffe0 	bl	8003eec <USBD_static_malloc>
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002f32:	b320      	cbz	r0, 8002f7e <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8002f34:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002f36:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002f3e:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002f40:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002f44:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002f48:	b987      	cbnz	r7, 8002f6c <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f4e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002f52:	2101      	movs	r1, #1
 8002f54:	4620      	mov	r0, r4
 8002f56:	f000 ffb5 	bl	8003ec4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002f5e:	2340      	movs	r3, #64	; 0x40
 8002f60:	2202      	movs	r2, #2
 8002f62:	2181      	movs	r1, #129	; 0x81
 8002f64:	f000 ff48 	bl	8003df8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	e7d0      	b.n	8002f0e <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002f6c:	2340      	movs	r3, #64	; 0x40
 8002f6e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002f72:	2101      	movs	r1, #1
 8002f74:	4620      	mov	r0, r4
 8002f76:	f000 ffa5 	bl	8003ec4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002f7e:	2001      	movs	r0, #1
}
 8002f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f82 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002f82:	b119      	cbz	r1, 8002f8c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002f84:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002f88:	2000      	movs	r0, #0
 8002f8a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002f8c:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002f8e:	4770      	bx	lr

08002f90 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f90:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002f94:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002f96:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002f9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002f9e:	4770      	bx	lr

08002fa0 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002fa0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002fa4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002fa6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002faa:	4770      	bx	lr

08002fac <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002fac:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002fb0:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8002fb2:	b172      	cbz	r2, 8002fd2 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002fb4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002fb8:	2301      	movs	r3, #1
 8002fba:	b964      	cbnz	r4, 8002fd6 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002fbc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002fc0:	2181      	movs	r1, #129	; 0x81
 8002fc2:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002fc6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002fca:	f000 ff6d 	bl	8003ea8 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8002fce:	4620      	mov	r0, r4
 8002fd0:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002fd2:	2002      	movs	r0, #2
 8002fd4:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002fd6:	4618      	mov	r0, r3
  }
}
 8002fd8:	bd10      	pop	{r4, pc}

08002fda <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002fda:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002fde:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002fe0:	b162      	cbz	r2, 8002ffc <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002fe2:	7c04      	ldrb	r4, [r0, #16]
 8002fe4:	b944      	cbnz	r4, 8002ff8 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002fea:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002fee:	2101      	movs	r1, #1
 8002ff0:	f000 ff68 	bl	8003ec4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002ff8:	2340      	movs	r3, #64	; 0x40
 8002ffa:	e7f6      	b.n	8002fea <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002ffc:	2002      	movs	r0, #2
  }
}
 8002ffe:	bd10      	pop	{r4, pc}

08003000 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003000:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003002:	b180      	cbz	r0, 8003026 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003004:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003008:	b113      	cbz	r3, 8003010 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800300a:	2300      	movs	r3, #0
 800300c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003010:	b109      	cbz	r1, 8003016 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003012:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003016:	2301      	movs	r3, #1
  pdev->id = id;
 8003018:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800301a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800301e:	f000 fe95 	bl	8003d4c <USBD_LL_Init>
  
  return USBD_OK; 
 8003022:	2000      	movs	r0, #0
 8003024:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003026:	2002      	movs	r0, #2
}
 8003028:	bd08      	pop	{r3, pc}

0800302a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800302a:	b119      	cbz	r1, 8003034 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800302c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003030:	2000      	movs	r0, #0
 8003032:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003034:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003036:	4770      	bx	lr

08003038 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003038:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800303a:	f000 fecf 	bl	8003ddc <USBD_LL_Start>
  
  return USBD_OK;  
}
 800303e:	2000      	movs	r0, #0
 8003040:	bd08      	pop	{r3, pc}

08003042 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003042:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003044:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003048:	b90b      	cbnz	r3, 800304e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800304a:	2002      	movs	r0, #2
 800304c:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4798      	blx	r3
 8003052:	2800      	cmp	r0, #0
 8003054:	d1f9      	bne.n	800304a <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003056:	bd08      	pop	{r3, pc}

08003058 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003058:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800305a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4798      	blx	r3
  return USBD_OK;
}
 8003062:	2000      	movs	r0, #0
 8003064:	bd08      	pop	{r3, pc}

08003066 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003066:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003068:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 800306c:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800306e:	4628      	mov	r0, r5
 8003070:	f000 fa65 	bl	800353e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003074:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003076:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800307a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800307e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003082:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003086:	f001 031f 	and.w	r3, r1, #31
 800308a:	2b01      	cmp	r3, #1
 800308c:	d00e      	beq.n	80030ac <USBD_LL_SetupStage+0x46>
 800308e:	d307      	bcc.n	80030a0 <USBD_LL_SetupStage+0x3a>
 8003090:	2b02      	cmp	r3, #2
 8003092:	d010      	beq.n	80030b6 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003094:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003098:	4620      	mov	r0, r4
 800309a:	f000 fecb 	bl	8003e34 <USBD_LL_StallEP>
    break;
 800309e:	e003      	b.n	80030a8 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80030a0:	4629      	mov	r1, r5
 80030a2:	4620      	mov	r0, r4
 80030a4:	f000 f8d6 	bl	8003254 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80030a8:	2000      	movs	r0, #0
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80030ac:	4629      	mov	r1, r5
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 f9ca 	bl	8003448 <USBD_StdItfReq>
    break;
 80030b4:	e7f8      	b.n	80030a8 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80030b6:	4629      	mov	r1, r5
 80030b8:	4620      	mov	r0, r4
 80030ba:	f000 f9dd 	bl	8003478 <USBD_StdEPReq>
    break;
 80030be:	e7f3      	b.n	80030a8 <USBD_LL_SetupStage+0x42>

080030c0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4604      	mov	r4, r0
 80030c4:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80030c6:	bb11      	cbnz	r1, 800310e <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80030c8:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d10f      	bne.n	80030f0 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80030d0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80030d4:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80030d8:	4293      	cmp	r3, r2
 80030da:	d90b      	bls.n	80030f4 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80030dc:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80030de:	429a      	cmp	r2, r3
 80030e0:	bf28      	it	cs
 80030e2:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80030e4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80030e8:	b292      	uxth	r2, r2
 80030ea:	4629      	mov	r1, r5
 80030ec:	f000 fa7b 	bl	80035e6 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80030f0:	2000      	movs	r0, #0
 80030f2:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80030f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	b123      	cbz	r3, 8003106 <USBD_LL_DataOutStage+0x46>
 80030fc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003100:	2a03      	cmp	r2, #3
 8003102:	d100      	bne.n	8003106 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003104:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003106:	4620      	mov	r0, r4
 8003108:	f000 fa75 	bl	80035f6 <USBD_CtlSendStatus>
 800310c:	e7f0      	b.n	80030f0 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800310e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0eb      	beq.n	80030f0 <USBD_LL_DataOutStage+0x30>
 8003118:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800311c:	2a03      	cmp	r2, #3
 800311e:	d1e7      	bne.n	80030f0 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003120:	4798      	blx	r3
 8003122:	e7e5      	b.n	80030f0 <USBD_LL_DataOutStage+0x30>

08003124 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	4613      	mov	r3, r2
 8003128:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800312a:	460e      	mov	r6, r1
 800312c:	2900      	cmp	r1, #0
 800312e:	d13d      	bne.n	80031ac <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003130:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003134:	2a02      	cmp	r2, #2
 8003136:	d10f      	bne.n	8003158 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003138:	69c5      	ldr	r5, [r0, #28]
 800313a:	6a02      	ldr	r2, [r0, #32]
 800313c:	4295      	cmp	r5, r2
 800313e:	d914      	bls.n	800316a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003140:	1aaa      	subs	r2, r5, r2
 8003142:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003144:	4619      	mov	r1, r3
 8003146:	b292      	uxth	r2, r2
 8003148:	f000 fa36 	bl	80035b8 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800314c:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800314e:	461a      	mov	r2, r3
 8003150:	4619      	mov	r1, r3
 8003152:	4620      	mov	r0, r4
 8003154:	f000 feb6 	bl	8003ec4 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003158:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003166:	2000      	movs	r0, #0
 8003168:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800316a:	6983      	ldr	r3, [r0, #24]
 800316c:	fbb3 f5f2 	udiv	r5, r3, r2
 8003170:	fb02 3515 	mls	r5, r2, r5, r3
 8003174:	b965      	cbnz	r5, 8003190 <USBD_LL_DataInStage+0x6c>
 8003176:	429a      	cmp	r2, r3
 8003178:	d80a      	bhi.n	8003190 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800317a:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800317e:	4293      	cmp	r3, r2
 8003180:	d206      	bcs.n	8003190 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003182:	462a      	mov	r2, r5
 8003184:	f000 fa18 	bl	80035b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003188:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800318c:	462b      	mov	r3, r5
 800318e:	e7de      	b.n	800314e <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003190:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	b12b      	cbz	r3, 80031a4 <USBD_LL_DataInStage+0x80>
 8003198:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800319c:	2a03      	cmp	r2, #3
 800319e:	d101      	bne.n	80031a4 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80031a0:	4620      	mov	r0, r4
 80031a2:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80031a4:	4620      	mov	r0, r4
 80031a6:	f000 fa31 	bl	800360c <USBD_CtlReceiveStatus>
 80031aa:	e7d5      	b.n	8003158 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80031ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0d7      	beq.n	8003166 <USBD_LL_DataInStage+0x42>
 80031b6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80031ba:	2a03      	cmp	r2, #3
 80031bc:	d1d3      	bne.n	8003166 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80031be:	4798      	blx	r3
 80031c0:	e7d1      	b.n	8003166 <USBD_LL_DataInStage+0x42>

080031c2 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80031c2:	2200      	movs	r2, #0
{
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80031c8:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80031ca:	4611      	mov	r1, r2
 80031cc:	2340      	movs	r3, #64	; 0x40
 80031ce:	f000 fe13 	bl	8003df8 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80031d2:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80031d4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80031d8:	2200      	movs	r2, #0
 80031da:	2180      	movs	r1, #128	; 0x80
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 fe0b 	bl	8003df8 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80031e8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80031ec:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80031ee:	b12b      	cbz	r3, 80031fc <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80031f0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80031f4:	7921      	ldrb	r1, [r4, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4620      	mov	r0, r4
 80031fa:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80031fc:	2000      	movs	r0, #0
 80031fe:	bd38      	pop	{r3, r4, r5, pc}

08003200 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003200:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003202:	2000      	movs	r0, #0
 8003204:	4770      	bx	lr

08003206 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003206:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800320a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800320e:	2304      	movs	r3, #4
 8003210:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003214:	2000      	movs	r0, #0
 8003216:	4770      	bx	lr

08003218 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003218:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800321c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003220:	2000      	movs	r0, #0
 8003222:	4770      	bx	lr

08003224 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003224:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003226:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800322a:	2a03      	cmp	r2, #3
 800322c:	d104      	bne.n	8003238 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800322e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	b103      	cbz	r3, 8003238 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003236:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003238:	2000      	movs	r0, #0
 800323a:	bd08      	pop	{r3, pc}

0800323c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800323c:	b510      	push	{r4, lr}
 800323e:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	f000 fdf7 	bl	8003e34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003246:	4620      	mov	r0, r4
}
 8003248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800324c:	2100      	movs	r1, #0
 800324e:	f000 bdf1 	b.w	8003e34 <USBD_LL_StallEP>
	...

08003254 <USBD_StdDevReq>:
{
 8003254:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003256:	784b      	ldrb	r3, [r1, #1]
{
 8003258:	4604      	mov	r4, r0
 800325a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800325c:	2b09      	cmp	r3, #9
 800325e:	d879      	bhi.n	8003354 <USBD_StdDevReq+0x100>
 8003260:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003264:	00e500c9 	.word	0x00e500c9
 8003268:	00d90078 	.word	0x00d90078
 800326c:	006d0078 	.word	0x006d0078
 8003270:	0078000a 	.word	0x0078000a
 8003274:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8003278:	884b      	ldrh	r3, [r1, #2]
 800327a:	0a1a      	lsrs	r2, r3, #8
 800327c:	3a01      	subs	r2, #1
 800327e:	2a06      	cmp	r2, #6
 8003280:	d868      	bhi.n	8003354 <USBD_StdDevReq+0x100>
 8003282:	e8df f002 	tbb	[pc, r2]
 8003286:	1c04      	.short	0x1c04
 8003288:	49676729 	.word	0x49676729
 800328c:	52          	.byte	0x52
 800328d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800328e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003292:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003294:	f10d 0106 	add.w	r1, sp, #6
 8003298:	7c20      	ldrb	r0, [r4, #16]
 800329a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800329c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	d067      	beq.n	8003374 <USBD_StdDevReq+0x120>
 80032a4:	88eb      	ldrh	r3, [r5, #6]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d064      	beq.n	8003374 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80032aa:	429a      	cmp	r2, r3
 80032ac:	bf28      	it	cs
 80032ae:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 80032b0:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 80032b2:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 f971 	bl	800359e <USBD_CtlSendData>
 80032bc:	e05a      	b.n	8003374 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80032be:	7c02      	ldrb	r2, [r0, #16]
 80032c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032c4:	b932      	cbnz	r2, 80032d4 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80032c8:	f10d 0006 	add.w	r0, sp, #6
 80032cc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80032ce:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80032d0:	7043      	strb	r3, [r0, #1]
 80032d2:	e7e3      	b.n	800329c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	e7f7      	b.n	80032c8 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d83a      	bhi.n	8003354 <USBD_StdDevReq+0x100>
 80032de:	e8df f003 	tbb	[pc, r3]
 80032e2:	0703      	.short	0x0703
 80032e4:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80032e8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	e7d1      	b.n	8003294 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80032f0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	e7cd      	b.n	8003294 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80032f8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	e7c9      	b.n	8003294 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003300:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	e7c5      	b.n	8003294 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003308:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	e7c1      	b.n	8003294 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003310:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	e7bd      	b.n	8003294 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003318:	7c03      	ldrb	r3, [r0, #16]
 800331a:	b9db      	cbnz	r3, 8003354 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800331c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003320:	f10d 0006 	add.w	r0, sp, #6
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	4798      	blx	r3
 8003328:	e7b8      	b.n	800329c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800332a:	7c03      	ldrb	r3, [r0, #16]
 800332c:	b993      	cbnz	r3, 8003354 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800332e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003332:	f10d 0006 	add.w	r0, sp, #6
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800333a:	2307      	movs	r3, #7
 800333c:	e7c8      	b.n	80032d0 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800333e:	888b      	ldrh	r3, [r1, #4]
 8003340:	b943      	cbnz	r3, 8003354 <USBD_StdDevReq+0x100>
 8003342:	88cb      	ldrh	r3, [r1, #6]
 8003344:	b933      	cbnz	r3, 8003354 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003346:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800334a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800334c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800334e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003352:	d103      	bne.n	800335c <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff ff71 	bl	800323c <USBD_CtlError.constprop.0>
    break;
 800335a:	e00b      	b.n	8003374 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 800335c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003360:	4629      	mov	r1, r5
 8003362:	f000 fd93 	bl	8003e8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003366:	4620      	mov	r0, r4
 8003368:	f000 f945 	bl	80035f6 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800336c:	b12d      	cbz	r5, 800337a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800336e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003370:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003374:	2000      	movs	r0, #0
 8003376:	b003      	add	sp, #12
 8003378:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800337a:	2301      	movs	r3, #1
 800337c:	e7f8      	b.n	8003370 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800337e:	7889      	ldrb	r1, [r1, #2]
 8003380:	4d30      	ldr	r5, [pc, #192]	; (8003444 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003382:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003384:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003386:	d8e5      	bhi.n	8003354 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8003388:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800338c:	2b02      	cmp	r3, #2
 800338e:	d00c      	beq.n	80033aa <USBD_StdDevReq+0x156>
 8003390:	2b03      	cmp	r3, #3
 8003392:	d1df      	bne.n	8003354 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003394:	b9b1      	cbnz	r1, 80033c4 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003396:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8003398:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800339a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 800339e:	f7ff fe5b 	bl	8003058 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80033a2:	4620      	mov	r0, r4
 80033a4:	f000 f927 	bl	80035f6 <USBD_CtlSendStatus>
 80033a8:	e7e4      	b.n	8003374 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80033aa:	2900      	cmp	r1, #0
 80033ac:	d0f9      	beq.n	80033a2 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80033ae:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80033b0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80033b2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80033b4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff fe42 	bl	8003042 <USBD_SetClassConfig>
 80033be:	2802      	cmp	r0, #2
 80033c0:	d1ef      	bne.n	80033a2 <USBD_StdDevReq+0x14e>
 80033c2:	e7c7      	b.n	8003354 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80033c4:	6841      	ldr	r1, [r0, #4]
 80033c6:	2901      	cmp	r1, #1
 80033c8:	d0eb      	beq.n	80033a2 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80033ca:	b2c9      	uxtb	r1, r1
 80033cc:	f7ff fe44 	bl	8003058 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80033d0:	7829      	ldrb	r1, [r5, #0]
 80033d2:	6061      	str	r1, [r4, #4]
 80033d4:	e7f0      	b.n	80033b8 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80033d6:	88ca      	ldrh	r2, [r1, #6]
 80033d8:	2a01      	cmp	r2, #1
 80033da:	d1bb      	bne.n	8003354 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80033dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d003      	beq.n	80033ec <USBD_StdDevReq+0x198>
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d1b5      	bne.n	8003354 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80033e8:	1d01      	adds	r1, r0, #4
 80033ea:	e764      	b.n	80032b6 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80033ec:	4601      	mov	r1, r0
 80033ee:	2300      	movs	r3, #0
 80033f0:	f841 3f08 	str.w	r3, [r1, #8]!
 80033f4:	e75f      	b.n	80032b6 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80033f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80033fa:	3b02      	subs	r3, #2
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d8a9      	bhi.n	8003354 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003400:	2301      	movs	r3, #1
 8003402:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003404:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003408:	b10b      	cbz	r3, 800340e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800340a:	2303      	movs	r3, #3
 800340c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800340e:	2202      	movs	r2, #2
 8003410:	f104 010c 	add.w	r1, r4, #12
 8003414:	e74f      	b.n	80032b6 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003416:	884b      	ldrh	r3, [r1, #2]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d1ab      	bne.n	8003374 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800341c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003420:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003424:	4629      	mov	r1, r5
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4620      	mov	r0, r4
 800342a:	4798      	blx	r3
 800342c:	e7b9      	b.n	80033a2 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800342e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003432:	3b02      	subs	r3, #2
 8003434:	2b01      	cmp	r3, #1
 8003436:	d88d      	bhi.n	8003354 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003438:	884b      	ldrh	r3, [r1, #2]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d19a      	bne.n	8003374 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800343e:	2300      	movs	r3, #0
 8003440:	e7ec      	b.n	800341c <USBD_StdDevReq+0x1c8>
 8003442:	bf00      	nop
 8003444:	200007ed 	.word	0x200007ed

08003448 <USBD_StdItfReq>:
{
 8003448:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800344a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 800344e:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8003450:	2b03      	cmp	r3, #3
{
 8003452:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003454:	d10d      	bne.n	8003472 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003456:	790b      	ldrb	r3, [r1, #4]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d80a      	bhi.n	8003472 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800345c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003464:	88eb      	ldrh	r3, [r5, #6]
 8003466:	b913      	cbnz	r3, 800346e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003468:	4620      	mov	r0, r4
 800346a:	f000 f8c4 	bl	80035f6 <USBD_CtlSendStatus>
}
 800346e:	2000      	movs	r0, #0
 8003470:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003472:	f7ff fee3 	bl	800323c <USBD_CtlError.constprop.0>
    break;
 8003476:	e7fa      	b.n	800346e <USBD_StdItfReq+0x26>

08003478 <USBD_StdEPReq>:
{
 8003478:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800347a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800347c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800347e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003482:	2a20      	cmp	r2, #32
{
 8003484:	4604      	mov	r4, r0
 8003486:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003488:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800348a:	d105      	bne.n	8003498 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800348c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4798      	blx	r3
}
 8003494:	2000      	movs	r0, #0
 8003496:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003498:	784a      	ldrb	r2, [r1, #1]
 800349a:	2a01      	cmp	r2, #1
 800349c:	d01c      	beq.n	80034d8 <USBD_StdEPReq+0x60>
 800349e:	d32a      	bcc.n	80034f6 <USBD_StdEPReq+0x7e>
 80034a0:	2a03      	cmp	r2, #3
 80034a2:	d1f7      	bne.n	8003494 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80034a4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80034a8:	2a02      	cmp	r2, #2
 80034aa:	d040      	beq.n	800352e <USBD_StdEPReq+0xb6>
 80034ac:	2a03      	cmp	r2, #3
 80034ae:	d002      	beq.n	80034b6 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80034b0:	f7ff fec4 	bl	800323c <USBD_CtlError.constprop.0>
      break;
 80034b4:	e7ee      	b.n	8003494 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80034b6:	884a      	ldrh	r2, [r1, #2]
 80034b8:	b922      	cbnz	r2, 80034c4 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80034ba:	065e      	lsls	r6, r3, #25
 80034bc:	d002      	beq.n	80034c4 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80034be:	4619      	mov	r1, r3
 80034c0:	f000 fcb8 	bl	8003e34 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80034c4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80034c8:	4629      	mov	r1, r5
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4620      	mov	r0, r4
 80034ce:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80034d0:	4620      	mov	r0, r4
 80034d2:	f000 f890 	bl	80035f6 <USBD_CtlSendStatus>
 80034d6:	e7dd      	b.n	8003494 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80034d8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80034dc:	2a02      	cmp	r2, #2
 80034de:	d026      	beq.n	800352e <USBD_StdEPReq+0xb6>
 80034e0:	2a03      	cmp	r2, #3
 80034e2:	d1e5      	bne.n	80034b0 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80034e4:	884a      	ldrh	r2, [r1, #2]
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	d1d4      	bne.n	8003494 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80034ea:	0659      	lsls	r1, r3, #25
 80034ec:	d0f0      	beq.n	80034d0 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80034ee:	4619      	mov	r1, r3
 80034f0:	f000 fcae 	bl	8003e50 <USBD_LL_ClearStallEP>
 80034f4:	e7e6      	b.n	80034c4 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80034f6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80034fa:	2a02      	cmp	r2, #2
 80034fc:	d017      	beq.n	800352e <USBD_StdEPReq+0xb6>
 80034fe:	2a03      	cmp	r2, #3
 8003500:	d1d6      	bne.n	80034b0 <USBD_StdEPReq+0x38>
 8003502:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003506:	f016 0f80 	tst.w	r6, #128	; 0x80
 800350a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800350e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003510:	bf14      	ite	ne
 8003512:	3514      	addne	r5, #20
 8003514:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003518:	f000 fca8 	bl	8003e6c <USBD_LL_IsStallEP>
 800351c:	b168      	cbz	r0, 800353a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800351e:	2301      	movs	r3, #1
 8003520:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003522:	2202      	movs	r2, #2
 8003524:	4629      	mov	r1, r5
 8003526:	4620      	mov	r0, r4
 8003528:	f000 f839 	bl	800359e <USBD_CtlSendData>
      break;
 800352c:	e7b2      	b.n	8003494 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800352e:	065a      	lsls	r2, r3, #25
 8003530:	d0b0      	beq.n	8003494 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003532:	4619      	mov	r1, r3
 8003534:	f000 fc7e 	bl	8003e34 <USBD_LL_StallEP>
 8003538:	e7ac      	b.n	8003494 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800353a:	6028      	str	r0, [r5, #0]
 800353c:	e7f1      	b.n	8003522 <USBD_StdEPReq+0xaa>

0800353e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800353e:	780b      	ldrb	r3, [r1, #0]
 8003540:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003542:	784b      	ldrb	r3, [r1, #1]
 8003544:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003546:	78ca      	ldrb	r2, [r1, #3]
 8003548:	788b      	ldrb	r3, [r1, #2]
 800354a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800354e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003550:	794a      	ldrb	r2, [r1, #5]
 8003552:	790b      	ldrb	r3, [r1, #4]
 8003554:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003558:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800355a:	79ca      	ldrb	r2, [r1, #7]
 800355c:	798b      	ldrb	r3, [r1, #6]
 800355e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003562:	80c3      	strh	r3, [r0, #6]
 8003564:	4770      	bx	lr

08003566 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003566:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003568:	b188      	cbz	r0, 800358e <USBD_GetString+0x28>
 800356a:	4605      	mov	r5, r0
 800356c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800356e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2c00      	cmp	r4, #0
 8003576:	d1f9      	bne.n	800356c <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	3302      	adds	r3, #2
 800357c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800357e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003580:	2303      	movs	r3, #3
 8003582:	704b      	strb	r3, [r1, #1]
 8003584:	2302      	movs	r3, #2
 8003586:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8003588:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800358c:	b905      	cbnz	r5, 8003590 <USBD_GetString+0x2a>
 800358e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	54cd      	strb	r5, [r1, r3]
 8003594:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8003596:	3302      	adds	r3, #2
 8003598:	b2db      	uxtb	r3, r3
 800359a:	548c      	strb	r4, [r1, r2]
 800359c:	e7f4      	b.n	8003588 <USBD_GetString+0x22>

0800359e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800359e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80035a0:	2202      	movs	r2, #2
{
 80035a2:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80035a4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80035a8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80035aa:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80035ac:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80035ae:	2100      	movs	r1, #0
 80035b0:	f000 fc7a 	bl	8003ea8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80035b4:	2000      	movs	r0, #0
 80035b6:	bd10      	pop	{r4, pc}

080035b8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80035b8:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80035ba:	4613      	mov	r3, r2
 80035bc:	460a      	mov	r2, r1
 80035be:	2100      	movs	r1, #0
 80035c0:	f000 fc72 	bl	8003ea8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80035c4:	2000      	movs	r0, #0
 80035c6:	bd08      	pop	{r3, pc}

080035c8 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80035c8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80035ca:	2203      	movs	r2, #3
{
 80035cc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80035ce:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80035d2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80035d6:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80035d8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80035dc:	2100      	movs	r1, #0
 80035de:	f000 fc71 	bl	8003ec4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80035e2:	2000      	movs	r0, #0
 80035e4:	bd10      	pop	{r4, pc}

080035e6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80035e6:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80035e8:	4613      	mov	r3, r2
 80035ea:	460a      	mov	r2, r1
 80035ec:	2100      	movs	r1, #0
 80035ee:	f000 fc69 	bl	8003ec4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80035f2:	2000      	movs	r0, #0
 80035f4:	bd08      	pop	{r3, pc}

080035f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80035f6:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80035f8:	2304      	movs	r3, #4
 80035fa:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80035fe:	2300      	movs	r3, #0
 8003600:	461a      	mov	r2, r3
 8003602:	4619      	mov	r1, r3
 8003604:	f000 fc50 	bl	8003ea8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003608:	2000      	movs	r0, #0
 800360a:	bd08      	pop	{r3, pc}

0800360c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800360c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800360e:	2305      	movs	r3, #5
 8003610:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003614:	2300      	movs	r3, #0
 8003616:	461a      	mov	r2, r3
 8003618:	4619      	mov	r1, r3
 800361a:	f000 fc53 	bl	8003ec4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800361e:	2000      	movs	r0, #0
 8003620:	bd08      	pop	{r3, pc}
	...

08003624 <TIM2_IRQHandler>:
#define ITM_Port32(n) (*((volatile unsigned long *)(0xE0000000+4*n)))

void TIM2_IRQHandler(void)
{
	TIM4->CR1 &=~ TIM_CR1_CEN;//Disable timers
	TIM2->CR1 &=~ TIM_CR1_CEN;
 8003624:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM4->CR1 &=~ TIM_CR1_CEN;//Disable timers
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <TIM2_IRQHandler+0x64>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
	TIM2->CR1 &=~ TIM_CR1_CEN;
 8003632:	680a      	ldr	r2, [r1, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	600a      	str	r2, [r1, #0]

	temp_cnt=TIM4->CNT;
 800363a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800363c:	4a13      	ldr	r2, [pc, #76]	; (800368c <TIM2_IRQHandler+0x68>)
 800363e:	6011      	str	r1, [r2, #0]
	if(TIM4->SR & (uint16_t)0x0001)//if timers reached TOP at the same time
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	4913      	ldr	r1, [pc, #76]	; (8003690 <TIM2_IRQHandler+0x6c>)
 8003644:	f012 0f01 	tst.w	r2, #1
 8003648:	461a      	mov	r2, r3
	{
		k++;
 800364a:	bf1e      	ittt	ne
 800364c:	680b      	ldrne	r3, [r1, #0]
 800364e:	3301      	addne	r3, #1
 8003650:	600b      	strne	r3, [r1, #0]
	}

    freq=(k*0xffff+TIM4->CNT)*2;
 8003652:	680b      	ldr	r3, [r1, #0]
 8003654:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003656:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 800365a:	4403      	add	r3, r0
 800365c:	480d      	ldr	r0, [pc, #52]	; (8003694 <TIM2_IRQHandler+0x70>)
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	6003      	str	r3, [r0, #0]
    k=0;
 8003662:	2000      	movs	r0, #0
    TIM2->SR &=~ (uint16_t)0x0001;//clear interrupt flag
 8003664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    k=0;
 8003668:	6008      	str	r0, [r1, #0]
    TIM2->SR &=~ (uint16_t)0x0001;//clear interrupt flag
 800366a:	6919      	ldr	r1, [r3, #16]
 800366c:	f021 0101 	bic.w	r1, r1, #1
 8003670:	6119      	str	r1, [r3, #16]
	TIM4->CNT=0;
 8003672:	6250      	str	r0, [r2, #36]	; 0x24
	TIM2->CNT=0;
 8003674:	6258      	str	r0, [r3, #36]	; 0x24

	TIM2->CR1 |= TIM_CR1_CEN;
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	f041 0101 	orr.w	r1, r1, #1
 800367c:	6019      	str	r1, [r3, #0]
	TIM4->CR1 |= TIM_CR1_CEN;
 800367e:	6813      	ldr	r3, [r2, #0]
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4770      	bx	lr
 8003688:	40000800 	.word	0x40000800
 800368c:	200007f8 	.word	0x200007f8
 8003690:	200007f4 	.word	0x200007f4
 8003694:	200007f0 	.word	0x200007f0

08003698 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8003698:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim4);
 800369a:	4804      	ldr	r0, [pc, #16]	; (80036ac <TIM4_IRQHandler+0x14>)
 800369c:	f7fe fd65 	bl	800216a <HAL_TIM_IRQHandler>
  k++;
 80036a0:	4a03      	ldr	r2, [pc, #12]	; (80036b0 <TIM4_IRQHandler+0x18>)
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	bd08      	pop	{r3, pc}
 80036aa:	bf00      	nop
 80036ac:	20000a58 	.word	0x20000a58
 80036b0:	200007f4 	.word	0x200007f4

080036b4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036b4:	2301      	movs	r3, #1
{
 80036b6:	b510      	push	{r4, lr}
 80036b8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036ba:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = 8;
 80036c0:	2208      	movs	r2, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036c2:	930b      	str	r3, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036c6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80036c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036cc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = 8;
 80036ce:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80036d2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d4:	f7fe f8fa 	bl	80018cc <HAL_RCC_OscConfig>
 80036d8:	b100      	cbz	r0, 80036dc <SystemClock_Config+0x28>
 80036da:	e7fe      	b.n	80036da <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036dc:	230f      	movs	r3, #15
 80036de:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036e4:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e6:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036e8:	4621      	mov	r1, r4
 80036ea:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ec:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036ee:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036f0:	f7fe fadc 	bl	8001cac <HAL_RCC_ClockConfig>
 80036f4:	b100      	cbz	r0, 80036f8 <SystemClock_Config+0x44>
 80036f6:	e7fe      	b.n	80036f6 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80036f8:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80036fa:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036fc:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80036fe:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003700:	f7fe fb7e 	bl	8001e00 <HAL_RCCEx_PeriphCLKConfig>
 8003704:	4604      	mov	r4, r0
 8003706:	b100      	cbz	r0, 800370a <SystemClock_Config+0x56>
 8003708:	e7fe      	b.n	8003708 <SystemClock_Config+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800370a:	4602      	mov	r2, r0
 800370c:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8003710:	f7fe fa68 	bl	8001be4 <HAL_RCC_MCOConfig>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003714:	f7fe fb6e 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8003718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800371c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003720:	f7fd fbe2 	bl	8000ee8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003724:	2004      	movs	r0, #4
 8003726:	f7fd fbf5 	bl	8000f14 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 800372a:	4622      	mov	r2, r4
 800372c:	2103      	movs	r1, #3
 800372e:	f04f 30ff 	mov.w	r0, #4294967295
 8003732:	f7fd fb99 	bl	8000e68 <HAL_NVIC_SetPriority>
}
 8003736:	b014      	add	sp, #80	; 0x50
 8003738:	bd10      	pop	{r4, pc}
	...

0800373c <main>:
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 8003740:	f7fd fb4a 	bl	8000dd8 <HAL_Init>
  SystemClock_Config();
 8003744:	f7ff ffb6 	bl	80036b4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003748:	4b8a      	ldr	r3, [pc, #552]	; (8003974 <main+0x238>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800374a:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800374c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_7;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 800374e:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003750:	f042 0204 	orr.w	r2, r2, #4
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003758:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800375a:	f002 0204 	and.w	r2, r2, #4
 800375e:	9200      	str	r2, [sp, #0]
 8003760:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003762:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003764:	a90f      	add	r1, sp, #60	; 0x3c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	619a      	str	r2, [r3, #24]
 800376c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376e:	4882      	ldr	r0, [pc, #520]	; (8003978 <main+0x23c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003780:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	f7fd fbd8 	bl	8000f38 <HAL_GPIO_Init>
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003788:	487c      	ldr	r0, [pc, #496]	; (800397c <main+0x240>)
 800378a:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800378c:	950f      	str	r5, [sp, #60]	; 0x3c
   GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 800378e:	9710      	str	r7, [sp, #64]	; 0x40
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003790:	9612      	str	r6, [sp, #72]	; 0x48
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003792:	f7fd fbd1 	bl	8000f38 <HAL_GPIO_Init>
  htim2.Init.Prescaler = 48000-1;
 8003796:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800379a:	f64b 337f 	movw	r3, #47999	; 0xbb7f
  htim2.Instance = TIM2;
 800379e:	4c78      	ldr	r4, [pc, #480]	; (8003980 <main+0x244>)
  htim2.Init.Prescaler = 48000-1;
 80037a0:	e884 0009 	stmia.w	r4, {r0, r3}
  htim2.Init.Period = 1500-1;
 80037a4:	f240 53db 	movw	r3, #1499	; 0x5db
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037a8:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037aa:	60a7      	str	r7, [r4, #8]
  htim2.Init.Period = 1500-1;
 80037ac:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ae:	6127      	str	r7, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b0:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037b2:	f7fe fdb5 	bl	8002320 <HAL_TIM_Base_Init>
 80037b6:	b100      	cbz	r0, 80037ba <main+0x7e>
 80037b8:	e7fe      	b.n	80037b8 <main+0x7c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ba:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037be:	a90f      	add	r1, sp, #60	; 0x3c
 80037c0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037c2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037c6:	f7fe fc12 	bl	8001fee <HAL_TIM_ConfigClockSource>
 80037ca:	b100      	cbz	r0, 80037ce <main+0x92>
 80037cc:	e7fe      	b.n	80037cc <main+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ce:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d0:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037d2:	a908      	add	r1, sp, #32
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7fe fead 	bl	8002534 <HAL_TIMEx_MasterConfigSynchronization>
 80037da:	4607      	mov	r7, r0
 80037dc:	b100      	cbz	r0, 80037e0 <main+0xa4>
 80037de:	e7fe      	b.n	80037de <main+0xa2>
  MX_USB_DEVICE_Init();
 80037e0:	f000 f9e4 	bl	8003bac <MX_USB_DEVICE_Init>
	  htim3.Init.Prescaler = 72-1;
 80037e4:	2347      	movs	r3, #71	; 0x47
	  htim3.Instance = TIM3;
 80037e6:	4c67      	ldr	r4, [pc, #412]	; (8003984 <main+0x248>)
	  htim3.Init.Prescaler = 72-1;
 80037e8:	4967      	ldr	r1, [pc, #412]	; (8003988 <main+0x24c>)
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037ea:	4620      	mov	r0, r4
	  htim3.Init.Prescaler = 72-1;
 80037ec:	e884 000a 	stmia.w	r4, {r1, r3}
	  htim3.Init.Period = 1000-1;
 80037f0:	f240 33e7 	movw	r3, #999	; 0x3e7
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f4:	60a7      	str	r7, [r4, #8]
	  htim3.Init.Period = 1000-1;
 80037f6:	60e3      	str	r3, [r4, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f8:	6127      	str	r7, [r4, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037fa:	61a5      	str	r5, [r4, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037fc:	f7fe fd90 	bl	8002320 <HAL_TIM_Base_Init>
 8003800:	b100      	cbz	r0, 8003804 <main+0xc8>
 8003802:	e7fe      	b.n	8003802 <main+0xc6>
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003804:	a908      	add	r1, sp, #32
 8003806:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003808:	f8cd 8020 	str.w	r8, [sp, #32]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800380c:	f7fe fbef 	bl	8001fee <HAL_TIM_ConfigClockSource>
 8003810:	b100      	cbz	r0, 8003814 <main+0xd8>
 8003812:	e7fe      	b.n	8003812 <main+0xd6>
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003814:	4620      	mov	r0, r4
 8003816:	f7fe fd9d 	bl	8002354 <HAL_TIM_PWM_Init>
 800381a:	b100      	cbz	r0, 800381e <main+0xe2>
 800381c:	e7fe      	b.n	800381c <main+0xe0>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800381e:	2360      	movs	r3, #96	; 0x60
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003820:	f04f 0804 	mov.w	r8, #4
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003824:	930f      	str	r3, [sp, #60]	; 0x3c
	  sConfigOC.Pulse = 500;
 8003826:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800382a:	9011      	str	r0, [sp, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800382c:	4642      	mov	r2, r8
 800382e:	a90f      	add	r1, sp, #60	; 0x3c
 8003830:	4620      	mov	r0, r4
	  sConfigOC.Pulse = 500;
 8003832:	9310      	str	r3, [sp, #64]	; 0x40
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003834:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003838:	f7fe fdd2 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 800383c:	4607      	mov	r7, r0
 800383e:	b100      	cbz	r0, 8003842 <main+0x106>
 8003840:	e7fe      	b.n	8003840 <main+0x104>
	  HAL_TIM_MspPostInit(&htim3);
 8003842:	4620      	mov	r0, r4
 8003844:	f000 f956 	bl	8003af4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003848:	4620      	mov	r0, r4
 800384a:	4641      	mov	r1, r8
 800384c:	f7fe fe36 	bl	80024bc <HAL_TIM_PWM_Start>
  htim4.Init.Prescaler = 2-1;
 8003850:	2301      	movs	r3, #1
  htim4.Instance = TIM4;
 8003852:	484e      	ldr	r0, [pc, #312]	; (800398c <main+0x250>)
 8003854:	4c4e      	ldr	r4, [pc, #312]	; (8003990 <main+0x254>)
  htim4.Init.Prescaler = 2-1;
 8003856:	6043      	str	r3, [r0, #4]
  htim4.Init.Period = 0xffff;
 8003858:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Instance = TIM4;
 800385c:	6004      	str	r4, [r0, #0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385e:	6087      	str	r7, [r0, #8]
  htim4.Init.Period = 0xffff;
 8003860:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003862:	6107      	str	r7, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003864:	6187      	str	r7, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003866:	f7fe fd5b 	bl	8002320 <HAL_TIM_Base_Init>
 800386a:	b100      	cbz	r0, 800386e <main+0x132>
 800386c:	e7fe      	b.n	800386c <main+0x130>
  TIM4->CCMR1 |=(1<<8);
 800386e:	69a3      	ldr	r3, [r4, #24]
  htim1.Init.Prescaler = 18-1;
 8003870:	4a48      	ldr	r2, [pc, #288]	; (8003994 <main+0x258>)
  TIM4->CCMR1 |=(1<<8);
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	61a3      	str	r3, [r4, #24]
  TIM4->SMCR |=7;
 8003878:	68a3      	ldr	r3, [r4, #8]
 800387a:	f043 0307 	orr.w	r3, r3, #7
 800387e:	60a3      	str	r3, [r4, #8]
  TIM4->SMCR |=(1<<6)|(1<<5);
 8003880:	68a3      	ldr	r3, [r4, #8]
 8003882:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003886:	60a3      	str	r3, [r4, #8]
  TIM4->CR1 |= TIM_CR1_CEN;
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 18-1;
 8003890:	2311      	movs	r3, #17
  htim1.Instance = TIM1;
 8003892:	4c41      	ldr	r4, [pc, #260]	; (8003998 <main+0x25c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003894:	60a0      	str	r0, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003896:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003898:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800389a:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 18-1;
 800389c:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.Period = 4-1;
 80038a0:	60e6      	str	r6, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038a2:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80038a4:	f7fe fd56 	bl	8002354 <HAL_TIM_PWM_Init>
 80038a8:	b100      	cbz	r0, 80038ac <main+0x170>
 80038aa:	e7fe      	b.n	80038aa <main+0x16e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ac:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ae:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038b0:	a902      	add	r1, sp, #8
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7fe fe3e 	bl	8002534 <HAL_TIMEx_MasterConfigSynchronization>
 80038b8:	b100      	cbz	r0, 80038bc <main+0x180>
 80038ba:	e7fe      	b.n	80038ba <main+0x17e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038bc:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80038be:	2504      	movs	r5, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038c0:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 3-1;
 80038c2:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038c4:	462a      	mov	r2, r5
 80038c6:	a908      	add	r1, sp, #32
 80038c8:	4833      	ldr	r0, [pc, #204]	; (8003998 <main+0x25c>)
  sConfigOC.Pulse = 3-1;
 80038ca:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80038cc:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038ce:	f7fe fd87 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 80038d2:	b100      	cbz	r0, 80038d6 <main+0x19a>
 80038d4:	e7fe      	b.n	80038d4 <main+0x198>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038da:	a916      	add	r1, sp, #88	; 0x58
 80038dc:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038e0:	482d      	ldr	r0, [pc, #180]	; (8003998 <main+0x25c>)
 80038e2:	f7fe fb84 	bl	8001fee <HAL_TIM_ConfigClockSource>
 80038e6:	b100      	cbz	r0, 80038ea <main+0x1ae>
 80038e8:	e7fe      	b.n	80038e8 <main+0x1ac>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038ee:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038f0:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038f2:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 80038f4:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038f6:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038f8:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038fa:	a90f      	add	r1, sp, #60	; 0x3c
 80038fc:	4826      	ldr	r0, [pc, #152]	; (8003998 <main+0x25c>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038fe:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003900:	f7fe fdf2 	bl	80024e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003904:	4604      	mov	r4, r0
 8003906:	b100      	cbz	r0, 800390a <main+0x1ce>
 8003908:	e7fe      	b.n	8003908 <main+0x1cc>
  HAL_TIM_MspPostInit(&htim1);
 800390a:	4823      	ldr	r0, [pc, #140]	; (8003998 <main+0x25c>)
 800390c:	f000 f8f2 	bl	8003af4 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8003910:	4629      	mov	r1, r5
 8003912:	4821      	ldr	r0, [pc, #132]	; (8003998 <main+0x25c>)
 8003914:	f7fe fdd2 	bl	80024bc <HAL_TIM_PWM_Start>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003918:	4622      	mov	r2, r4
 800391a:	4621      	mov	r1, r4
 800391c:	201c      	movs	r0, #28
 800391e:	f7fd faa3 	bl	8000e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003922:	201c      	movs	r0, #28
 8003924:	f7fd fad4 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003928:	4622      	mov	r2, r4
 800392a:	2101      	movs	r1, #1
 800392c:	201e      	movs	r0, #30
 800392e:	f7fd fa9b 	bl	8000e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003932:	201e      	movs	r0, #30
 8003934:	f7fd facc 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim2);
 8003938:	4811      	ldr	r0, [pc, #68]	; (8003980 <main+0x244>)
 800393a:	f7fe fb4d 	bl	8001fd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800393e:	4813      	ldr	r0, [pc, #76]	; (800398c <main+0x250>)
 8003940:	f7fe fb4a 	bl	8001fd8 <HAL_TIM_Base_Start_IT>
  HAL_Delay(500);
 8003944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003948:	f7fd fa6a 	bl	8000e20 <HAL_Delay>
	USBsend("This device displays frequency of signal from PB7 Pin.\r\n"
 800394c:	4813      	ldr	r0, [pc, #76]	; (800399c <main+0x260>)
 800394e:	f000 f983 	bl	8003c58 <USBsend>
	HAL_Delay(500);
 8003952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003956:	f7fd fa63 	bl	8000e20 <HAL_Delay>
      USBsend("\n\rfrequency=");
 800395a:	4d11      	ldr	r5, [pc, #68]	; (80039a0 <main+0x264>)
      USBsend_Int(freq);
 800395c:	4c11      	ldr	r4, [pc, #68]	; (80039a4 <main+0x268>)
	  HAL_Delay(1000);
 800395e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003962:	f7fd fa5d 	bl	8000e20 <HAL_Delay>
      USBsend("\n\rfrequency=");
 8003966:	4628      	mov	r0, r5
 8003968:	f000 f976 	bl	8003c58 <USBsend>
      USBsend_Int(freq);
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	f000 f97d 	bl	8003c6c <USBsend_Int>
 8003972:	e7f4      	b.n	800395e <main+0x222>
 8003974:	40021000 	.word	0x40021000
 8003978:	40010800 	.word	0x40010800
 800397c:	40010c00 	.word	0x40010c00
 8003980:	20000b18 	.word	0x20000b18
 8003984:	20000a98 	.word	0x20000a98
 8003988:	40000400 	.word	0x40000400
 800398c:	20000a58 	.word	0x20000a58
 8003990:	40000800 	.word	0x40000800
 8003994:	40012c00 	.word	0x40012c00
 8003998:	20000ad8 	.word	0x20000ad8
 800399c:	08006e70 	.word	0x08006e70
 80039a0:	08006ef7 	.word	0x08006ef7
 80039a4:	200007f0 	.word	0x200007f0

080039a8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80039a8:	e7fe      	b.n	80039a8 <_Error_Handler>
	...

080039ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <HAL_MspInit+0x84>)
{
 80039ae:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80039b0:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	619a      	str	r2, [r3, #24]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c4:	f7fd fa3e 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80039c8:	2200      	movs	r2, #0
 80039ca:	f06f 000b 	mvn.w	r0, #11
 80039ce:	4611      	mov	r1, r2
 80039d0:	f7fd fa4a 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	f06f 000a 	mvn.w	r0, #10
 80039da:	4611      	mov	r1, r2
 80039dc:	f7fd fa44 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80039e0:	2200      	movs	r2, #0
 80039e2:	f06f 0009 	mvn.w	r0, #9
 80039e6:	4611      	mov	r1, r2
 80039e8:	f7fd fa3e 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	f06f 0004 	mvn.w	r0, #4
 80039f2:	4611      	mov	r1, r2
 80039f4:	f7fd fa38 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80039f8:	2200      	movs	r2, #0
 80039fa:	f06f 0003 	mvn.w	r0, #3
 80039fe:	4611      	mov	r1, r2
 8003a00:	f7fd fa32 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	f06f 0001 	mvn.w	r0, #1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	f7fd fa2c 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a10:	2200      	movs	r2, #0
 8003a12:	f04f 30ff 	mov.w	r0, #4294967295
 8003a16:	4611      	mov	r1, r2
 8003a18:	f7fd fa26 	bl	8000e68 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Enabled
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a1c:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <HAL_MspInit+0x88>)
 8003a1e:	6853      	ldr	r3, [r2, #4]
 8003a20:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a2a:	b003      	add	sp, #12
 8003a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010000 	.word	0x40010000

08003a38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8003a38:	6802      	ldr	r2, [r0, #0]
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_TIM_PWM_MspInit+0x24>)
{
 8003a3c:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d10a      	bne.n	8003a58 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a42:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4c:	619a      	str	r2, [r3, #24]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003a58:	b002      	add	sp, #8
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00

08003a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8003a62:	6803      	ldr	r3, [r0, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d10d      	bne.n	8003a86 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a6a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	61da      	str	r2, [r3, #28]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	9302      	str	r3, [sp, #8]
 8003a7e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a80:	b007      	add	sp, #28
 8003a82:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8003a86:	4a16      	ldr	r2, [pc, #88]	; (8003ae0 <HAL_TIM_Base_MspInit+0x80>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d114      	bne.n	8003ab6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a8c:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <HAL_TIM_Base_MspInit+0x84>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8e:	4816      	ldr	r0, [pc, #88]	; (8003ae8 <HAL_TIM_Base_MspInit+0x88>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a90:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a94:	f042 0202 	orr.w	r2, r2, #2
 8003a98:	61da      	str	r2, [r3, #28]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aac:	2303      	movs	r3, #3
 8003aae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab0:	f7fd fa42 	bl	8000f38 <HAL_GPIO_Init>
}
 8003ab4:	e7e4      	b.n	8003a80 <HAL_TIM_Base_MspInit+0x20>
  else if(htim_base->Instance==TIM4)
 8003ab6:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <HAL_TIM_Base_MspInit+0x8c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d1e1      	bne.n	8003a80 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_TIM_Base_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abe:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ac0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac2:	480b      	ldr	r0, [pc, #44]	; (8003af0 <HAL_TIM_Base_MspInit+0x90>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ac4:	f042 0204 	orr.w	r2, r2, #4
 8003ac8:	61da      	str	r2, [r3, #28]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	9304      	str	r3, [sp, #16]
 8003ade:	e7e7      	b.n	8003ab0 <HAL_TIM_Base_MspInit+0x50>
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40010800 	.word	0x40010800
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40010c00 	.word	0x40010c00

08003af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003af6:	6803      	ldr	r3, [r0, #0]
 8003af8:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <HAL_TIM_MspPostInit+0x30>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10d      	bne.n	8003b1a <HAL_TIM_MspPostInit+0x26>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003afe:	f44f 7300 	mov.w	r3, #512	; 0x200
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b02:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b08:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0a:	4669      	mov	r1, sp
 8003b0c:	4806      	ldr	r0, [pc, #24]	; (8003b28 <HAL_TIM_MspPostInit+0x34>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b0e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b10:	f7fd fa12 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003b14:	b005      	add	sp, #20
 8003b16:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM4)
 8003b1a:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <HAL_TIM_MspPostInit+0x38>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d1f9      	bne.n	8003b14 <HAL_TIM_MspPostInit+0x20>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	e7ee      	b.n	8003b02 <HAL_TIM_MspPostInit+0xe>
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40010800 	.word	0x40010800
 8003b2c:	40000800 	.word	0x40000800

08003b30 <NMI_Handler>:
 8003b30:	4770      	bx	lr

08003b32 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003b32:	e7fe      	b.n	8003b32 <HardFault_Handler>

08003b34 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003b34:	e7fe      	b.n	8003b34 <MemManage_Handler>

08003b36 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003b36:	e7fe      	b.n	8003b36 <BusFault_Handler>

08003b38 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003b38:	e7fe      	b.n	8003b38 <UsageFault_Handler>

08003b3a <SVC_Handler>:
 8003b3a:	4770      	bx	lr

08003b3c <DebugMon_Handler>:
 8003b3c:	4770      	bx	lr

08003b3e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003b3e:	4770      	bx	lr

08003b40 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003b40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b42:	f7fd f95b 	bl	8000dfc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003b4a:	f7fd b9f0 	b.w	8000f2e <HAL_SYSTICK_IRQHandler>
	...

08003b50 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b50:	4801      	ldr	r0, [pc, #4]	; (8003b58 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003b52:	f7fd bbdf 	b.w	8001314 <HAL_PCD_IRQHandler>
 8003b56:	bf00      	nop
 8003b58:	2000154c 	.word	0x2000154c

08003b5c <USB_HP_CAN1_TX_IRQHandler>:
 8003b5c:	f7ff bff8 	b.w	8003b50 <USB_LP_CAN1_RX0_IRQHandler>

08003b60 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <SystemInit+0x40>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <SystemInit+0x44>)
 8003b6e:	400a      	ands	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003b78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b84:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003b8c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003b8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003b92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <SystemInit+0x48>)
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	f8ff0000 	.word	0xf8ff0000
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003bac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003bae:	4c09      	ldr	r4, [pc, #36]	; (8003bd4 <MX_USB_DEVICE_Init+0x28>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4909      	ldr	r1, [pc, #36]	; (8003bd8 <MX_USB_DEVICE_Init+0x2c>)
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7ff fa23 	bl	8003000 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003bba:	4908      	ldr	r1, [pc, #32]	; (8003bdc <MX_USB_DEVICE_Init+0x30>)
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff fa34 	bl	800302a <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4906      	ldr	r1, [pc, #24]	; (8003be0 <MX_USB_DEVICE_Init+0x34>)
 8003bc6:	f7ff f9dc 	bl	8002f82 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8003bca:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8003bd0:	f7ff ba32 	b.w	8003038 <USBD_Start>
 8003bd4:	20000b58 	.word	0x20000b58
 8003bd8:	2000012c 	.word	0x2000012c
 8003bdc:	20000008 	.word	0x20000008
 8003be0:	2000011c 	.word	0x2000011c

08003be4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003be4:	2000      	movs	r0, #0
 8003be6:	4770      	bx	lr

08003be8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003be8:	2000      	movs	r0, #0
 8003bea:	4770      	bx	lr

08003bec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003bec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003bee:	4c05      	ldr	r4, [pc, #20]	; (8003c04 <CDC_Receive_FS+0x18>)
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff f9d4 	bl	8002fa0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7ff f9ee 	bl	8002fda <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003bfe:	2000      	movs	r0, #0
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	20000b58 	.word	0x20000b58

08003c08 <CDC_Init_FS>:
{
 8003c08:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003c0a:	4c06      	ldr	r4, [pc, #24]	; (8003c24 <CDC_Init_FS+0x1c>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4906      	ldr	r1, [pc, #24]	; (8003c28 <CDC_Init_FS+0x20>)
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7ff f9bd 	bl	8002f90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003c16:	4905      	ldr	r1, [pc, #20]	; (8003c2c <CDC_Init_FS+0x24>)
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff f9c1 	bl	8002fa0 <USBD_CDC_SetRxBuffer>
}
 8003c1e:	2000      	movs	r0, #0
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	bf00      	nop
 8003c24:	20000b58 	.word	0x20000b58
 8003c28:	20001164 	.word	0x20001164
 8003c2c:	20000d7c 	.word	0x20000d7c

08003c30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003c30:	b508      	push	{r3, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <CDC_Transmit_FS+0x24>)
{
 8003c34:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003c36:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
  while (hcdc->TxState != 0)
 8003c3a:	f8d1 3214 	ldr.w	r3, [r1, #532]	; 0x214
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1fb      	bne.n	8003c3a <CDC_Transmit_FS+0xa>
  {
	  hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003c42:	4601      	mov	r1, r0
 8003c44:	4803      	ldr	r0, [pc, #12]	; (8003c54 <CDC_Transmit_FS+0x24>)
 8003c46:	f7ff f9a3 	bl	8002f90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8003c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003c4e:	4801      	ldr	r0, [pc, #4]	; (8003c54 <CDC_Transmit_FS+0x24>)
 8003c50:	f7ff b9ac 	b.w	8002fac <USBD_CDC_TransmitPacket>
 8003c54:	20000b58 	.word	0x20000b58

08003c58 <USBsend>:

void USBsend (char *str)
{
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	1a19      	subs	r1, r3, r0
    uint32_t ptr=0;
    for(ptr=1;str[ptr]!=0;ptr++)
 8003c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c60:	2a00      	cmp	r2, #0
 8003c62:	d1fa      	bne.n	8003c5a <USBsend+0x2>
    {
    }
    CDC_Transmit_FS(str,ptr);
 8003c64:	b289      	uxth	r1, r1
 8003c66:	f7ff bfe3 	b.w	8003c30 <CDC_Transmit_FS>
	...

08003c6c <USBsend_Int>:
}

void USBsend_Int(int i)
{
 8003c6c:	b500      	push	{lr}
 8003c6e:	b089      	sub	sp, #36	; 0x24
    char temp[32];
    sprintf(temp,"%d",i);
 8003c70:	4602      	mov	r2, r0
 8003c72:	4905      	ldr	r1, [pc, #20]	; (8003c88 <USBsend_Int+0x1c>)
 8003c74:	4668      	mov	r0, sp
 8003c76:	f000 f9e3 	bl	8004040 <sprintf>
	USBsend(temp);
 8003c7a:	4668      	mov	r0, sp
 8003c7c:	f7ff ffec 	bl	8003c58 <USBsend>
}
 8003c80:	b009      	add	sp, #36	; 0x24
 8003c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c86:	bf00      	nop
 8003c88:	08006f14 	.word	0x08006f14

08003c8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003c8c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_PCD_MspInit+0x48>)
 8003c90:	6802      	ldr	r2, [r0, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d11a      	bne.n	8003ccc <HAL_PCD_MspInit+0x40>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003c96:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003c9a:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8003c9c:	2102      	movs	r1, #2
    __HAL_RCC_USB_CLK_ENABLE();
 8003c9e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ca2:	61da      	str	r2, [r3, #28]
 8003ca4:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8003ca6:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cac:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8003cae:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 8003cb0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8003cb2:	f7fd f8d9 	bl	8000e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003cb6:	2013      	movs	r0, #19
 8003cb8:	f7fd f90a 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 8003cbc:	2014      	movs	r0, #20
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	f7fd f8d1 	bl	8000e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003cc6:	2014      	movs	r0, #20
 8003cc8:	f7fd f902 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003ccc:	b003      	add	sp, #12
 8003cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cd2:	bf00      	nop
 8003cd4:	40005c00 	.word	0x40005c00

08003cd8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003cd8:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8003cdc:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003ce0:	f7ff b9c1 	b.w	8003066 <USBD_LL_SetupStage>

08003ce4 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003ce4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003ce8:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003cec:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003cf0:	f7ff b9e6 	b.w	80030c0 <USBD_LL_DataOutStage>

08003cf4 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003cf4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfa:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003cfe:	f7ff ba11 	b.w	8003124 <USBD_LL_DataInStage>

08003d02 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003d02:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003d06:	f7ff ba8d 	b.w	8003224 <USBD_LL_SOF>

08003d0a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003d0e:	2101      	movs	r1, #1
 8003d10:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003d14:	f7ff fa74 	bl	8003200 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003d18:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003d20:	f7ff ba4f 	b.w	80031c2 <USBD_LL_Reset>

08003d24 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003d24:	b510      	push	{r4, lr}
 8003d26:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003d28:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003d2c:	f7ff fa6b 	bl	8003206 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003d30:	69a3      	ldr	r3, [r4, #24]
 8003d32:	b123      	cbz	r3, 8003d3e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003d34:	4a02      	ldr	r2, [pc, #8]	; (8003d40 <HAL_PCD_SuspendCallback+0x1c>)
 8003d36:	6913      	ldr	r3, [r2, #16]
 8003d38:	f043 0306 	orr.w	r3, r3, #6
 8003d3c:	6113      	str	r3, [r2, #16]
 8003d3e:	bd10      	pop	{r4, pc}
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003d44:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003d48:	f7ff ba66 	b.w	8003218 <USBD_LL_Resume>

08003d4c <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	f04f 0c02 	mov.w	ip, #2
{
 8003d52:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003d54:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <USBD_LL_Init+0x84>)
{
 8003d56:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003d58:	481e      	ldr	r0, [pc, #120]	; (8003dd4 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003d5a:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003d5e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003d60:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003d64:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003d68:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003d6a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003d6c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003d6e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003d70:	f7fd f9c2 	bl	80010f8 <HAL_PCD_Init>
 8003d74:	b120      	cbz	r0, 8003d80 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003d76:	f44f 7199 	mov.w	r1, #306	; 0x132
 8003d7a:	4817      	ldr	r0, [pc, #92]	; (8003dd8 <USBD_LL_Init+0x8c>)
 8003d7c:	f7ff fe14 	bl	80039a8 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003d80:	2200      	movs	r2, #0
 8003d82:	2318      	movs	r3, #24
 8003d84:	4611      	mov	r1, r2
 8003d86:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d8a:	f7fd fd87 	bl	800189c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003d8e:	2358      	movs	r3, #88	; 0x58
 8003d90:	2200      	movs	r2, #0
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003d98:	f7fd fd80 	bl	800189c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003d9c:	23c0      	movs	r3, #192	; 0xc0
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2181      	movs	r1, #129	; 0x81
 8003da2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003da6:	f7fd fd79 	bl	800189c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003daa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003dae:	2200      	movs	r2, #0
 8003db0:	2101      	movs	r1, #1
 8003db2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003db6:	f7fd fd71 	bl	800189c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2182      	movs	r1, #130	; 0x82
 8003dc2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003dc6:	f7fd fd69 	bl	800189c <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8003dca:	2000      	movs	r0, #0
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	bf00      	nop
 8003dd0:	40005c00 	.word	0x40005c00
 8003dd4:	2000154c 	.word	0x2000154c
 8003dd8:	08006f1b 	.word	0x08006f1b

08003ddc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003ddc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003dde:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003de2:	f7fd f9f2 	bl	80011ca <HAL_PCD_Start>
 8003de6:	2803      	cmp	r0, #3
 8003de8:	bf9a      	itte	ls
 8003dea:	4b02      	ldrls	r3, [pc, #8]	; (8003df4 <USBD_LL_Start+0x18>)
 8003dec:	5c18      	ldrbls	r0, [r3, r0]
 8003dee:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003df0:	bd08      	pop	{r3, pc}
 8003df2:	bf00      	nop
 8003df4:	08006f17 	.word	0x08006f17

08003df8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003dfc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e00:	4613      	mov	r3, r2
 8003e02:	4622      	mov	r2, r4
 8003e04:	f7fd fa0c 	bl	8001220 <HAL_PCD_EP_Open>
 8003e08:	2803      	cmp	r0, #3
 8003e0a:	bf9a      	itte	ls
 8003e0c:	4b01      	ldrls	r3, [pc, #4]	; (8003e14 <USBD_LL_OpenEP+0x1c>)
 8003e0e:	5c18      	ldrbls	r0, [r3, r0]
 8003e10:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003e12:	bd10      	pop	{r4, pc}
 8003e14:	08006f17 	.word	0x08006f17

08003e18 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003e18:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003e1a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e1e:	f7fd fa22 	bl	8001266 <HAL_PCD_EP_Close>
 8003e22:	2803      	cmp	r0, #3
 8003e24:	bf9a      	itte	ls
 8003e26:	4b02      	ldrls	r3, [pc, #8]	; (8003e30 <USBD_LL_CloseEP+0x18>)
 8003e28:	5c18      	ldrbls	r0, [r3, r0]
 8003e2a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003e2c:	bd08      	pop	{r3, pc}
 8003e2e:	bf00      	nop
 8003e30:	08006f17 	.word	0x08006f17

08003e34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003e34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003e36:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e3a:	f7fd fce3 	bl	8001804 <HAL_PCD_EP_SetStall>
 8003e3e:	2803      	cmp	r0, #3
 8003e40:	bf9a      	itte	ls
 8003e42:	4b02      	ldrls	r3, [pc, #8]	; (8003e4c <USBD_LL_StallEP+0x18>)
 8003e44:	5c18      	ldrbls	r0, [r3, r0]
 8003e46:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003e48:	bd08      	pop	{r3, pc}
 8003e4a:	bf00      	nop
 8003e4c:	08006f17 	.word	0x08006f17

08003e50 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003e50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003e52:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e56:	f7fd fcfe 	bl	8001856 <HAL_PCD_EP_ClrStall>
 8003e5a:	2803      	cmp	r0, #3
 8003e5c:	bf9a      	itte	ls
 8003e5e:	4b02      	ldrls	r3, [pc, #8]	; (8003e68 <USBD_LL_ClearStallEP+0x18>)
 8003e60:	5c18      	ldrbls	r0, [r3, r0]
 8003e62:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003e64:	bd08      	pop	{r3, pc}
 8003e66:	bf00      	nop
 8003e68:	08006f17 	.word	0x08006f17

08003e6c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003e6c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003e6e:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003e72:	bf45      	ittet	mi
 8003e74:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003e78:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003e7c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003e80:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003e84:	bf58      	it	pl
 8003e86:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8003e8a:	4770      	bx	lr

08003e8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003e8c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003e8e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e92:	f7fd f9b1 	bl	80011f8 <HAL_PCD_SetAddress>
 8003e96:	2803      	cmp	r0, #3
 8003e98:	bf9a      	itte	ls
 8003e9a:	4b02      	ldrls	r3, [pc, #8]	; (8003ea4 <USBD_LL_SetUSBAddress+0x18>)
 8003e9c:	5c18      	ldrbls	r0, [r3, r0]
 8003e9e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003ea0:	bd08      	pop	{r3, pc}
 8003ea2:	bf00      	nop
 8003ea4:	08006f17 	.word	0x08006f17

08003ea8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003ea8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003eaa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003eae:	f7fd fa1a 	bl	80012e6 <HAL_PCD_EP_Transmit>
 8003eb2:	2803      	cmp	r0, #3
 8003eb4:	bf9a      	itte	ls
 8003eb6:	4b02      	ldrls	r3, [pc, #8]	; (8003ec0 <USBD_LL_Transmit+0x18>)
 8003eb8:	5c18      	ldrbls	r0, [r3, r0]
 8003eba:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003ebc:	bd08      	pop	{r3, pc}
 8003ebe:	bf00      	nop
 8003ec0:	08006f17 	.word	0x08006f17

08003ec4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003ec4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003ec6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003eca:	f7fd f9ed 	bl	80012a8 <HAL_PCD_EP_Receive>
 8003ece:	2803      	cmp	r0, #3
 8003ed0:	bf9a      	itte	ls
 8003ed2:	4b02      	ldrls	r3, [pc, #8]	; (8003edc <USBD_LL_PrepareReceive+0x18>)
 8003ed4:	5c18      	ldrbls	r0, [r3, r0]
 8003ed6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003ed8:	bd08      	pop	{r3, pc}
 8003eda:	bf00      	nop
 8003edc:	08006f17 	.word	0x08006f17

08003ee0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ee0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003ee2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ee6:	f7fd f9f7 	bl	80012d8 <HAL_PCD_EP_GetRxCount>
}
 8003eea:	bd08      	pop	{r3, pc}

08003eec <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003eec:	4800      	ldr	r0, [pc, #0]	; (8003ef0 <USBD_static_malloc+0x4>)
 8003eee:	4770      	bx	lr
 8003ef0:	200007fc 	.word	0x200007fc

08003ef4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003ef6:	4770      	bx	lr

08003ef8 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003ef8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003efa:	4801      	ldr	r0, [pc, #4]	; (8003f00 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003efc:	800b      	strh	r3, [r1, #0]
}
 8003efe:	4770      	bx	lr
 8003f00:	20000148 	.word	0x20000148

08003f04 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003f04:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003f06:	4801      	ldr	r0, [pc, #4]	; (8003f0c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003f08:	800b      	strh	r3, [r1, #0]
}
 8003f0a:	4770      	bx	lr
 8003f0c:	2000015c 	.word	0x2000015c

08003f10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003f10:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003f12:	4c04      	ldr	r4, [pc, #16]	; (8003f24 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003f14:	460a      	mov	r2, r1
 8003f16:	4804      	ldr	r0, [pc, #16]	; (8003f28 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003f18:	4621      	mov	r1, r4
 8003f1a:	f7ff fb24 	bl	8003566 <USBD_GetString>
  return USBD_StrDesc;
}
 8003f1e:	4620      	mov	r0, r4
 8003f20:	bd10      	pop	{r4, pc}
 8003f22:	bf00      	nop
 8003f24:	200019ac 	.word	0x200019ac
 8003f28:	08006f47 	.word	0x08006f47

08003f2c <USBD_FS_ProductStrDescriptor>:
{
 8003f2c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003f2e:	4c04      	ldr	r4, [pc, #16]	; (8003f40 <USBD_FS_ProductStrDescriptor+0x14>)
 8003f30:	460a      	mov	r2, r1
 8003f32:	4804      	ldr	r0, [pc, #16]	; (8003f44 <USBD_FS_ProductStrDescriptor+0x18>)
 8003f34:	4621      	mov	r1, r4
 8003f36:	f7ff fb16 	bl	8003566 <USBD_GetString>
}
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	bd10      	pop	{r4, pc}
 8003f3e:	bf00      	nop
 8003f40:	200019ac 	.word	0x200019ac
 8003f44:	08006f5a 	.word	0x08006f5a

08003f48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003f48:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003f4a:	4c04      	ldr	r4, [pc, #16]	; (8003f5c <USBD_FS_SerialStrDescriptor+0x14>)
 8003f4c:	460a      	mov	r2, r1
 8003f4e:	4804      	ldr	r0, [pc, #16]	; (8003f60 <USBD_FS_SerialStrDescriptor+0x18>)
 8003f50:	4621      	mov	r1, r4
 8003f52:	f7ff fb08 	bl	8003566 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003f56:	4620      	mov	r0, r4
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200019ac 	.word	0x200019ac
 8003f60:	08006f70 	.word	0x08006f70

08003f64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003f64:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003f66:	4c04      	ldr	r4, [pc, #16]	; (8003f78 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003f68:	460a      	mov	r2, r1
 8003f6a:	4804      	ldr	r0, [pc, #16]	; (8003f7c <USBD_FS_ConfigStrDescriptor+0x18>)
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	f7ff fafa 	bl	8003566 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003f72:	4620      	mov	r0, r4
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	bf00      	nop
 8003f78:	200019ac 	.word	0x200019ac
 8003f7c:	08006f2e 	.word	0x08006f2e

08003f80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003f80:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003f82:	4c04      	ldr	r4, [pc, #16]	; (8003f94 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003f84:	460a      	mov	r2, r1
 8003f86:	4804      	ldr	r0, [pc, #16]	; (8003f98 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003f88:	4621      	mov	r1, r4
 8003f8a:	f7ff faec 	bl	8003566 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003f8e:	4620      	mov	r0, r4
 8003f90:	bd10      	pop	{r4, pc}
 8003f92:	bf00      	nop
 8003f94:	200019ac 	.word	0x200019ac
 8003f98:	08006f39 	.word	0x08006f39

08003f9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003f9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003f9e:	e003      	b.n	8003fa8 <LoopCopyDataInit>

08003fa0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003fa2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003fa4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003fa6:	3104      	adds	r1, #4

08003fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003fa8:	480a      	ldr	r0, [pc, #40]	; (8003fd4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003fac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003fae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003fb0:	d3f6      	bcc.n	8003fa0 <CopyDataInit>
  ldr r2, =_sbss
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003fb4:	e002      	b.n	8003fbc <LoopFillZerobss>

08003fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003fb6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003fb8:	f842 3b04 	str.w	r3, [r2], #4

08003fbc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003fbe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003fc0:	d3f9      	bcc.n	8003fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fc2:	f7ff fdcd 	bl	8003b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fc6:	f000 f80f 	bl	8003fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fca:	f7ff fbb7 	bl	800373c <main>
  bx lr
 8003fce:	4770      	bx	lr
  ldr r3, =_sidata
 8003fd0:	080071f8 	.word	0x080071f8
  ldr r0, =_sdata
 8003fd4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003fd8:	200007d0 	.word	0x200007d0
  ldr r2, =_sbss
 8003fdc:	200007d0 	.word	0x200007d0
  ldr r3, = _ebss
 8003fe0:	20001bbc 	.word	0x20001bbc

08003fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fe4:	e7fe      	b.n	8003fe4 <ADC1_2_IRQHandler>
	...

08003fe8 <__libc_init_array>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	2500      	movs	r5, #0
 8003fec:	4e0c      	ldr	r6, [pc, #48]	; (8004020 <__libc_init_array+0x38>)
 8003fee:	4c0d      	ldr	r4, [pc, #52]	; (8004024 <__libc_init_array+0x3c>)
 8003ff0:	1ba4      	subs	r4, r4, r6
 8003ff2:	10a4      	asrs	r4, r4, #2
 8003ff4:	42a5      	cmp	r5, r4
 8003ff6:	d109      	bne.n	800400c <__libc_init_array+0x24>
 8003ff8:	f002 ff26 	bl	8006e48 <_init>
 8003ffc:	2500      	movs	r5, #0
 8003ffe:	4e0a      	ldr	r6, [pc, #40]	; (8004028 <__libc_init_array+0x40>)
 8004000:	4c0a      	ldr	r4, [pc, #40]	; (800402c <__libc_init_array+0x44>)
 8004002:	1ba4      	subs	r4, r4, r6
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	42a5      	cmp	r5, r4
 8004008:	d105      	bne.n	8004016 <__libc_init_array+0x2e>
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004010:	4798      	blx	r3
 8004012:	3501      	adds	r5, #1
 8004014:	e7ee      	b.n	8003ff4 <__libc_init_array+0xc>
 8004016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800401a:	4798      	blx	r3
 800401c:	3501      	adds	r5, #1
 800401e:	e7f2      	b.n	8004006 <__libc_init_array+0x1e>
 8004020:	080071f0 	.word	0x080071f0
 8004024:	080071f0 	.word	0x080071f0
 8004028:	080071f0 	.word	0x080071f0
 800402c:	080071f4 	.word	0x080071f4

08004030 <memset>:
 8004030:	4603      	mov	r3, r0
 8004032:	4402      	add	r2, r0
 8004034:	4293      	cmp	r3, r2
 8004036:	d100      	bne.n	800403a <memset+0xa>
 8004038:	4770      	bx	lr
 800403a:	f803 1b01 	strb.w	r1, [r3], #1
 800403e:	e7f9      	b.n	8004034 <memset+0x4>

08004040 <sprintf>:
 8004040:	b40e      	push	{r1, r2, r3}
 8004042:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004046:	b500      	push	{lr}
 8004048:	b09c      	sub	sp, #112	; 0x70
 800404a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800404e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004052:	9104      	str	r1, [sp, #16]
 8004054:	9107      	str	r1, [sp, #28]
 8004056:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800405a:	ab1d      	add	r3, sp, #116	; 0x74
 800405c:	9002      	str	r0, [sp, #8]
 800405e:	9006      	str	r0, [sp, #24]
 8004060:	4808      	ldr	r0, [pc, #32]	; (8004084 <sprintf+0x44>)
 8004062:	f853 2b04 	ldr.w	r2, [r3], #4
 8004066:	f8ad 1016 	strh.w	r1, [sp, #22]
 800406a:	6800      	ldr	r0, [r0, #0]
 800406c:	a902      	add	r1, sp, #8
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	f000 f80a 	bl	8004088 <_svfprintf_r>
 8004074:	2200      	movs	r2, #0
 8004076:	9b02      	ldr	r3, [sp, #8]
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	b01c      	add	sp, #112	; 0x70
 800407c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004080:	b003      	add	sp, #12
 8004082:	4770      	bx	lr
 8004084:	20000160 	.word	0x20000160

08004088 <_svfprintf_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	b0bf      	sub	sp, #252	; 0xfc
 800408e:	4689      	mov	r9, r1
 8004090:	4615      	mov	r5, r2
 8004092:	461f      	mov	r7, r3
 8004094:	4682      	mov	sl, r0
 8004096:	f001 fe27 	bl	8005ce8 <_localeconv_r>
 800409a:	6803      	ldr	r3, [r0, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	9311      	str	r3, [sp, #68]	; 0x44
 80040a0:	f7fc f856 	bl	8000150 <strlen>
 80040a4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80040a8:	900a      	str	r0, [sp, #40]	; 0x28
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	d518      	bpl.n	80040e0 <_svfprintf_r+0x58>
 80040ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80040b2:	b9ab      	cbnz	r3, 80040e0 <_svfprintf_r+0x58>
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	4650      	mov	r0, sl
 80040b8:	f001 fe2c 	bl	8005d14 <_malloc_r>
 80040bc:	f8c9 0000 	str.w	r0, [r9]
 80040c0:	f8c9 0010 	str.w	r0, [r9, #16]
 80040c4:	b948      	cbnz	r0, 80040da <_svfprintf_r+0x52>
 80040c6:	230c      	movs	r3, #12
 80040c8:	f8ca 3000 	str.w	r3, [sl]
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
 80040d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80040d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80040d4:	b03f      	add	sp, #252	; 0xfc
 80040d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040da:	2340      	movs	r3, #64	; 0x40
 80040dc:	f8c9 3014 	str.w	r3, [r9, #20]
 80040e0:	2300      	movs	r3, #0
 80040e2:	ac2e      	add	r4, sp, #184	; 0xb8
 80040e4:	9421      	str	r4, [sp, #132]	; 0x84
 80040e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80040e8:	9322      	str	r3, [sp, #136]	; 0x88
 80040ea:	9509      	str	r5, [sp, #36]	; 0x24
 80040ec:	9307      	str	r3, [sp, #28]
 80040ee:	930d      	str	r3, [sp, #52]	; 0x34
 80040f0:	930e      	str	r3, [sp, #56]	; 0x38
 80040f2:	9315      	str	r3, [sp, #84]	; 0x54
 80040f4:	9314      	str	r3, [sp, #80]	; 0x50
 80040f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040f8:	9312      	str	r3, [sp, #72]	; 0x48
 80040fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80040fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80040fe:	462b      	mov	r3, r5
 8004100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004104:	b112      	cbz	r2, 800410c <_svfprintf_r+0x84>
 8004106:	2a25      	cmp	r2, #37	; 0x25
 8004108:	f040 8083 	bne.w	8004212 <_svfprintf_r+0x18a>
 800410c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410e:	1aee      	subs	r6, r5, r3
 8004110:	d00d      	beq.n	800412e <_svfprintf_r+0xa6>
 8004112:	e884 0048 	stmia.w	r4, {r3, r6}
 8004116:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004118:	4433      	add	r3, r6
 800411a:	9323      	str	r3, [sp, #140]	; 0x8c
 800411c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800411e:	3301      	adds	r3, #1
 8004120:	2b07      	cmp	r3, #7
 8004122:	9322      	str	r3, [sp, #136]	; 0x88
 8004124:	dc77      	bgt.n	8004216 <_svfprintf_r+0x18e>
 8004126:	3408      	adds	r4, #8
 8004128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800412a:	4433      	add	r3, r6
 800412c:	930b      	str	r3, [sp, #44]	; 0x2c
 800412e:	782b      	ldrb	r3, [r5, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8725 	beq.w	8004f80 <_svfprintf_r+0xef8>
 8004136:	2300      	movs	r3, #0
 8004138:	1c69      	adds	r1, r5, #1
 800413a:	461a      	mov	r2, r3
 800413c:	f04f 3bff 	mov.w	fp, #4294967295
 8004140:	461d      	mov	r5, r3
 8004142:	200a      	movs	r0, #10
 8004144:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004148:	930c      	str	r3, [sp, #48]	; 0x30
 800414a:	1c4e      	adds	r6, r1, #1
 800414c:	7809      	ldrb	r1, [r1, #0]
 800414e:	9609      	str	r6, [sp, #36]	; 0x24
 8004150:	9106      	str	r1, [sp, #24]
 8004152:	9906      	ldr	r1, [sp, #24]
 8004154:	3920      	subs	r1, #32
 8004156:	2958      	cmp	r1, #88	; 0x58
 8004158:	f200 8414 	bhi.w	8004984 <_svfprintf_r+0x8fc>
 800415c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004160:	041200a5 	.word	0x041200a5
 8004164:	00aa0412 	.word	0x00aa0412
 8004168:	04120412 	.word	0x04120412
 800416c:	04120412 	.word	0x04120412
 8004170:	04120412 	.word	0x04120412
 8004174:	006500ad 	.word	0x006500ad
 8004178:	00b50412 	.word	0x00b50412
 800417c:	041200b8 	.word	0x041200b8
 8004180:	00d800d5 	.word	0x00d800d5
 8004184:	00d800d8 	.word	0x00d800d8
 8004188:	00d800d8 	.word	0x00d800d8
 800418c:	00d800d8 	.word	0x00d800d8
 8004190:	00d800d8 	.word	0x00d800d8
 8004194:	04120412 	.word	0x04120412
 8004198:	04120412 	.word	0x04120412
 800419c:	04120412 	.word	0x04120412
 80041a0:	04120412 	.word	0x04120412
 80041a4:	04120412 	.word	0x04120412
 80041a8:	0122010c 	.word	0x0122010c
 80041ac:	01220412 	.word	0x01220412
 80041b0:	04120412 	.word	0x04120412
 80041b4:	04120412 	.word	0x04120412
 80041b8:	041200eb 	.word	0x041200eb
 80041bc:	033c0412 	.word	0x033c0412
 80041c0:	04120412 	.word	0x04120412
 80041c4:	04120412 	.word	0x04120412
 80041c8:	03a40412 	.word	0x03a40412
 80041cc:	04120412 	.word	0x04120412
 80041d0:	04120085 	.word	0x04120085
 80041d4:	04120412 	.word	0x04120412
 80041d8:	04120412 	.word	0x04120412
 80041dc:	04120412 	.word	0x04120412
 80041e0:	04120412 	.word	0x04120412
 80041e4:	00fe0412 	.word	0x00fe0412
 80041e8:	0122006b 	.word	0x0122006b
 80041ec:	01220122 	.word	0x01220122
 80041f0:	006b00ee 	.word	0x006b00ee
 80041f4:	04120412 	.word	0x04120412
 80041f8:	041200f1 	.word	0x041200f1
 80041fc:	033e031e 	.word	0x033e031e
 8004200:	00f80372 	.word	0x00f80372
 8004204:	03830412 	.word	0x03830412
 8004208:	03a60412 	.word	0x03a60412
 800420c:	04120412 	.word	0x04120412
 8004210:	03be      	.short	0x03be
 8004212:	461d      	mov	r5, r3
 8004214:	e773      	b.n	80040fe <_svfprintf_r+0x76>
 8004216:	aa21      	add	r2, sp, #132	; 0x84
 8004218:	4649      	mov	r1, r9
 800421a:	4650      	mov	r0, sl
 800421c:	f002 fa8e 	bl	800673c <__ssprint_r>
 8004220:	2800      	cmp	r0, #0
 8004222:	f040 868e 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004226:	ac2e      	add	r4, sp, #184	; 0xb8
 8004228:	e77e      	b.n	8004128 <_svfprintf_r+0xa0>
 800422a:	2301      	movs	r3, #1
 800422c:	222b      	movs	r2, #43	; 0x2b
 800422e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004230:	e78b      	b.n	800414a <_svfprintf_r+0xc2>
 8004232:	460f      	mov	r7, r1
 8004234:	e7fb      	b.n	800422e <_svfprintf_r+0x1a6>
 8004236:	b10b      	cbz	r3, 800423c <_svfprintf_r+0x1b4>
 8004238:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800423c:	06ae      	lsls	r6, r5, #26
 800423e:	f140 80a1 	bpl.w	8004384 <_svfprintf_r+0x2fc>
 8004242:	3707      	adds	r7, #7
 8004244:	f027 0707 	bic.w	r7, r7, #7
 8004248:	f107 0308 	add.w	r3, r7, #8
 800424c:	9308      	str	r3, [sp, #32]
 800424e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004252:	2e00      	cmp	r6, #0
 8004254:	f177 0300 	sbcs.w	r3, r7, #0
 8004258:	da05      	bge.n	8004266 <_svfprintf_r+0x1de>
 800425a:	232d      	movs	r3, #45	; 0x2d
 800425c:	4276      	negs	r6, r6
 800425e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004262:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004266:	2301      	movs	r3, #1
 8004268:	e2c7      	b.n	80047fa <_svfprintf_r+0x772>
 800426a:	b10b      	cbz	r3, 8004270 <_svfprintf_r+0x1e8>
 800426c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004270:	4ba0      	ldr	r3, [pc, #640]	; (80044f4 <_svfprintf_r+0x46c>)
 8004272:	9315      	str	r3, [sp, #84]	; 0x54
 8004274:	06ab      	lsls	r3, r5, #26
 8004276:	f140 8336 	bpl.w	80048e6 <_svfprintf_r+0x85e>
 800427a:	3707      	adds	r7, #7
 800427c:	f027 0707 	bic.w	r7, r7, #7
 8004280:	f107 0308 	add.w	r3, r7, #8
 8004284:	9308      	str	r3, [sp, #32]
 8004286:	e9d7 6700 	ldrd	r6, r7, [r7]
 800428a:	07e8      	lsls	r0, r5, #31
 800428c:	d50b      	bpl.n	80042a6 <_svfprintf_r+0x21e>
 800428e:	ea56 0307 	orrs.w	r3, r6, r7
 8004292:	d008      	beq.n	80042a6 <_svfprintf_r+0x21e>
 8004294:	2330      	movs	r3, #48	; 0x30
 8004296:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800429a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800429e:	f045 0502 	orr.w	r5, r5, #2
 80042a2:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 80042a6:	2302      	movs	r3, #2
 80042a8:	e2a4      	b.n	80047f4 <_svfprintf_r+0x76c>
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	d1bf      	bne.n	800422e <_svfprintf_r+0x1a6>
 80042ae:	2301      	movs	r3, #1
 80042b0:	2220      	movs	r2, #32
 80042b2:	e7bc      	b.n	800422e <_svfprintf_r+0x1a6>
 80042b4:	f045 0501 	orr.w	r5, r5, #1
 80042b8:	e7b9      	b.n	800422e <_svfprintf_r+0x1a6>
 80042ba:	683e      	ldr	r6, [r7, #0]
 80042bc:	1d39      	adds	r1, r7, #4
 80042be:	2e00      	cmp	r6, #0
 80042c0:	960c      	str	r6, [sp, #48]	; 0x30
 80042c2:	dab6      	bge.n	8004232 <_svfprintf_r+0x1aa>
 80042c4:	460f      	mov	r7, r1
 80042c6:	4276      	negs	r6, r6
 80042c8:	960c      	str	r6, [sp, #48]	; 0x30
 80042ca:	f045 0504 	orr.w	r5, r5, #4
 80042ce:	e7ae      	b.n	800422e <_svfprintf_r+0x1a6>
 80042d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042d2:	1c4e      	adds	r6, r1, #1
 80042d4:	7809      	ldrb	r1, [r1, #0]
 80042d6:	292a      	cmp	r1, #42	; 0x2a
 80042d8:	9106      	str	r1, [sp, #24]
 80042da:	d010      	beq.n	80042fe <_svfprintf_r+0x276>
 80042dc:	f04f 0b00 	mov.w	fp, #0
 80042e0:	9609      	str	r6, [sp, #36]	; 0x24
 80042e2:	9906      	ldr	r1, [sp, #24]
 80042e4:	3930      	subs	r1, #48	; 0x30
 80042e6:	2909      	cmp	r1, #9
 80042e8:	f63f af33 	bhi.w	8004152 <_svfprintf_r+0xca>
 80042ec:	fb00 1b0b 	mla	fp, r0, fp, r1
 80042f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042f2:	460e      	mov	r6, r1
 80042f4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80042f8:	9106      	str	r1, [sp, #24]
 80042fa:	9609      	str	r6, [sp, #36]	; 0x24
 80042fc:	e7f1      	b.n	80042e2 <_svfprintf_r+0x25a>
 80042fe:	6839      	ldr	r1, [r7, #0]
 8004300:	9609      	str	r6, [sp, #36]	; 0x24
 8004302:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8004306:	3704      	adds	r7, #4
 8004308:	e791      	b.n	800422e <_svfprintf_r+0x1a6>
 800430a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800430e:	e78e      	b.n	800422e <_svfprintf_r+0x1a6>
 8004310:	2100      	movs	r1, #0
 8004312:	910c      	str	r1, [sp, #48]	; 0x30
 8004314:	9906      	ldr	r1, [sp, #24]
 8004316:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004318:	3930      	subs	r1, #48	; 0x30
 800431a:	fb00 1106 	mla	r1, r0, r6, r1
 800431e:	910c      	str	r1, [sp, #48]	; 0x30
 8004320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004322:	460e      	mov	r6, r1
 8004324:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004328:	9106      	str	r1, [sp, #24]
 800432a:	9906      	ldr	r1, [sp, #24]
 800432c:	9609      	str	r6, [sp, #36]	; 0x24
 800432e:	3930      	subs	r1, #48	; 0x30
 8004330:	2909      	cmp	r1, #9
 8004332:	d9ef      	bls.n	8004314 <_svfprintf_r+0x28c>
 8004334:	e70d      	b.n	8004152 <_svfprintf_r+0xca>
 8004336:	f045 0508 	orr.w	r5, r5, #8
 800433a:	e778      	b.n	800422e <_svfprintf_r+0x1a6>
 800433c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004340:	e775      	b.n	800422e <_svfprintf_r+0x1a6>
 8004342:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004344:	7809      	ldrb	r1, [r1, #0]
 8004346:	296c      	cmp	r1, #108	; 0x6c
 8004348:	d105      	bne.n	8004356 <_svfprintf_r+0x2ce>
 800434a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800434c:	3101      	adds	r1, #1
 800434e:	9109      	str	r1, [sp, #36]	; 0x24
 8004350:	f045 0520 	orr.w	r5, r5, #32
 8004354:	e76b      	b.n	800422e <_svfprintf_r+0x1a6>
 8004356:	f045 0510 	orr.w	r5, r5, #16
 800435a:	e768      	b.n	800422e <_svfprintf_r+0x1a6>
 800435c:	2600      	movs	r6, #0
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	9308      	str	r3, [sp, #32]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8004368:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800436c:	f04f 0b01 	mov.w	fp, #1
 8004370:	4637      	mov	r7, r6
 8004372:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8004376:	e11c      	b.n	80045b2 <_svfprintf_r+0x52a>
 8004378:	b10b      	cbz	r3, 800437e <_svfprintf_r+0x2f6>
 800437a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800437e:	f045 0510 	orr.w	r5, r5, #16
 8004382:	e75b      	b.n	800423c <_svfprintf_r+0x1b4>
 8004384:	f015 0f10 	tst.w	r5, #16
 8004388:	f107 0304 	add.w	r3, r7, #4
 800438c:	d003      	beq.n	8004396 <_svfprintf_r+0x30e>
 800438e:	683e      	ldr	r6, [r7, #0]
 8004390:	9308      	str	r3, [sp, #32]
 8004392:	17f7      	asrs	r7, r6, #31
 8004394:	e75d      	b.n	8004252 <_svfprintf_r+0x1ca>
 8004396:	683e      	ldr	r6, [r7, #0]
 8004398:	f015 0f40 	tst.w	r5, #64	; 0x40
 800439c:	9308      	str	r3, [sp, #32]
 800439e:	bf18      	it	ne
 80043a0:	b236      	sxthne	r6, r6
 80043a2:	e7f6      	b.n	8004392 <_svfprintf_r+0x30a>
 80043a4:	b10b      	cbz	r3, 80043aa <_svfprintf_r+0x322>
 80043a6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80043aa:	3707      	adds	r7, #7
 80043ac:	f027 0707 	bic.w	r7, r7, #7
 80043b0:	f107 0308 	add.w	r3, r7, #8
 80043b4:	9308      	str	r3, [sp, #32]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	930d      	str	r3, [sp, #52]	; 0x34
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80043c2:	930e      	str	r3, [sp, #56]	; 0x38
 80043c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043c6:	4638      	mov	r0, r7
 80043c8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80043cc:	4631      	mov	r1, r6
 80043ce:	4b4a      	ldr	r3, [pc, #296]	; (80044f8 <_svfprintf_r+0x470>)
 80043d0:	f7fc fb18 	bl	8000a04 <__aeabi_dcmpun>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	f040 85dc 	bne.w	8004f92 <_svfprintf_r+0xf0a>
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <_svfprintf_r+0x470>)
 80043e0:	4638      	mov	r0, r7
 80043e2:	4631      	mov	r1, r6
 80043e4:	f7fc faf0 	bl	80009c8 <__aeabi_dcmple>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	f040 85d2 	bne.w	8004f92 <_svfprintf_r+0xf0a>
 80043ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80043f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80043f6:	f7fc fadd 	bl	80009b4 <__aeabi_dcmplt>
 80043fa:	b110      	cbz	r0, 8004402 <_svfprintf_r+0x37a>
 80043fc:	232d      	movs	r3, #45	; 0x2d
 80043fe:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004402:	4b3e      	ldr	r3, [pc, #248]	; (80044fc <_svfprintf_r+0x474>)
 8004404:	4a3e      	ldr	r2, [pc, #248]	; (8004500 <_svfprintf_r+0x478>)
 8004406:	9906      	ldr	r1, [sp, #24]
 8004408:	f04f 0b03 	mov.w	fp, #3
 800440c:	2947      	cmp	r1, #71	; 0x47
 800440e:	bfcc      	ite	gt
 8004410:	4690      	movgt	r8, r2
 8004412:	4698      	movle	r8, r3
 8004414:	2600      	movs	r6, #0
 8004416:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800441a:	4637      	mov	r7, r6
 800441c:	e0c9      	b.n	80045b2 <_svfprintf_r+0x52a>
 800441e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8004422:	d026      	beq.n	8004472 <_svfprintf_r+0x3ea>
 8004424:	9b06      	ldr	r3, [sp, #24]
 8004426:	f023 0320 	bic.w	r3, r3, #32
 800442a:	2b47      	cmp	r3, #71	; 0x47
 800442c:	d104      	bne.n	8004438 <_svfprintf_r+0x3b0>
 800442e:	f1bb 0f00 	cmp.w	fp, #0
 8004432:	bf08      	it	eq
 8004434:	f04f 0b01 	moveq.w	fp, #1
 8004438:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800443c:	9317      	str	r3, [sp, #92]	; 0x5c
 800443e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004440:	1e1f      	subs	r7, r3, #0
 8004442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004444:	bfa8      	it	ge
 8004446:	9710      	strge	r7, [sp, #64]	; 0x40
 8004448:	930f      	str	r3, [sp, #60]	; 0x3c
 800444a:	bfbd      	ittte	lt
 800444c:	463b      	movlt	r3, r7
 800444e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004452:	9310      	strlt	r3, [sp, #64]	; 0x40
 8004454:	2300      	movge	r3, #0
 8004456:	bfb8      	it	lt
 8004458:	232d      	movlt	r3, #45	; 0x2d
 800445a:	9316      	str	r3, [sp, #88]	; 0x58
 800445c:	9b06      	ldr	r3, [sp, #24]
 800445e:	f023 0720 	bic.w	r7, r3, #32
 8004462:	2f46      	cmp	r7, #70	; 0x46
 8004464:	d008      	beq.n	8004478 <_svfprintf_r+0x3f0>
 8004466:	2f45      	cmp	r7, #69	; 0x45
 8004468:	d142      	bne.n	80044f0 <_svfprintf_r+0x468>
 800446a:	f10b 0601 	add.w	r6, fp, #1
 800446e:	2302      	movs	r3, #2
 8004470:	e004      	b.n	800447c <_svfprintf_r+0x3f4>
 8004472:	f04f 0b06 	mov.w	fp, #6
 8004476:	e7df      	b.n	8004438 <_svfprintf_r+0x3b0>
 8004478:	465e      	mov	r6, fp
 800447a:	2303      	movs	r3, #3
 800447c:	aa1f      	add	r2, sp, #124	; 0x7c
 800447e:	9204      	str	r2, [sp, #16]
 8004480:	aa1c      	add	r2, sp, #112	; 0x70
 8004482:	9203      	str	r2, [sp, #12]
 8004484:	aa1b      	add	r2, sp, #108	; 0x6c
 8004486:	9202      	str	r2, [sp, #8]
 8004488:	e88d 0048 	stmia.w	sp, {r3, r6}
 800448c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800448e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004490:	4650      	mov	r0, sl
 8004492:	f000 fe55 	bl	8005140 <_dtoa_r>
 8004496:	2f47      	cmp	r7, #71	; 0x47
 8004498:	4680      	mov	r8, r0
 800449a:	d102      	bne.n	80044a2 <_svfprintf_r+0x41a>
 800449c:	07e8      	lsls	r0, r5, #31
 800449e:	f140 8585 	bpl.w	8004fac <_svfprintf_r+0xf24>
 80044a2:	eb08 0306 	add.w	r3, r8, r6
 80044a6:	2f46      	cmp	r7, #70	; 0x46
 80044a8:	9307      	str	r3, [sp, #28]
 80044aa:	d111      	bne.n	80044d0 <_svfprintf_r+0x448>
 80044ac:	f898 3000 	ldrb.w	r3, [r8]
 80044b0:	2b30      	cmp	r3, #48	; 0x30
 80044b2:	d109      	bne.n	80044c8 <_svfprintf_r+0x440>
 80044b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80044b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80044ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80044bc:	f7fc fa70 	bl	80009a0 <__aeabi_dcmpeq>
 80044c0:	b910      	cbnz	r0, 80044c8 <_svfprintf_r+0x440>
 80044c2:	f1c6 0601 	rsb	r6, r6, #1
 80044c6:	961b      	str	r6, [sp, #108]	; 0x6c
 80044c8:	9a07      	ldr	r2, [sp, #28]
 80044ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044cc:	441a      	add	r2, r3
 80044ce:	9207      	str	r2, [sp, #28]
 80044d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80044d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80044d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80044d8:	f7fc fa62 	bl	80009a0 <__aeabi_dcmpeq>
 80044dc:	b990      	cbnz	r0, 8004504 <_svfprintf_r+0x47c>
 80044de:	2230      	movs	r2, #48	; 0x30
 80044e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80044e2:	9907      	ldr	r1, [sp, #28]
 80044e4:	4299      	cmp	r1, r3
 80044e6:	d90f      	bls.n	8004508 <_svfprintf_r+0x480>
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	911f      	str	r1, [sp, #124]	; 0x7c
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e7f7      	b.n	80044e0 <_svfprintf_r+0x458>
 80044f0:	465e      	mov	r6, fp
 80044f2:	e7bc      	b.n	800446e <_svfprintf_r+0x3e6>
 80044f4:	08006f8d 	.word	0x08006f8d
 80044f8:	7fefffff 	.word	0x7fefffff
 80044fc:	08006f7d 	.word	0x08006f7d
 8004500:	08006f81 	.word	0x08006f81
 8004504:	9b07      	ldr	r3, [sp, #28]
 8004506:	931f      	str	r3, [sp, #124]	; 0x7c
 8004508:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800450a:	2f47      	cmp	r7, #71	; 0x47
 800450c:	eba3 0308 	sub.w	r3, r3, r8
 8004510:	9307      	str	r3, [sp, #28]
 8004512:	f040 8100 	bne.w	8004716 <_svfprintf_r+0x68e>
 8004516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004518:	1cd9      	adds	r1, r3, #3
 800451a:	db02      	blt.n	8004522 <_svfprintf_r+0x49a>
 800451c:	459b      	cmp	fp, r3
 800451e:	f280 8126 	bge.w	800476e <_svfprintf_r+0x6e6>
 8004522:	9b06      	ldr	r3, [sp, #24]
 8004524:	3b02      	subs	r3, #2
 8004526:	9306      	str	r3, [sp, #24]
 8004528:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800452a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800452e:	1e53      	subs	r3, r2, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	bfa8      	it	ge
 8004534:	222b      	movge	r2, #43	; 0x2b
 8004536:	931b      	str	r3, [sp, #108]	; 0x6c
 8004538:	bfbc      	itt	lt
 800453a:	f1c2 0301 	rsblt	r3, r2, #1
 800453e:	222d      	movlt	r2, #45	; 0x2d
 8004540:	2b09      	cmp	r3, #9
 8004542:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8004546:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800454a:	f340 8100 	ble.w	800474e <_svfprintf_r+0x6c6>
 800454e:	260a      	movs	r6, #10
 8004550:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8004554:	fb93 f0f6 	sdiv	r0, r3, r6
 8004558:	fb06 3310 	mls	r3, r6, r0, r3
 800455c:	2809      	cmp	r0, #9
 800455e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8004562:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004566:	f102 31ff 	add.w	r1, r2, #4294967295
 800456a:	4603      	mov	r3, r0
 800456c:	f300 80e8 	bgt.w	8004740 <_svfprintf_r+0x6b8>
 8004570:	3330      	adds	r3, #48	; 0x30
 8004572:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004576:	3a02      	subs	r2, #2
 8004578:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800457c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8004580:	4282      	cmp	r2, r0
 8004582:	4619      	mov	r1, r3
 8004584:	f0c0 80de 	bcc.w	8004744 <_svfprintf_r+0x6bc>
 8004588:	9a07      	ldr	r2, [sp, #28]
 800458a:	ab1d      	add	r3, sp, #116	; 0x74
 800458c:	1acb      	subs	r3, r1, r3
 800458e:	2a01      	cmp	r2, #1
 8004590:	9314      	str	r3, [sp, #80]	; 0x50
 8004592:	eb03 0b02 	add.w	fp, r3, r2
 8004596:	dc02      	bgt.n	800459e <_svfprintf_r+0x516>
 8004598:	f015 0701 	ands.w	r7, r5, #1
 800459c:	d002      	beq.n	80045a4 <_svfprintf_r+0x51c>
 800459e:	2700      	movs	r7, #0
 80045a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a2:	449b      	add	fp, r3
 80045a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80045a6:	b113      	cbz	r3, 80045ae <_svfprintf_r+0x526>
 80045a8:	232d      	movs	r3, #45	; 0x2d
 80045aa:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80045ae:	2600      	movs	r6, #0
 80045b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80045b2:	455e      	cmp	r6, fp
 80045b4:	4633      	mov	r3, r6
 80045b6:	bfb8      	it	lt
 80045b8:	465b      	movlt	r3, fp
 80045ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80045bc:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80045c0:	b113      	cbz	r3, 80045c8 <_svfprintf_r+0x540>
 80045c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045c4:	3301      	adds	r3, #1
 80045c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80045c8:	f015 0302 	ands.w	r3, r5, #2
 80045cc:	9316      	str	r3, [sp, #88]	; 0x58
 80045ce:	bf1e      	ittt	ne
 80045d0:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 80045d2:	3302      	addne	r3, #2
 80045d4:	930f      	strne	r3, [sp, #60]	; 0x3c
 80045d6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80045da:	9317      	str	r3, [sp, #92]	; 0x5c
 80045dc:	d118      	bne.n	8004610 <_svfprintf_r+0x588>
 80045de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	9310      	str	r3, [sp, #64]	; 0x40
 80045e8:	dd12      	ble.n	8004610 <_svfprintf_r+0x588>
 80045ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	4bab      	ldr	r3, [pc, #684]	; (800489c <_svfprintf_r+0x814>)
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	f300 81d9 	bgt.w	80049a8 <_svfprintf_r+0x920>
 80045f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045fe:	4413      	add	r3, r2
 8004600:	9323      	str	r3, [sp, #140]	; 0x8c
 8004602:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004604:	3301      	adds	r3, #1
 8004606:	2b07      	cmp	r3, #7
 8004608:	9322      	str	r3, [sp, #136]	; 0x88
 800460a:	f300 81e6 	bgt.w	80049da <_svfprintf_r+0x952>
 800460e:	3408      	adds	r4, #8
 8004610:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004614:	b173      	cbz	r3, 8004634 <_svfprintf_r+0x5ac>
 8004616:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	2301      	movs	r3, #1
 800461e:	6063      	str	r3, [r4, #4]
 8004620:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004622:	3301      	adds	r3, #1
 8004624:	9323      	str	r3, [sp, #140]	; 0x8c
 8004626:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004628:	3301      	adds	r3, #1
 800462a:	2b07      	cmp	r3, #7
 800462c:	9322      	str	r3, [sp, #136]	; 0x88
 800462e:	f300 81de 	bgt.w	80049ee <_svfprintf_r+0x966>
 8004632:	3408      	adds	r4, #8
 8004634:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004636:	b16b      	cbz	r3, 8004654 <_svfprintf_r+0x5cc>
 8004638:	ab1a      	add	r3, sp, #104	; 0x68
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	2302      	movs	r3, #2
 800463e:	6063      	str	r3, [r4, #4]
 8004640:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004642:	3302      	adds	r3, #2
 8004644:	9323      	str	r3, [sp, #140]	; 0x8c
 8004646:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004648:	3301      	adds	r3, #1
 800464a:	2b07      	cmp	r3, #7
 800464c:	9322      	str	r3, [sp, #136]	; 0x88
 800464e:	f300 81d8 	bgt.w	8004a02 <_svfprintf_r+0x97a>
 8004652:	3408      	adds	r4, #8
 8004654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d118      	bne.n	800468c <_svfprintf_r+0x604>
 800465a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800465c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	9310      	str	r3, [sp, #64]	; 0x40
 8004664:	dd12      	ble.n	800468c <_svfprintf_r+0x604>
 8004666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004668:	2b10      	cmp	r3, #16
 800466a:	4b8d      	ldr	r3, [pc, #564]	; (80048a0 <_svfprintf_r+0x818>)
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	f300 81d2 	bgt.w	8004a16 <_svfprintf_r+0x98e>
 8004672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800467a:	4413      	add	r3, r2
 800467c:	9323      	str	r3, [sp, #140]	; 0x8c
 800467e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004680:	3301      	adds	r3, #1
 8004682:	2b07      	cmp	r3, #7
 8004684:	9322      	str	r3, [sp, #136]	; 0x88
 8004686:	f300 81df 	bgt.w	8004a48 <_svfprintf_r+0x9c0>
 800468a:	3408      	adds	r4, #8
 800468c:	eba6 060b 	sub.w	r6, r6, fp
 8004690:	2e00      	cmp	r6, #0
 8004692:	dd0f      	ble.n	80046b4 <_svfprintf_r+0x62c>
 8004694:	4b82      	ldr	r3, [pc, #520]	; (80048a0 <_svfprintf_r+0x818>)
 8004696:	2e10      	cmp	r6, #16
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	f300 81df 	bgt.w	8004a5c <_svfprintf_r+0x9d4>
 800469e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046a0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80046a2:	3301      	adds	r3, #1
 80046a4:	6066      	str	r6, [r4, #4]
 80046a6:	2b07      	cmp	r3, #7
 80046a8:	4406      	add	r6, r0
 80046aa:	9623      	str	r6, [sp, #140]	; 0x8c
 80046ac:	9322      	str	r3, [sp, #136]	; 0x88
 80046ae:	f300 81ec 	bgt.w	8004a8a <_svfprintf_r+0xa02>
 80046b2:	3408      	adds	r4, #8
 80046b4:	05eb      	lsls	r3, r5, #23
 80046b6:	f100 81f2 	bmi.w	8004a9e <_svfprintf_r+0xa16>
 80046ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046bc:	e884 0900 	stmia.w	r4, {r8, fp}
 80046c0:	445b      	add	r3, fp
 80046c2:	9323      	str	r3, [sp, #140]	; 0x8c
 80046c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046c6:	3301      	adds	r3, #1
 80046c8:	2b07      	cmp	r3, #7
 80046ca:	9322      	str	r3, [sp, #136]	; 0x88
 80046cc:	f340 8419 	ble.w	8004f02 <_svfprintf_r+0xe7a>
 80046d0:	aa21      	add	r2, sp, #132	; 0x84
 80046d2:	4649      	mov	r1, r9
 80046d4:	4650      	mov	r0, sl
 80046d6:	f002 f831 	bl	800673c <__ssprint_r>
 80046da:	2800      	cmp	r0, #0
 80046dc:	f040 8431 	bne.w	8004f42 <_svfprintf_r+0xeba>
 80046e0:	ac2e      	add	r4, sp, #184	; 0xb8
 80046e2:	076b      	lsls	r3, r5, #29
 80046e4:	f100 8410 	bmi.w	8004f08 <_svfprintf_r+0xe80>
 80046e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80046ee:	428a      	cmp	r2, r1
 80046f0:	bfac      	ite	ge
 80046f2:	189b      	addge	r3, r3, r2
 80046f4:	185b      	addlt	r3, r3, r1
 80046f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046fa:	b13b      	cbz	r3, 800470c <_svfprintf_r+0x684>
 80046fc:	aa21      	add	r2, sp, #132	; 0x84
 80046fe:	4649      	mov	r1, r9
 8004700:	4650      	mov	r0, sl
 8004702:	f002 f81b 	bl	800673c <__ssprint_r>
 8004706:	2800      	cmp	r0, #0
 8004708:	f040 841b 	bne.w	8004f42 <_svfprintf_r+0xeba>
 800470c:	2300      	movs	r3, #0
 800470e:	9f08      	ldr	r7, [sp, #32]
 8004710:	9322      	str	r3, [sp, #136]	; 0x88
 8004712:	ac2e      	add	r4, sp, #184	; 0xb8
 8004714:	e4f2      	b.n	80040fc <_svfprintf_r+0x74>
 8004716:	9b06      	ldr	r3, [sp, #24]
 8004718:	2b65      	cmp	r3, #101	; 0x65
 800471a:	f77f af05 	ble.w	8004528 <_svfprintf_r+0x4a0>
 800471e:	9b06      	ldr	r3, [sp, #24]
 8004720:	2b66      	cmp	r3, #102	; 0x66
 8004722:	d124      	bne.n	800476e <_svfprintf_r+0x6e6>
 8004724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004726:	2b00      	cmp	r3, #0
 8004728:	dd19      	ble.n	800475e <_svfprintf_r+0x6d6>
 800472a:	f1bb 0f00 	cmp.w	fp, #0
 800472e:	d101      	bne.n	8004734 <_svfprintf_r+0x6ac>
 8004730:	07ea      	lsls	r2, r5, #31
 8004732:	d502      	bpl.n	800473a <_svfprintf_r+0x6b2>
 8004734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004736:	4413      	add	r3, r2
 8004738:	445b      	add	r3, fp
 800473a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800473c:	469b      	mov	fp, r3
 800473e:	e731      	b.n	80045a4 <_svfprintf_r+0x51c>
 8004740:	460a      	mov	r2, r1
 8004742:	e707      	b.n	8004554 <_svfprintf_r+0x4cc>
 8004744:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004748:	f803 1b01 	strb.w	r1, [r3], #1
 800474c:	e718      	b.n	8004580 <_svfprintf_r+0x4f8>
 800474e:	2230      	movs	r2, #48	; 0x30
 8004750:	4413      	add	r3, r2
 8004752:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8004756:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800475a:	a91e      	add	r1, sp, #120	; 0x78
 800475c:	e714      	b.n	8004588 <_svfprintf_r+0x500>
 800475e:	f1bb 0f00 	cmp.w	fp, #0
 8004762:	d101      	bne.n	8004768 <_svfprintf_r+0x6e0>
 8004764:	07eb      	lsls	r3, r5, #31
 8004766:	d515      	bpl.n	8004794 <_svfprintf_r+0x70c>
 8004768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800476a:	3301      	adds	r3, #1
 800476c:	e7e4      	b.n	8004738 <_svfprintf_r+0x6b0>
 800476e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004770:	9b07      	ldr	r3, [sp, #28]
 8004772:	429a      	cmp	r2, r3
 8004774:	db06      	blt.n	8004784 <_svfprintf_r+0x6fc>
 8004776:	07ef      	lsls	r7, r5, #31
 8004778:	d50e      	bpl.n	8004798 <_svfprintf_r+0x710>
 800477a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800477c:	4413      	add	r3, r2
 800477e:	2267      	movs	r2, #103	; 0x67
 8004780:	9206      	str	r2, [sp, #24]
 8004782:	e7da      	b.n	800473a <_svfprintf_r+0x6b2>
 8004784:	9b07      	ldr	r3, [sp, #28]
 8004786:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004788:	2a00      	cmp	r2, #0
 800478a:	440b      	add	r3, r1
 800478c:	dcf7      	bgt.n	800477e <_svfprintf_r+0x6f6>
 800478e:	f1c2 0201 	rsb	r2, r2, #1
 8004792:	e7f3      	b.n	800477c <_svfprintf_r+0x6f4>
 8004794:	2301      	movs	r3, #1
 8004796:	e7d0      	b.n	800473a <_svfprintf_r+0x6b2>
 8004798:	4613      	mov	r3, r2
 800479a:	e7f0      	b.n	800477e <_svfprintf_r+0x6f6>
 800479c:	b10b      	cbz	r3, 80047a2 <_svfprintf_r+0x71a>
 800479e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80047a2:	f015 0f20 	tst.w	r5, #32
 80047a6:	f107 0304 	add.w	r3, r7, #4
 80047aa:	d008      	beq.n	80047be <_svfprintf_r+0x736>
 80047ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	17ce      	asrs	r6, r1, #31
 80047b2:	4608      	mov	r0, r1
 80047b4:	4631      	mov	r1, r6
 80047b6:	e9c2 0100 	strd	r0, r1, [r2]
 80047ba:	461f      	mov	r7, r3
 80047bc:	e49e      	b.n	80040fc <_svfprintf_r+0x74>
 80047be:	06ee      	lsls	r6, r5, #27
 80047c0:	d503      	bpl.n	80047ca <_svfprintf_r+0x742>
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047c6:	6011      	str	r1, [r2, #0]
 80047c8:	e7f7      	b.n	80047ba <_svfprintf_r+0x732>
 80047ca:	0668      	lsls	r0, r5, #25
 80047cc:	d5f9      	bpl.n	80047c2 <_svfprintf_r+0x73a>
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80047d4:	8011      	strh	r1, [r2, #0]
 80047d6:	e7f0      	b.n	80047ba <_svfprintf_r+0x732>
 80047d8:	f045 0510 	orr.w	r5, r5, #16
 80047dc:	f015 0320 	ands.w	r3, r5, #32
 80047e0:	d022      	beq.n	8004828 <_svfprintf_r+0x7a0>
 80047e2:	3707      	adds	r7, #7
 80047e4:	f027 0707 	bic.w	r7, r7, #7
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	9308      	str	r3, [sp, #32]
 80047ee:	e9d7 6700 	ldrd	r6, r7, [r7]
 80047f2:	2300      	movs	r3, #0
 80047f4:	2200      	movs	r2, #0
 80047f6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80047fa:	f1bb 3fff 	cmp.w	fp, #4294967295
 80047fe:	f000 83db 	beq.w	8004fb8 <_svfprintf_r+0xf30>
 8004802:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8004806:	920f      	str	r2, [sp, #60]	; 0x3c
 8004808:	ea56 0207 	orrs.w	r2, r6, r7
 800480c:	f040 83d9 	bne.w	8004fc2 <_svfprintf_r+0xf3a>
 8004810:	f1bb 0f00 	cmp.w	fp, #0
 8004814:	f000 80aa 	beq.w	800496c <_svfprintf_r+0x8e4>
 8004818:	2b01      	cmp	r3, #1
 800481a:	d076      	beq.n	800490a <_svfprintf_r+0x882>
 800481c:	2b02      	cmp	r3, #2
 800481e:	f000 8091 	beq.w	8004944 <_svfprintf_r+0x8bc>
 8004822:	2600      	movs	r6, #0
 8004824:	2700      	movs	r7, #0
 8004826:	e3d2      	b.n	8004fce <_svfprintf_r+0xf46>
 8004828:	1d3a      	adds	r2, r7, #4
 800482a:	f015 0110 	ands.w	r1, r5, #16
 800482e:	9208      	str	r2, [sp, #32]
 8004830:	d002      	beq.n	8004838 <_svfprintf_r+0x7b0>
 8004832:	683e      	ldr	r6, [r7, #0]
 8004834:	2700      	movs	r7, #0
 8004836:	e7dd      	b.n	80047f4 <_svfprintf_r+0x76c>
 8004838:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800483c:	d0f9      	beq.n	8004832 <_svfprintf_r+0x7aa>
 800483e:	883e      	ldrh	r6, [r7, #0]
 8004840:	2700      	movs	r7, #0
 8004842:	e7d6      	b.n	80047f2 <_svfprintf_r+0x76a>
 8004844:	1d3b      	adds	r3, r7, #4
 8004846:	9308      	str	r3, [sp, #32]
 8004848:	2330      	movs	r3, #48	; 0x30
 800484a:	2278      	movs	r2, #120	; 0x78
 800484c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8004850:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <_svfprintf_r+0x81c>)
 8004852:	683e      	ldr	r6, [r7, #0]
 8004854:	9315      	str	r3, [sp, #84]	; 0x54
 8004856:	2700      	movs	r7, #0
 8004858:	f045 0502 	orr.w	r5, r5, #2
 800485c:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8004860:	2302      	movs	r3, #2
 8004862:	9206      	str	r2, [sp, #24]
 8004864:	e7c6      	b.n	80047f4 <_svfprintf_r+0x76c>
 8004866:	2600      	movs	r6, #0
 8004868:	1d3b      	adds	r3, r7, #4
 800486a:	f1bb 3fff 	cmp.w	fp, #4294967295
 800486e:	9308      	str	r3, [sp, #32]
 8004870:	f8d7 8000 	ldr.w	r8, [r7]
 8004874:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8004878:	d00a      	beq.n	8004890 <_svfprintf_r+0x808>
 800487a:	465a      	mov	r2, fp
 800487c:	4631      	mov	r1, r6
 800487e:	4640      	mov	r0, r8
 8004880:	f001 fc54 	bl	800612c <memchr>
 8004884:	2800      	cmp	r0, #0
 8004886:	f000 808d 	beq.w	80049a4 <_svfprintf_r+0x91c>
 800488a:	eba0 0b08 	sub.w	fp, r0, r8
 800488e:	e5c4      	b.n	800441a <_svfprintf_r+0x392>
 8004890:	4640      	mov	r0, r8
 8004892:	f7fb fc5d 	bl	8000150 <strlen>
 8004896:	4683      	mov	fp, r0
 8004898:	e5bf      	b.n	800441a <_svfprintf_r+0x392>
 800489a:	bf00      	nop
 800489c:	08006fb1 	.word	0x08006fb1
 80048a0:	08006fc1 	.word	0x08006fc1
 80048a4:	08006f9e 	.word	0x08006f9e
 80048a8:	f045 0510 	orr.w	r5, r5, #16
 80048ac:	06a9      	lsls	r1, r5, #26
 80048ae:	d509      	bpl.n	80048c4 <_svfprintf_r+0x83c>
 80048b0:	3707      	adds	r7, #7
 80048b2:	f027 0707 	bic.w	r7, r7, #7
 80048b6:	f107 0308 	add.w	r3, r7, #8
 80048ba:	9308      	str	r3, [sp, #32]
 80048bc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80048c0:	2301      	movs	r3, #1
 80048c2:	e797      	b.n	80047f4 <_svfprintf_r+0x76c>
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	f015 0f10 	tst.w	r5, #16
 80048ca:	9308      	str	r3, [sp, #32]
 80048cc:	d001      	beq.n	80048d2 <_svfprintf_r+0x84a>
 80048ce:	683e      	ldr	r6, [r7, #0]
 80048d0:	e002      	b.n	80048d8 <_svfprintf_r+0x850>
 80048d2:	066a      	lsls	r2, r5, #25
 80048d4:	d5fb      	bpl.n	80048ce <_svfprintf_r+0x846>
 80048d6:	883e      	ldrh	r6, [r7, #0]
 80048d8:	2700      	movs	r7, #0
 80048da:	e7f1      	b.n	80048c0 <_svfprintf_r+0x838>
 80048dc:	b10b      	cbz	r3, 80048e2 <_svfprintf_r+0x85a>
 80048de:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80048e2:	4ba3      	ldr	r3, [pc, #652]	; (8004b70 <_svfprintf_r+0xae8>)
 80048e4:	e4c5      	b.n	8004272 <_svfprintf_r+0x1ea>
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	f015 0f10 	tst.w	r5, #16
 80048ec:	9308      	str	r3, [sp, #32]
 80048ee:	d001      	beq.n	80048f4 <_svfprintf_r+0x86c>
 80048f0:	683e      	ldr	r6, [r7, #0]
 80048f2:	e002      	b.n	80048fa <_svfprintf_r+0x872>
 80048f4:	066e      	lsls	r6, r5, #25
 80048f6:	d5fb      	bpl.n	80048f0 <_svfprintf_r+0x868>
 80048f8:	883e      	ldrh	r6, [r7, #0]
 80048fa:	2700      	movs	r7, #0
 80048fc:	e4c5      	b.n	800428a <_svfprintf_r+0x202>
 80048fe:	4643      	mov	r3, r8
 8004900:	e366      	b.n	8004fd0 <_svfprintf_r+0xf48>
 8004902:	2f00      	cmp	r7, #0
 8004904:	bf08      	it	eq
 8004906:	2e0a      	cmpeq	r6, #10
 8004908:	d205      	bcs.n	8004916 <_svfprintf_r+0x88e>
 800490a:	3630      	adds	r6, #48	; 0x30
 800490c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8004910:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8004914:	e377      	b.n	8005006 <_svfprintf_r+0xf7e>
 8004916:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800491a:	4630      	mov	r0, r6
 800491c:	4639      	mov	r1, r7
 800491e:	220a      	movs	r2, #10
 8004920:	2300      	movs	r3, #0
 8004922:	f7fc f8ad 	bl	8000a80 <__aeabi_uldivmod>
 8004926:	3230      	adds	r2, #48	; 0x30
 8004928:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800492c:	2300      	movs	r3, #0
 800492e:	4630      	mov	r0, r6
 8004930:	4639      	mov	r1, r7
 8004932:	220a      	movs	r2, #10
 8004934:	f7fc f8a4 	bl	8000a80 <__aeabi_uldivmod>
 8004938:	4606      	mov	r6, r0
 800493a:	460f      	mov	r7, r1
 800493c:	ea56 0307 	orrs.w	r3, r6, r7
 8004940:	d1eb      	bne.n	800491a <_svfprintf_r+0x892>
 8004942:	e360      	b.n	8005006 <_svfprintf_r+0xf7e>
 8004944:	2600      	movs	r6, #0
 8004946:	2700      	movs	r7, #0
 8004948:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800494c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800494e:	f006 030f 	and.w	r3, r6, #15
 8004952:	5cd3      	ldrb	r3, [r2, r3]
 8004954:	093a      	lsrs	r2, r7, #4
 8004956:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800495a:	0933      	lsrs	r3, r6, #4
 800495c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004960:	461e      	mov	r6, r3
 8004962:	4617      	mov	r7, r2
 8004964:	ea56 0307 	orrs.w	r3, r6, r7
 8004968:	d1f0      	bne.n	800494c <_svfprintf_r+0x8c4>
 800496a:	e34c      	b.n	8005006 <_svfprintf_r+0xf7e>
 800496c:	b93b      	cbnz	r3, 800497e <_svfprintf_r+0x8f6>
 800496e:	07ea      	lsls	r2, r5, #31
 8004970:	d505      	bpl.n	800497e <_svfprintf_r+0x8f6>
 8004972:	2330      	movs	r3, #48	; 0x30
 8004974:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8004978:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800497c:	e343      	b.n	8005006 <_svfprintf_r+0xf7e>
 800497e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8004982:	e340      	b.n	8005006 <_svfprintf_r+0xf7e>
 8004984:	b10b      	cbz	r3, 800498a <_svfprintf_r+0x902>
 8004986:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800498a:	9b06      	ldr	r3, [sp, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 82f7 	beq.w	8004f80 <_svfprintf_r+0xef8>
 8004992:	2600      	movs	r6, #0
 8004994:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004998:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800499c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80049a0:	9708      	str	r7, [sp, #32]
 80049a2:	e4e3      	b.n	800436c <_svfprintf_r+0x2e4>
 80049a4:	4606      	mov	r6, r0
 80049a6:	e538      	b.n	800441a <_svfprintf_r+0x392>
 80049a8:	2310      	movs	r3, #16
 80049aa:	6063      	str	r3, [r4, #4]
 80049ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049ae:	3310      	adds	r3, #16
 80049b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80049b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049b4:	3301      	adds	r3, #1
 80049b6:	2b07      	cmp	r3, #7
 80049b8:	9322      	str	r3, [sp, #136]	; 0x88
 80049ba:	dc04      	bgt.n	80049c6 <_svfprintf_r+0x93e>
 80049bc:	3408      	adds	r4, #8
 80049be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049c0:	3b10      	subs	r3, #16
 80049c2:	9310      	str	r3, [sp, #64]	; 0x40
 80049c4:	e611      	b.n	80045ea <_svfprintf_r+0x562>
 80049c6:	aa21      	add	r2, sp, #132	; 0x84
 80049c8:	4649      	mov	r1, r9
 80049ca:	4650      	mov	r0, sl
 80049cc:	f001 feb6 	bl	800673c <__ssprint_r>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	f040 82b6 	bne.w	8004f42 <_svfprintf_r+0xeba>
 80049d6:	ac2e      	add	r4, sp, #184	; 0xb8
 80049d8:	e7f1      	b.n	80049be <_svfprintf_r+0x936>
 80049da:	aa21      	add	r2, sp, #132	; 0x84
 80049dc:	4649      	mov	r1, r9
 80049de:	4650      	mov	r0, sl
 80049e0:	f001 feac 	bl	800673c <__ssprint_r>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	f040 82ac 	bne.w	8004f42 <_svfprintf_r+0xeba>
 80049ea:	ac2e      	add	r4, sp, #184	; 0xb8
 80049ec:	e610      	b.n	8004610 <_svfprintf_r+0x588>
 80049ee:	aa21      	add	r2, sp, #132	; 0x84
 80049f0:	4649      	mov	r1, r9
 80049f2:	4650      	mov	r0, sl
 80049f4:	f001 fea2 	bl	800673c <__ssprint_r>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	f040 82a2 	bne.w	8004f42 <_svfprintf_r+0xeba>
 80049fe:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a00:	e618      	b.n	8004634 <_svfprintf_r+0x5ac>
 8004a02:	aa21      	add	r2, sp, #132	; 0x84
 8004a04:	4649      	mov	r1, r9
 8004a06:	4650      	mov	r0, sl
 8004a08:	f001 fe98 	bl	800673c <__ssprint_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	f040 8298 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004a12:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a14:	e61e      	b.n	8004654 <_svfprintf_r+0x5cc>
 8004a16:	2310      	movs	r3, #16
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a1c:	3310      	adds	r3, #16
 8004a1e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a22:	3301      	adds	r3, #1
 8004a24:	2b07      	cmp	r3, #7
 8004a26:	9322      	str	r3, [sp, #136]	; 0x88
 8004a28:	dc04      	bgt.n	8004a34 <_svfprintf_r+0x9ac>
 8004a2a:	3408      	adds	r4, #8
 8004a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a2e:	3b10      	subs	r3, #16
 8004a30:	9310      	str	r3, [sp, #64]	; 0x40
 8004a32:	e618      	b.n	8004666 <_svfprintf_r+0x5de>
 8004a34:	aa21      	add	r2, sp, #132	; 0x84
 8004a36:	4649      	mov	r1, r9
 8004a38:	4650      	mov	r0, sl
 8004a3a:	f001 fe7f 	bl	800673c <__ssprint_r>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f040 827f 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004a44:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a46:	e7f1      	b.n	8004a2c <_svfprintf_r+0x9a4>
 8004a48:	aa21      	add	r2, sp, #132	; 0x84
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	f001 fe75 	bl	800673c <__ssprint_r>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	f040 8275 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004a58:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a5a:	e617      	b.n	800468c <_svfprintf_r+0x604>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	6063      	str	r3, [r4, #4]
 8004a60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a62:	3310      	adds	r3, #16
 8004a64:	9323      	str	r3, [sp, #140]	; 0x8c
 8004a66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a68:	3301      	adds	r3, #1
 8004a6a:	2b07      	cmp	r3, #7
 8004a6c:	9322      	str	r3, [sp, #136]	; 0x88
 8004a6e:	dc02      	bgt.n	8004a76 <_svfprintf_r+0x9ee>
 8004a70:	3408      	adds	r4, #8
 8004a72:	3e10      	subs	r6, #16
 8004a74:	e60e      	b.n	8004694 <_svfprintf_r+0x60c>
 8004a76:	aa21      	add	r2, sp, #132	; 0x84
 8004a78:	4649      	mov	r1, r9
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	f001 fe5e 	bl	800673c <__ssprint_r>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	f040 825e 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004a86:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a88:	e7f3      	b.n	8004a72 <_svfprintf_r+0x9ea>
 8004a8a:	aa21      	add	r2, sp, #132	; 0x84
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4650      	mov	r0, sl
 8004a90:	f001 fe54 	bl	800673c <__ssprint_r>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	f040 8254 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004a9a:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a9c:	e60a      	b.n	80046b4 <_svfprintf_r+0x62c>
 8004a9e:	9b06      	ldr	r3, [sp, #24]
 8004aa0:	2b65      	cmp	r3, #101	; 0x65
 8004aa2:	f340 81a9 	ble.w	8004df8 <_svfprintf_r+0xd70>
 8004aa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004aaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004aac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004aae:	f7fb ff77 	bl	80009a0 <__aeabi_dcmpeq>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d062      	beq.n	8004b7c <_svfprintf_r+0xaf4>
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <_svfprintf_r+0xaec>)
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	2301      	movs	r3, #1
 8004abc:	6063      	str	r3, [r4, #4]
 8004abe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	9323      	str	r3, [sp, #140]	; 0x8c
 8004ac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	2b07      	cmp	r3, #7
 8004aca:	9322      	str	r3, [sp, #136]	; 0x88
 8004acc:	dc25      	bgt.n	8004b1a <_svfprintf_r+0xa92>
 8004ace:	3408      	adds	r4, #8
 8004ad0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ad2:	9a07      	ldr	r2, [sp, #28]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	db02      	blt.n	8004ade <_svfprintf_r+0xa56>
 8004ad8:	07ee      	lsls	r6, r5, #31
 8004ada:	f57f ae02 	bpl.w	80046e2 <_svfprintf_r+0x65a>
 8004ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004aea:	4413      	add	r3, r2
 8004aec:	9323      	str	r3, [sp, #140]	; 0x8c
 8004aee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004af0:	3301      	adds	r3, #1
 8004af2:	2b07      	cmp	r3, #7
 8004af4:	9322      	str	r3, [sp, #136]	; 0x88
 8004af6:	dc1a      	bgt.n	8004b2e <_svfprintf_r+0xaa6>
 8004af8:	3408      	adds	r4, #8
 8004afa:	9b07      	ldr	r3, [sp, #28]
 8004afc:	1e5e      	subs	r6, r3, #1
 8004afe:	2e00      	cmp	r6, #0
 8004b00:	f77f adef 	ble.w	80046e2 <_svfprintf_r+0x65a>
 8004b04:	f04f 0810 	mov.w	r8, #16
 8004b08:	4f1b      	ldr	r7, [pc, #108]	; (8004b78 <_svfprintf_r+0xaf0>)
 8004b0a:	2e10      	cmp	r6, #16
 8004b0c:	6027      	str	r7, [r4, #0]
 8004b0e:	dc18      	bgt.n	8004b42 <_svfprintf_r+0xaba>
 8004b10:	6066      	str	r6, [r4, #4]
 8004b12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b14:	441e      	add	r6, r3
 8004b16:	9623      	str	r6, [sp, #140]	; 0x8c
 8004b18:	e5d4      	b.n	80046c4 <_svfprintf_r+0x63c>
 8004b1a:	aa21      	add	r2, sp, #132	; 0x84
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4650      	mov	r0, sl
 8004b20:	f001 fe0c 	bl	800673c <__ssprint_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	f040 820c 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004b2a:	ac2e      	add	r4, sp, #184	; 0xb8
 8004b2c:	e7d0      	b.n	8004ad0 <_svfprintf_r+0xa48>
 8004b2e:	aa21      	add	r2, sp, #132	; 0x84
 8004b30:	4649      	mov	r1, r9
 8004b32:	4650      	mov	r0, sl
 8004b34:	f001 fe02 	bl	800673c <__ssprint_r>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f040 8202 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004b3e:	ac2e      	add	r4, sp, #184	; 0xb8
 8004b40:	e7db      	b.n	8004afa <_svfprintf_r+0xa72>
 8004b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b44:	f8c4 8004 	str.w	r8, [r4, #4]
 8004b48:	3310      	adds	r3, #16
 8004b4a:	9323      	str	r3, [sp, #140]	; 0x8c
 8004b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b4e:	3301      	adds	r3, #1
 8004b50:	2b07      	cmp	r3, #7
 8004b52:	9322      	str	r3, [sp, #136]	; 0x88
 8004b54:	dc02      	bgt.n	8004b5c <_svfprintf_r+0xad4>
 8004b56:	3408      	adds	r4, #8
 8004b58:	3e10      	subs	r6, #16
 8004b5a:	e7d6      	b.n	8004b0a <_svfprintf_r+0xa82>
 8004b5c:	aa21      	add	r2, sp, #132	; 0x84
 8004b5e:	4649      	mov	r1, r9
 8004b60:	4650      	mov	r0, sl
 8004b62:	f001 fdeb 	bl	800673c <__ssprint_r>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f040 81eb 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004b6c:	ac2e      	add	r4, sp, #184	; 0xb8
 8004b6e:	e7f3      	b.n	8004b58 <_svfprintf_r+0xad0>
 8004b70:	08006f9e 	.word	0x08006f9e
 8004b74:	08006faf 	.word	0x08006faf
 8004b78:	08006fc1 	.word	0x08006fc1
 8004b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	dc7a      	bgt.n	8004c78 <_svfprintf_r+0xbf0>
 8004b82:	4b9b      	ldr	r3, [pc, #620]	; (8004df0 <_svfprintf_r+0xd68>)
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	2301      	movs	r3, #1
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b92:	3301      	adds	r3, #1
 8004b94:	2b07      	cmp	r3, #7
 8004b96:	9322      	str	r3, [sp, #136]	; 0x88
 8004b98:	dc44      	bgt.n	8004c24 <_svfprintf_r+0xb9c>
 8004b9a:	3408      	adds	r4, #8
 8004b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b9e:	b923      	cbnz	r3, 8004baa <_svfprintf_r+0xb22>
 8004ba0:	9b07      	ldr	r3, [sp, #28]
 8004ba2:	b913      	cbnz	r3, 8004baa <_svfprintf_r+0xb22>
 8004ba4:	07e8      	lsls	r0, r5, #31
 8004ba6:	f57f ad9c 	bpl.w	80046e2 <_svfprintf_r+0x65a>
 8004baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb2:	6063      	str	r3, [r4, #4]
 8004bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bb6:	4413      	add	r3, r2
 8004bb8:	9323      	str	r3, [sp, #140]	; 0x8c
 8004bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	9322      	str	r3, [sp, #136]	; 0x88
 8004bc2:	dc39      	bgt.n	8004c38 <_svfprintf_r+0xbb0>
 8004bc4:	f104 0308 	add.w	r3, r4, #8
 8004bc8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004bca:	2e00      	cmp	r6, #0
 8004bcc:	da19      	bge.n	8004c02 <_svfprintf_r+0xb7a>
 8004bce:	2410      	movs	r4, #16
 8004bd0:	4f88      	ldr	r7, [pc, #544]	; (8004df4 <_svfprintf_r+0xd6c>)
 8004bd2:	4276      	negs	r6, r6
 8004bd4:	2e10      	cmp	r6, #16
 8004bd6:	601f      	str	r7, [r3, #0]
 8004bd8:	dc38      	bgt.n	8004c4c <_svfprintf_r+0xbc4>
 8004bda:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004bdc:	605e      	str	r6, [r3, #4]
 8004bde:	4416      	add	r6, r2
 8004be0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004be2:	9623      	str	r6, [sp, #140]	; 0x8c
 8004be4:	3201      	adds	r2, #1
 8004be6:	2a07      	cmp	r2, #7
 8004be8:	f103 0308 	add.w	r3, r3, #8
 8004bec:	9222      	str	r2, [sp, #136]	; 0x88
 8004bee:	dd08      	ble.n	8004c02 <_svfprintf_r+0xb7a>
 8004bf0:	aa21      	add	r2, sp, #132	; 0x84
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	4650      	mov	r0, sl
 8004bf6:	f001 fda1 	bl	800673c <__ssprint_r>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f040 81a1 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004c00:	ab2e      	add	r3, sp, #184	; 0xb8
 8004c02:	9a07      	ldr	r2, [sp, #28]
 8004c04:	9907      	ldr	r1, [sp, #28]
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004c0a:	f8c3 8000 	str.w	r8, [r3]
 8004c0e:	440a      	add	r2, r1
 8004c10:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c12:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c14:	3201      	adds	r2, #1
 8004c16:	2a07      	cmp	r2, #7
 8004c18:	9222      	str	r2, [sp, #136]	; 0x88
 8004c1a:	f73f ad59 	bgt.w	80046d0 <_svfprintf_r+0x648>
 8004c1e:	f103 0408 	add.w	r4, r3, #8
 8004c22:	e55e      	b.n	80046e2 <_svfprintf_r+0x65a>
 8004c24:	aa21      	add	r2, sp, #132	; 0x84
 8004c26:	4649      	mov	r1, r9
 8004c28:	4650      	mov	r0, sl
 8004c2a:	f001 fd87 	bl	800673c <__ssprint_r>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	f040 8187 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004c34:	ac2e      	add	r4, sp, #184	; 0xb8
 8004c36:	e7b1      	b.n	8004b9c <_svfprintf_r+0xb14>
 8004c38:	aa21      	add	r2, sp, #132	; 0x84
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	f001 fd7d 	bl	800673c <__ssprint_r>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	f040 817d 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004c48:	ab2e      	add	r3, sp, #184	; 0xb8
 8004c4a:	e7bd      	b.n	8004bc8 <_svfprintf_r+0xb40>
 8004c4c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004c4e:	605c      	str	r4, [r3, #4]
 8004c50:	3210      	adds	r2, #16
 8004c52:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c56:	3201      	adds	r2, #1
 8004c58:	2a07      	cmp	r2, #7
 8004c5a:	9222      	str	r2, [sp, #136]	; 0x88
 8004c5c:	dc02      	bgt.n	8004c64 <_svfprintf_r+0xbdc>
 8004c5e:	3308      	adds	r3, #8
 8004c60:	3e10      	subs	r6, #16
 8004c62:	e7b7      	b.n	8004bd4 <_svfprintf_r+0xb4c>
 8004c64:	aa21      	add	r2, sp, #132	; 0x84
 8004c66:	4649      	mov	r1, r9
 8004c68:	4650      	mov	r0, sl
 8004c6a:	f001 fd67 	bl	800673c <__ssprint_r>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f040 8167 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004c74:	ab2e      	add	r3, sp, #184	; 0xb8
 8004c76:	e7f3      	b.n	8004c60 <_svfprintf_r+0xbd8>
 8004c78:	9b07      	ldr	r3, [sp, #28]
 8004c7a:	42bb      	cmp	r3, r7
 8004c7c:	bfa8      	it	ge
 8004c7e:	463b      	movge	r3, r7
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	461e      	mov	r6, r3
 8004c84:	dd0b      	ble.n	8004c9e <_svfprintf_r+0xc16>
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c8a:	f8c4 8000 	str.w	r8, [r4]
 8004c8e:	4433      	add	r3, r6
 8004c90:	9323      	str	r3, [sp, #140]	; 0x8c
 8004c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c94:	3301      	adds	r3, #1
 8004c96:	2b07      	cmp	r3, #7
 8004c98:	9322      	str	r3, [sp, #136]	; 0x88
 8004c9a:	dc5f      	bgt.n	8004d5c <_svfprintf_r+0xcd4>
 8004c9c:	3408      	adds	r4, #8
 8004c9e:	2e00      	cmp	r6, #0
 8004ca0:	bfb4      	ite	lt
 8004ca2:	463e      	movlt	r6, r7
 8004ca4:	1bbe      	subge	r6, r7, r6
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	dd0f      	ble.n	8004cca <_svfprintf_r+0xc42>
 8004caa:	f8df b148 	ldr.w	fp, [pc, #328]	; 8004df4 <_svfprintf_r+0xd6c>
 8004cae:	2e10      	cmp	r6, #16
 8004cb0:	f8c4 b000 	str.w	fp, [r4]
 8004cb4:	dc5c      	bgt.n	8004d70 <_svfprintf_r+0xce8>
 8004cb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cb8:	6066      	str	r6, [r4, #4]
 8004cba:	441e      	add	r6, r3
 8004cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cbe:	9623      	str	r6, [sp, #140]	; 0x8c
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	2b07      	cmp	r3, #7
 8004cc4:	9322      	str	r3, [sp, #136]	; 0x88
 8004cc6:	dc6a      	bgt.n	8004d9e <_svfprintf_r+0xd16>
 8004cc8:	3408      	adds	r4, #8
 8004cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ccc:	9a07      	ldr	r2, [sp, #28]
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	db01      	blt.n	8004cd6 <_svfprintf_r+0xc4e>
 8004cd2:	07e9      	lsls	r1, r5, #31
 8004cd4:	d50d      	bpl.n	8004cf2 <_svfprintf_r+0xc6a>
 8004cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cde:	6063      	str	r3, [r4, #4]
 8004ce0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ce2:	4413      	add	r3, r2
 8004ce4:	9323      	str	r3, [sp, #140]	; 0x8c
 8004ce6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ce8:	3301      	adds	r3, #1
 8004cea:	2b07      	cmp	r3, #7
 8004cec:	9322      	str	r3, [sp, #136]	; 0x88
 8004cee:	dc60      	bgt.n	8004db2 <_svfprintf_r+0xd2a>
 8004cf0:	3408      	adds	r4, #8
 8004cf2:	9b07      	ldr	r3, [sp, #28]
 8004cf4:	9a07      	ldr	r2, [sp, #28]
 8004cf6:	1bde      	subs	r6, r3, r7
 8004cf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	429e      	cmp	r6, r3
 8004cfe:	bfa8      	it	ge
 8004d00:	461e      	movge	r6, r3
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	dd0b      	ble.n	8004d1e <_svfprintf_r+0xc96>
 8004d06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d08:	4447      	add	r7, r8
 8004d0a:	4433      	add	r3, r6
 8004d0c:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d10:	6027      	str	r7, [r4, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	2b07      	cmp	r3, #7
 8004d16:	6066      	str	r6, [r4, #4]
 8004d18:	9322      	str	r3, [sp, #136]	; 0x88
 8004d1a:	dc54      	bgt.n	8004dc6 <_svfprintf_r+0xd3e>
 8004d1c:	3408      	adds	r4, #8
 8004d1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d20:	9a07      	ldr	r2, [sp, #28]
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	eba2 0303 	sub.w	r3, r2, r3
 8004d28:	bfb4      	ite	lt
 8004d2a:	461e      	movlt	r6, r3
 8004d2c:	1b9e      	subge	r6, r3, r6
 8004d2e:	2e00      	cmp	r6, #0
 8004d30:	f77f acd7 	ble.w	80046e2 <_svfprintf_r+0x65a>
 8004d34:	f04f 0810 	mov.w	r8, #16
 8004d38:	4f2e      	ldr	r7, [pc, #184]	; (8004df4 <_svfprintf_r+0xd6c>)
 8004d3a:	2e10      	cmp	r6, #16
 8004d3c:	6027      	str	r7, [r4, #0]
 8004d3e:	f77f aee7 	ble.w	8004b10 <_svfprintf_r+0xa88>
 8004d42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d44:	f8c4 8004 	str.w	r8, [r4, #4]
 8004d48:	3310      	adds	r3, #16
 8004d4a:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d4e:	3301      	adds	r3, #1
 8004d50:	2b07      	cmp	r3, #7
 8004d52:	9322      	str	r3, [sp, #136]	; 0x88
 8004d54:	dc41      	bgt.n	8004dda <_svfprintf_r+0xd52>
 8004d56:	3408      	adds	r4, #8
 8004d58:	3e10      	subs	r6, #16
 8004d5a:	e7ee      	b.n	8004d3a <_svfprintf_r+0xcb2>
 8004d5c:	aa21      	add	r2, sp, #132	; 0x84
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4650      	mov	r0, sl
 8004d62:	f001 fceb 	bl	800673c <__ssprint_r>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	f040 80eb 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004d6c:	ac2e      	add	r4, sp, #184	; 0xb8
 8004d6e:	e796      	b.n	8004c9e <_svfprintf_r+0xc16>
 8004d70:	2310      	movs	r3, #16
 8004d72:	6063      	str	r3, [r4, #4]
 8004d74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d76:	3310      	adds	r3, #16
 8004d78:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	2b07      	cmp	r3, #7
 8004d80:	9322      	str	r3, [sp, #136]	; 0x88
 8004d82:	dc02      	bgt.n	8004d8a <_svfprintf_r+0xd02>
 8004d84:	3408      	adds	r4, #8
 8004d86:	3e10      	subs	r6, #16
 8004d88:	e791      	b.n	8004cae <_svfprintf_r+0xc26>
 8004d8a:	aa21      	add	r2, sp, #132	; 0x84
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	4650      	mov	r0, sl
 8004d90:	f001 fcd4 	bl	800673c <__ssprint_r>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	f040 80d4 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004d9a:	ac2e      	add	r4, sp, #184	; 0xb8
 8004d9c:	e7f3      	b.n	8004d86 <_svfprintf_r+0xcfe>
 8004d9e:	aa21      	add	r2, sp, #132	; 0x84
 8004da0:	4649      	mov	r1, r9
 8004da2:	4650      	mov	r0, sl
 8004da4:	f001 fcca 	bl	800673c <__ssprint_r>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	f040 80ca 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004dae:	ac2e      	add	r4, sp, #184	; 0xb8
 8004db0:	e78b      	b.n	8004cca <_svfprintf_r+0xc42>
 8004db2:	aa21      	add	r2, sp, #132	; 0x84
 8004db4:	4649      	mov	r1, r9
 8004db6:	4650      	mov	r0, sl
 8004db8:	f001 fcc0 	bl	800673c <__ssprint_r>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	f040 80c0 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004dc2:	ac2e      	add	r4, sp, #184	; 0xb8
 8004dc4:	e795      	b.n	8004cf2 <_svfprintf_r+0xc6a>
 8004dc6:	aa21      	add	r2, sp, #132	; 0x84
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4650      	mov	r0, sl
 8004dcc:	f001 fcb6 	bl	800673c <__ssprint_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	f040 80b6 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004dd6:	ac2e      	add	r4, sp, #184	; 0xb8
 8004dd8:	e7a1      	b.n	8004d1e <_svfprintf_r+0xc96>
 8004dda:	aa21      	add	r2, sp, #132	; 0x84
 8004ddc:	4649      	mov	r1, r9
 8004dde:	4650      	mov	r0, sl
 8004de0:	f001 fcac 	bl	800673c <__ssprint_r>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	f040 80ac 	bne.w	8004f42 <_svfprintf_r+0xeba>
 8004dea:	ac2e      	add	r4, sp, #184	; 0xb8
 8004dec:	e7b4      	b.n	8004d58 <_svfprintf_r+0xcd0>
 8004dee:	bf00      	nop
 8004df0:	08006faf 	.word	0x08006faf
 8004df4:	08006fc1 	.word	0x08006fc1
 8004df8:	9b07      	ldr	r3, [sp, #28]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	dc01      	bgt.n	8004e02 <_svfprintf_r+0xd7a>
 8004dfe:	07ea      	lsls	r2, r5, #31
 8004e00:	d576      	bpl.n	8004ef0 <_svfprintf_r+0xe68>
 8004e02:	2301      	movs	r3, #1
 8004e04:	6063      	str	r3, [r4, #4]
 8004e06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e08:	f8c4 8000 	str.w	r8, [r4]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004e10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e12:	3301      	adds	r3, #1
 8004e14:	2b07      	cmp	r3, #7
 8004e16:	9322      	str	r3, [sp, #136]	; 0x88
 8004e18:	dc36      	bgt.n	8004e88 <_svfprintf_r+0xe00>
 8004e1a:	3408      	adds	r4, #8
 8004e1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e24:	6063      	str	r3, [r4, #4]
 8004e26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e28:	4413      	add	r3, r2
 8004e2a:	9323      	str	r3, [sp, #140]	; 0x8c
 8004e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e2e:	3301      	adds	r3, #1
 8004e30:	2b07      	cmp	r3, #7
 8004e32:	9322      	str	r3, [sp, #136]	; 0x88
 8004e34:	dc31      	bgt.n	8004e9a <_svfprintf_r+0xe12>
 8004e36:	3408      	adds	r4, #8
 8004e38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004e3e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004e40:	f7fb fdae 	bl	80009a0 <__aeabi_dcmpeq>
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	1e5e      	subs	r6, r3, #1
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d12f      	bne.n	8004eac <_svfprintf_r+0xe24>
 8004e4c:	f108 0301 	add.w	r3, r8, #1
 8004e50:	e884 0048 	stmia.w	r4, {r3, r6}
 8004e54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e56:	9a07      	ldr	r2, [sp, #28]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	9323      	str	r3, [sp, #140]	; 0x8c
 8004e5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e60:	3301      	adds	r3, #1
 8004e62:	2b07      	cmp	r3, #7
 8004e64:	9322      	str	r3, [sp, #136]	; 0x88
 8004e66:	dd4a      	ble.n	8004efe <_svfprintf_r+0xe76>
 8004e68:	aa21      	add	r2, sp, #132	; 0x84
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	4650      	mov	r0, sl
 8004e6e:	f001 fc65 	bl	800673c <__ssprint_r>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d165      	bne.n	8004f42 <_svfprintf_r+0xeba>
 8004e76:	ac2e      	add	r4, sp, #184	; 0xb8
 8004e78:	ab1d      	add	r3, sp, #116	; 0x74
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004e80:	6063      	str	r3, [r4, #4]
 8004e82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e84:	4413      	add	r3, r2
 8004e86:	e41c      	b.n	80046c2 <_svfprintf_r+0x63a>
 8004e88:	aa21      	add	r2, sp, #132	; 0x84
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	f001 fc55 	bl	800673c <__ssprint_r>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d155      	bne.n	8004f42 <_svfprintf_r+0xeba>
 8004e96:	ac2e      	add	r4, sp, #184	; 0xb8
 8004e98:	e7c0      	b.n	8004e1c <_svfprintf_r+0xd94>
 8004e9a:	aa21      	add	r2, sp, #132	; 0x84
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f001 fc4c 	bl	800673c <__ssprint_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d14c      	bne.n	8004f42 <_svfprintf_r+0xeba>
 8004ea8:	ac2e      	add	r4, sp, #184	; 0xb8
 8004eaa:	e7c5      	b.n	8004e38 <_svfprintf_r+0xdb0>
 8004eac:	2e00      	cmp	r6, #0
 8004eae:	dde3      	ble.n	8004e78 <_svfprintf_r+0xdf0>
 8004eb0:	f04f 0810 	mov.w	r8, #16
 8004eb4:	4f58      	ldr	r7, [pc, #352]	; (8005018 <_svfprintf_r+0xf90>)
 8004eb6:	2e10      	cmp	r6, #16
 8004eb8:	6027      	str	r7, [r4, #0]
 8004eba:	dc04      	bgt.n	8004ec6 <_svfprintf_r+0xe3e>
 8004ebc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ebe:	6066      	str	r6, [r4, #4]
 8004ec0:	441e      	add	r6, r3
 8004ec2:	9623      	str	r6, [sp, #140]	; 0x8c
 8004ec4:	e7cb      	b.n	8004e5e <_svfprintf_r+0xdd6>
 8004ec6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ec8:	f8c4 8004 	str.w	r8, [r4, #4]
 8004ecc:	3310      	adds	r3, #16
 8004ece:	9323      	str	r3, [sp, #140]	; 0x8c
 8004ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	2b07      	cmp	r3, #7
 8004ed6:	9322      	str	r3, [sp, #136]	; 0x88
 8004ed8:	dc02      	bgt.n	8004ee0 <_svfprintf_r+0xe58>
 8004eda:	3408      	adds	r4, #8
 8004edc:	3e10      	subs	r6, #16
 8004ede:	e7ea      	b.n	8004eb6 <_svfprintf_r+0xe2e>
 8004ee0:	aa21      	add	r2, sp, #132	; 0x84
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	f001 fc29 	bl	800673c <__ssprint_r>
 8004eea:	bb50      	cbnz	r0, 8004f42 <_svfprintf_r+0xeba>
 8004eec:	ac2e      	add	r4, sp, #184	; 0xb8
 8004eee:	e7f5      	b.n	8004edc <_svfprintf_r+0xe54>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ef6:	f8c4 8000 	str.w	r8, [r4]
 8004efa:	3301      	adds	r3, #1
 8004efc:	e7ae      	b.n	8004e5c <_svfprintf_r+0xdd4>
 8004efe:	3408      	adds	r4, #8
 8004f00:	e7ba      	b.n	8004e78 <_svfprintf_r+0xdf0>
 8004f02:	3408      	adds	r4, #8
 8004f04:	f7ff bbed 	b.w	80046e2 <_svfprintf_r+0x65a>
 8004f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f0c:	1a9d      	subs	r5, r3, r2
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	f77f abea 	ble.w	80046e8 <_svfprintf_r+0x660>
 8004f14:	2610      	movs	r6, #16
 8004f16:	4b41      	ldr	r3, [pc, #260]	; (800501c <_svfprintf_r+0xf94>)
 8004f18:	2d10      	cmp	r5, #16
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	dc1b      	bgt.n	8004f56 <_svfprintf_r+0xece>
 8004f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f20:	6065      	str	r5, [r4, #4]
 8004f22:	441d      	add	r5, r3
 8004f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f26:	9523      	str	r5, [sp, #140]	; 0x8c
 8004f28:	3301      	adds	r3, #1
 8004f2a:	2b07      	cmp	r3, #7
 8004f2c:	9322      	str	r3, [sp, #136]	; 0x88
 8004f2e:	f77f abdb 	ble.w	80046e8 <_svfprintf_r+0x660>
 8004f32:	aa21      	add	r2, sp, #132	; 0x84
 8004f34:	4649      	mov	r1, r9
 8004f36:	4650      	mov	r0, sl
 8004f38:	f001 fc00 	bl	800673c <__ssprint_r>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f43f abd3 	beq.w	80046e8 <_svfprintf_r+0x660>
 8004f42:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004f46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f4c:	bf18      	it	ne
 8004f4e:	f04f 33ff 	movne.w	r3, #4294967295
 8004f52:	f7ff b8bd 	b.w	80040d0 <_svfprintf_r+0x48>
 8004f56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f58:	6066      	str	r6, [r4, #4]
 8004f5a:	3310      	adds	r3, #16
 8004f5c:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f60:	3301      	adds	r3, #1
 8004f62:	2b07      	cmp	r3, #7
 8004f64:	9322      	str	r3, [sp, #136]	; 0x88
 8004f66:	dc02      	bgt.n	8004f6e <_svfprintf_r+0xee6>
 8004f68:	3408      	adds	r4, #8
 8004f6a:	3d10      	subs	r5, #16
 8004f6c:	e7d3      	b.n	8004f16 <_svfprintf_r+0xe8e>
 8004f6e:	aa21      	add	r2, sp, #132	; 0x84
 8004f70:	4649      	mov	r1, r9
 8004f72:	4650      	mov	r0, sl
 8004f74:	f001 fbe2 	bl	800673c <__ssprint_r>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	d1e2      	bne.n	8004f42 <_svfprintf_r+0xeba>
 8004f7c:	ac2e      	add	r4, sp, #184	; 0xb8
 8004f7e:	e7f4      	b.n	8004f6a <_svfprintf_r+0xee2>
 8004f80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0dd      	beq.n	8004f42 <_svfprintf_r+0xeba>
 8004f86:	aa21      	add	r2, sp, #132	; 0x84
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	f001 fbd6 	bl	800673c <__ssprint_r>
 8004f90:	e7d7      	b.n	8004f42 <_svfprintf_r+0xeba>
 8004f92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f98:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f9a:	f7fb fd33 	bl	8000a04 <__aeabi_dcmpun>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f43f aa3d 	beq.w	800441e <_svfprintf_r+0x396>
 8004fa4:	4b1e      	ldr	r3, [pc, #120]	; (8005020 <_svfprintf_r+0xf98>)
 8004fa6:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <_svfprintf_r+0xf9c>)
 8004fa8:	f7ff ba2d 	b.w	8004406 <_svfprintf_r+0x37e>
 8004fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fae:	eba3 0308 	sub.w	r3, r3, r8
 8004fb2:	9307      	str	r3, [sp, #28]
 8004fb4:	f7ff baaf 	b.w	8004516 <_svfprintf_r+0x48e>
 8004fb8:	ea56 0207 	orrs.w	r2, r6, r7
 8004fbc:	950f      	str	r5, [sp, #60]	; 0x3c
 8004fbe:	f43f ac2b 	beq.w	8004818 <_svfprintf_r+0x790>
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	f43f ac9d 	beq.w	8004902 <_svfprintf_r+0x87a>
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	f43f acbd 	beq.w	8004948 <_svfprintf_r+0x8c0>
 8004fce:	ab2e      	add	r3, sp, #184	; 0xb8
 8004fd0:	08f1      	lsrs	r1, r6, #3
 8004fd2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8004fd6:	08f8      	lsrs	r0, r7, #3
 8004fd8:	f006 0207 	and.w	r2, r6, #7
 8004fdc:	4607      	mov	r7, r0
 8004fde:	460e      	mov	r6, r1
 8004fe0:	3230      	adds	r2, #48	; 0x30
 8004fe2:	ea56 0107 	orrs.w	r1, r6, r7
 8004fe6:	f103 38ff 	add.w	r8, r3, #4294967295
 8004fea:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004fee:	f47f ac86 	bne.w	80048fe <_svfprintf_r+0x876>
 8004ff2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ff4:	07c9      	lsls	r1, r1, #31
 8004ff6:	d506      	bpl.n	8005006 <_svfprintf_r+0xf7e>
 8004ff8:	2a30      	cmp	r2, #48	; 0x30
 8004ffa:	d004      	beq.n	8005006 <_svfprintf_r+0xf7e>
 8004ffc:	2230      	movs	r2, #48	; 0x30
 8004ffe:	f808 2c01 	strb.w	r2, [r8, #-1]
 8005002:	f1a3 0802 	sub.w	r8, r3, #2
 8005006:	ab2e      	add	r3, sp, #184	; 0xb8
 8005008:	465e      	mov	r6, fp
 800500a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800500c:	eba3 0b08 	sub.w	fp, r3, r8
 8005010:	2700      	movs	r7, #0
 8005012:	f7ff bace 	b.w	80045b2 <_svfprintf_r+0x52a>
 8005016:	bf00      	nop
 8005018:	08006fc1 	.word	0x08006fc1
 800501c:	08006fb1 	.word	0x08006fb1
 8005020:	08006f85 	.word	0x08006f85
 8005024:	08006f89 	.word	0x08006f89

08005028 <quorem>:
 8005028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	6903      	ldr	r3, [r0, #16]
 800502e:	690c      	ldr	r4, [r1, #16]
 8005030:	4680      	mov	r8, r0
 8005032:	429c      	cmp	r4, r3
 8005034:	f300 8082 	bgt.w	800513c <quorem+0x114>
 8005038:	3c01      	subs	r4, #1
 800503a:	f101 0714 	add.w	r7, r1, #20
 800503e:	f100 0614 	add.w	r6, r0, #20
 8005042:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005046:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800504a:	3501      	adds	r5, #1
 800504c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005050:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005054:	eb06 030e 	add.w	r3, r6, lr
 8005058:	eb07 090e 	add.w	r9, r7, lr
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	b38d      	cbz	r5, 80050c4 <quorem+0x9c>
 8005060:	f04f 0a00 	mov.w	sl, #0
 8005064:	4638      	mov	r0, r7
 8005066:	46b4      	mov	ip, r6
 8005068:	46d3      	mov	fp, sl
 800506a:	f850 2b04 	ldr.w	r2, [r0], #4
 800506e:	b293      	uxth	r3, r2
 8005070:	fb05 a303 	mla	r3, r5, r3, sl
 8005074:	0c12      	lsrs	r2, r2, #16
 8005076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800507a:	fb05 a202 	mla	r2, r5, r2, sl
 800507e:	b29b      	uxth	r3, r3
 8005080:	ebab 0303 	sub.w	r3, fp, r3
 8005084:	f8bc b000 	ldrh.w	fp, [ip]
 8005088:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800508c:	445b      	add	r3, fp
 800508e:	fa1f fb82 	uxth.w	fp, r2
 8005092:	f8dc 2000 	ldr.w	r2, [ip]
 8005096:	4581      	cmp	r9, r0
 8005098:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800509c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050a6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80050aa:	f84c 3b04 	str.w	r3, [ip], #4
 80050ae:	d2dc      	bcs.n	800506a <quorem+0x42>
 80050b0:	f856 300e 	ldr.w	r3, [r6, lr]
 80050b4:	b933      	cbnz	r3, 80050c4 <quorem+0x9c>
 80050b6:	9b01      	ldr	r3, [sp, #4]
 80050b8:	3b04      	subs	r3, #4
 80050ba:	429e      	cmp	r6, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	d331      	bcc.n	8005124 <quorem+0xfc>
 80050c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80050c4:	4640      	mov	r0, r8
 80050c6:	f001 fa60 	bl	800658a <__mcmp>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	db26      	blt.n	800511c <quorem+0xf4>
 80050ce:	4630      	mov	r0, r6
 80050d0:	f04f 0e00 	mov.w	lr, #0
 80050d4:	3501      	adds	r5, #1
 80050d6:	f857 1b04 	ldr.w	r1, [r7], #4
 80050da:	f8d0 c000 	ldr.w	ip, [r0]
 80050de:	b28b      	uxth	r3, r1
 80050e0:	ebae 0303 	sub.w	r3, lr, r3
 80050e4:	fa1f f28c 	uxth.w	r2, ip
 80050e8:	4413      	add	r3, r2
 80050ea:	0c0a      	lsrs	r2, r1, #16
 80050ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80050f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050fa:	45b9      	cmp	r9, r7
 80050fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005100:	f840 3b04 	str.w	r3, [r0], #4
 8005104:	d2e7      	bcs.n	80050d6 <quorem+0xae>
 8005106:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800510a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800510e:	b92a      	cbnz	r2, 800511c <quorem+0xf4>
 8005110:	3b04      	subs	r3, #4
 8005112:	429e      	cmp	r6, r3
 8005114:	461a      	mov	r2, r3
 8005116:	d30b      	bcc.n	8005130 <quorem+0x108>
 8005118:	f8c8 4010 	str.w	r4, [r8, #16]
 800511c:	4628      	mov	r0, r5
 800511e:	b003      	add	sp, #12
 8005120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	3b04      	subs	r3, #4
 8005128:	2a00      	cmp	r2, #0
 800512a:	d1c9      	bne.n	80050c0 <quorem+0x98>
 800512c:	3c01      	subs	r4, #1
 800512e:	e7c4      	b.n	80050ba <quorem+0x92>
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	3b04      	subs	r3, #4
 8005134:	2a00      	cmp	r2, #0
 8005136:	d1ef      	bne.n	8005118 <quorem+0xf0>
 8005138:	3c01      	subs	r4, #1
 800513a:	e7ea      	b.n	8005112 <quorem+0xea>
 800513c:	2000      	movs	r0, #0
 800513e:	e7ee      	b.n	800511e <quorem+0xf6>

08005140 <_dtoa_r>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005146:	b095      	sub	sp, #84	; 0x54
 8005148:	4604      	mov	r4, r0
 800514a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800514c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005150:	b93e      	cbnz	r6, 8005162 <_dtoa_r+0x22>
 8005152:	2010      	movs	r0, #16
 8005154:	f000 fdd6 	bl	8005d04 <malloc>
 8005158:	6260      	str	r0, [r4, #36]	; 0x24
 800515a:	6046      	str	r6, [r0, #4]
 800515c:	6086      	str	r6, [r0, #8]
 800515e:	6006      	str	r6, [r0, #0]
 8005160:	60c6      	str	r6, [r0, #12]
 8005162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	b151      	cbz	r1, 800517e <_dtoa_r+0x3e>
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	2301      	movs	r3, #1
 800516c:	4093      	lsls	r3, r2
 800516e:	604a      	str	r2, [r1, #4]
 8005170:	608b      	str	r3, [r1, #8]
 8005172:	4620      	mov	r0, r4
 8005174:	f001 f834 	bl	80061e0 <_Bfree>
 8005178:	2200      	movs	r2, #0
 800517a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	bfb7      	itett	lt
 8005184:	2301      	movlt	r3, #1
 8005186:	2300      	movge	r3, #0
 8005188:	602b      	strlt	r3, [r5, #0]
 800518a:	9b03      	ldrlt	r3, [sp, #12]
 800518c:	bfae      	itee	ge
 800518e:	602b      	strge	r3, [r5, #0]
 8005190:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005194:	9303      	strlt	r3, [sp, #12]
 8005196:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800519a:	4bab      	ldr	r3, [pc, #684]	; (8005448 <_dtoa_r+0x308>)
 800519c:	ea33 0309 	bics.w	r3, r3, r9
 80051a0:	d11b      	bne.n	80051da <_dtoa_r+0x9a>
 80051a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80051a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	9b02      	ldr	r3, [sp, #8]
 80051ac:	b923      	cbnz	r3, 80051b8 <_dtoa_r+0x78>
 80051ae:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80051b2:	2800      	cmp	r0, #0
 80051b4:	f000 8583 	beq.w	8005cbe <_dtoa_r+0xb7e>
 80051b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051ba:	b953      	cbnz	r3, 80051d2 <_dtoa_r+0x92>
 80051bc:	4ba3      	ldr	r3, [pc, #652]	; (800544c <_dtoa_r+0x30c>)
 80051be:	e021      	b.n	8005204 <_dtoa_r+0xc4>
 80051c0:	4ba3      	ldr	r3, [pc, #652]	; (8005450 <_dtoa_r+0x310>)
 80051c2:	9306      	str	r3, [sp, #24]
 80051c4:	3308      	adds	r3, #8
 80051c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	9806      	ldr	r0, [sp, #24]
 80051cc:	b015      	add	sp, #84	; 0x54
 80051ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d2:	4b9e      	ldr	r3, [pc, #632]	; (800544c <_dtoa_r+0x30c>)
 80051d4:	9306      	str	r3, [sp, #24]
 80051d6:	3303      	adds	r3, #3
 80051d8:	e7f5      	b.n	80051c6 <_dtoa_r+0x86>
 80051da:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051de:	2200      	movs	r2, #0
 80051e0:	2300      	movs	r3, #0
 80051e2:	4630      	mov	r0, r6
 80051e4:	4639      	mov	r1, r7
 80051e6:	f7fb fbdb 	bl	80009a0 <__aeabi_dcmpeq>
 80051ea:	4680      	mov	r8, r0
 80051ec:	b160      	cbz	r0, 8005208 <_dtoa_r+0xc8>
 80051ee:	2301      	movs	r3, #1
 80051f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 855e 	beq.w	8005cb8 <_dtoa_r+0xb78>
 80051fc:	4b95      	ldr	r3, [pc, #596]	; (8005454 <_dtoa_r+0x314>)
 80051fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	3b01      	subs	r3, #1
 8005204:	9306      	str	r3, [sp, #24]
 8005206:	e7e0      	b.n	80051ca <_dtoa_r+0x8a>
 8005208:	ab12      	add	r3, sp, #72	; 0x48
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	ab13      	add	r3, sp, #76	; 0x4c
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	4632      	mov	r2, r6
 8005212:	463b      	mov	r3, r7
 8005214:	4620      	mov	r0, r4
 8005216:	f001 fa31 	bl	800667c <__d2b>
 800521a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800521e:	4682      	mov	sl, r0
 8005220:	2d00      	cmp	r5, #0
 8005222:	d07d      	beq.n	8005320 <_dtoa_r+0x1e0>
 8005224:	4630      	mov	r0, r6
 8005226:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800522a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800522e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005232:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005236:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800523a:	2200      	movs	r2, #0
 800523c:	4b86      	ldr	r3, [pc, #536]	; (8005458 <_dtoa_r+0x318>)
 800523e:	f7fa ff93 	bl	8000168 <__aeabi_dsub>
 8005242:	a37b      	add	r3, pc, #492	; (adr r3, 8005430 <_dtoa_r+0x2f0>)
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f7fb f942 	bl	80004d0 <__aeabi_dmul>
 800524c:	a37a      	add	r3, pc, #488	; (adr r3, 8005438 <_dtoa_r+0x2f8>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f7fa ff8b 	bl	800016c <__adddf3>
 8005256:	4606      	mov	r6, r0
 8005258:	4628      	mov	r0, r5
 800525a:	460f      	mov	r7, r1
 800525c:	f7fb f8d2 	bl	8000404 <__aeabi_i2d>
 8005260:	a377      	add	r3, pc, #476	; (adr r3, 8005440 <_dtoa_r+0x300>)
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f7fb f933 	bl	80004d0 <__aeabi_dmul>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4630      	mov	r0, r6
 8005270:	4639      	mov	r1, r7
 8005272:	f7fa ff7b 	bl	800016c <__adddf3>
 8005276:	4606      	mov	r6, r0
 8005278:	460f      	mov	r7, r1
 800527a:	f7fb fbd9 	bl	8000a30 <__aeabi_d2iz>
 800527e:	2200      	movs	r2, #0
 8005280:	4683      	mov	fp, r0
 8005282:	2300      	movs	r3, #0
 8005284:	4630      	mov	r0, r6
 8005286:	4639      	mov	r1, r7
 8005288:	f7fb fb94 	bl	80009b4 <__aeabi_dcmplt>
 800528c:	b158      	cbz	r0, 80052a6 <_dtoa_r+0x166>
 800528e:	4658      	mov	r0, fp
 8005290:	f7fb f8b8 	bl	8000404 <__aeabi_i2d>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4630      	mov	r0, r6
 800529a:	4639      	mov	r1, r7
 800529c:	f7fb fb80 	bl	80009a0 <__aeabi_dcmpeq>
 80052a0:	b908      	cbnz	r0, 80052a6 <_dtoa_r+0x166>
 80052a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052a6:	f1bb 0f16 	cmp.w	fp, #22
 80052aa:	d858      	bhi.n	800535e <_dtoa_r+0x21e>
 80052ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052b0:	496a      	ldr	r1, [pc, #424]	; (800545c <_dtoa_r+0x31c>)
 80052b2:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80052b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052ba:	f7fb fb99 	bl	80009f0 <__aeabi_dcmpgt>
 80052be:	2800      	cmp	r0, #0
 80052c0:	d04f      	beq.n	8005362 <_dtoa_r+0x222>
 80052c2:	2300      	movs	r3, #0
 80052c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052c8:	930d      	str	r3, [sp, #52]	; 0x34
 80052ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052cc:	1b5d      	subs	r5, r3, r5
 80052ce:	1e6b      	subs	r3, r5, #1
 80052d0:	9307      	str	r3, [sp, #28]
 80052d2:	bf43      	ittte	mi
 80052d4:	2300      	movmi	r3, #0
 80052d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80052da:	9307      	strmi	r3, [sp, #28]
 80052dc:	f04f 0800 	movpl.w	r8, #0
 80052e0:	f1bb 0f00 	cmp.w	fp, #0
 80052e4:	db3f      	blt.n	8005366 <_dtoa_r+0x226>
 80052e6:	9b07      	ldr	r3, [sp, #28]
 80052e8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80052ec:	445b      	add	r3, fp
 80052ee:	9307      	str	r3, [sp, #28]
 80052f0:	2300      	movs	r3, #0
 80052f2:	9308      	str	r3, [sp, #32]
 80052f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80052f6:	2b09      	cmp	r3, #9
 80052f8:	f200 80b4 	bhi.w	8005464 <_dtoa_r+0x324>
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	bfc4      	itt	gt
 8005300:	3b04      	subgt	r3, #4
 8005302:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005304:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005306:	bfc8      	it	gt
 8005308:	2600      	movgt	r6, #0
 800530a:	f1a3 0302 	sub.w	r3, r3, #2
 800530e:	bfd8      	it	le
 8005310:	2601      	movle	r6, #1
 8005312:	2b03      	cmp	r3, #3
 8005314:	f200 80b2 	bhi.w	800547c <_dtoa_r+0x33c>
 8005318:	e8df f003 	tbb	[pc, r3]
 800531c:	782d8684 	.word	0x782d8684
 8005320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005322:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005324:	441d      	add	r5, r3
 8005326:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800532a:	2b20      	cmp	r3, #32
 800532c:	dd11      	ble.n	8005352 <_dtoa_r+0x212>
 800532e:	9a02      	ldr	r2, [sp, #8]
 8005330:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005334:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005338:	fa22 f000 	lsr.w	r0, r2, r0
 800533c:	fa09 f303 	lsl.w	r3, r9, r3
 8005340:	4318      	orrs	r0, r3
 8005342:	f7fb f84f 	bl	80003e4 <__aeabi_ui2d>
 8005346:	2301      	movs	r3, #1
 8005348:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800534c:	3d01      	subs	r5, #1
 800534e:	9310      	str	r3, [sp, #64]	; 0x40
 8005350:	e773      	b.n	800523a <_dtoa_r+0xfa>
 8005352:	f1c3 0020 	rsb	r0, r3, #32
 8005356:	9b02      	ldr	r3, [sp, #8]
 8005358:	fa03 f000 	lsl.w	r0, r3, r0
 800535c:	e7f1      	b.n	8005342 <_dtoa_r+0x202>
 800535e:	2301      	movs	r3, #1
 8005360:	e7b2      	b.n	80052c8 <_dtoa_r+0x188>
 8005362:	900d      	str	r0, [sp, #52]	; 0x34
 8005364:	e7b1      	b.n	80052ca <_dtoa_r+0x18a>
 8005366:	f1cb 0300 	rsb	r3, fp, #0
 800536a:	9308      	str	r3, [sp, #32]
 800536c:	2300      	movs	r3, #0
 800536e:	eba8 080b 	sub.w	r8, r8, fp
 8005372:	930c      	str	r3, [sp, #48]	; 0x30
 8005374:	e7be      	b.n	80052f4 <_dtoa_r+0x1b4>
 8005376:	2301      	movs	r3, #1
 8005378:	9309      	str	r3, [sp, #36]	; 0x24
 800537a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800537c:	2b00      	cmp	r3, #0
 800537e:	f340 8080 	ble.w	8005482 <_dtoa_r+0x342>
 8005382:	4699      	mov	r9, r3
 8005384:	9304      	str	r3, [sp, #16]
 8005386:	2200      	movs	r2, #0
 8005388:	2104      	movs	r1, #4
 800538a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800538c:	606a      	str	r2, [r5, #4]
 800538e:	f101 0214 	add.w	r2, r1, #20
 8005392:	429a      	cmp	r2, r3
 8005394:	d97a      	bls.n	800548c <_dtoa_r+0x34c>
 8005396:	6869      	ldr	r1, [r5, #4]
 8005398:	4620      	mov	r0, r4
 800539a:	f000 feed 	bl	8006178 <_Balloc>
 800539e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a0:	6028      	str	r0, [r5, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b9 0f0e 	cmp.w	r9, #14
 80053a8:	9306      	str	r3, [sp, #24]
 80053aa:	f200 80f0 	bhi.w	800558e <_dtoa_r+0x44e>
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	f000 80ed 	beq.w	800558e <_dtoa_r+0x44e>
 80053b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b8:	f1bb 0f00 	cmp.w	fp, #0
 80053bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80053c0:	dd79      	ble.n	80054b6 <_dtoa_r+0x376>
 80053c2:	4a26      	ldr	r2, [pc, #152]	; (800545c <_dtoa_r+0x31c>)
 80053c4:	f00b 030f 	and.w	r3, fp, #15
 80053c8:	ea4f 162b 	mov.w	r6, fp, asr #4
 80053cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80053d0:	06f0      	lsls	r0, r6, #27
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80053da:	d55c      	bpl.n	8005496 <_dtoa_r+0x356>
 80053dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80053e0:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <_dtoa_r+0x320>)
 80053e2:	2503      	movs	r5, #3
 80053e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053e8:	f7fb f99c 	bl	8000724 <__aeabi_ddiv>
 80053ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053f0:	f006 060f 	and.w	r6, r6, #15
 80053f4:	4f1a      	ldr	r7, [pc, #104]	; (8005460 <_dtoa_r+0x320>)
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	d14f      	bne.n	800549a <_dtoa_r+0x35a>
 80053fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005402:	f7fb f98f 	bl	8000724 <__aeabi_ddiv>
 8005406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800540a:	e06e      	b.n	80054ea <_dtoa_r+0x3aa>
 800540c:	2301      	movs	r3, #1
 800540e:	9309      	str	r3, [sp, #36]	; 0x24
 8005410:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005412:	445b      	add	r3, fp
 8005414:	f103 0901 	add.w	r9, r3, #1
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	464b      	mov	r3, r9
 800541c:	2b01      	cmp	r3, #1
 800541e:	bfb8      	it	lt
 8005420:	2301      	movlt	r3, #1
 8005422:	e7b0      	b.n	8005386 <_dtoa_r+0x246>
 8005424:	2300      	movs	r3, #0
 8005426:	e7a7      	b.n	8005378 <_dtoa_r+0x238>
 8005428:	2300      	movs	r3, #0
 800542a:	e7f0      	b.n	800540e <_dtoa_r+0x2ce>
 800542c:	f3af 8000 	nop.w
 8005430:	636f4361 	.word	0x636f4361
 8005434:	3fd287a7 	.word	0x3fd287a7
 8005438:	8b60c8b3 	.word	0x8b60c8b3
 800543c:	3fc68a28 	.word	0x3fc68a28
 8005440:	509f79fb 	.word	0x509f79fb
 8005444:	3fd34413 	.word	0x3fd34413
 8005448:	7ff00000 	.word	0x7ff00000
 800544c:	08006fda 	.word	0x08006fda
 8005450:	08006fd1 	.word	0x08006fd1
 8005454:	08006fb0 	.word	0x08006fb0
 8005458:	3ff80000 	.word	0x3ff80000
 800545c:	08007008 	.word	0x08007008
 8005460:	08006fe0 	.word	0x08006fe0
 8005464:	2601      	movs	r6, #1
 8005466:	2300      	movs	r3, #0
 8005468:	9609      	str	r6, [sp, #36]	; 0x24
 800546a:	931e      	str	r3, [sp, #120]	; 0x78
 800546c:	f04f 33ff 	mov.w	r3, #4294967295
 8005470:	2200      	movs	r2, #0
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	4699      	mov	r9, r3
 8005476:	2312      	movs	r3, #18
 8005478:	921f      	str	r2, [sp, #124]	; 0x7c
 800547a:	e784      	b.n	8005386 <_dtoa_r+0x246>
 800547c:	2301      	movs	r3, #1
 800547e:	9309      	str	r3, [sp, #36]	; 0x24
 8005480:	e7f4      	b.n	800546c <_dtoa_r+0x32c>
 8005482:	2301      	movs	r3, #1
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	4699      	mov	r9, r3
 8005488:	461a      	mov	r2, r3
 800548a:	e7f5      	b.n	8005478 <_dtoa_r+0x338>
 800548c:	686a      	ldr	r2, [r5, #4]
 800548e:	0049      	lsls	r1, r1, #1
 8005490:	3201      	adds	r2, #1
 8005492:	606a      	str	r2, [r5, #4]
 8005494:	e77b      	b.n	800538e <_dtoa_r+0x24e>
 8005496:	2502      	movs	r5, #2
 8005498:	e7ac      	b.n	80053f4 <_dtoa_r+0x2b4>
 800549a:	07f1      	lsls	r1, r6, #31
 800549c:	d508      	bpl.n	80054b0 <_dtoa_r+0x370>
 800549e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a6:	f7fb f813 	bl	80004d0 <__aeabi_dmul>
 80054aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054ae:	3501      	adds	r5, #1
 80054b0:	1076      	asrs	r6, r6, #1
 80054b2:	3708      	adds	r7, #8
 80054b4:	e79f      	b.n	80053f6 <_dtoa_r+0x2b6>
 80054b6:	f000 80a5 	beq.w	8005604 <_dtoa_r+0x4c4>
 80054ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80054be:	f1cb 0600 	rsb	r6, fp, #0
 80054c2:	4ba2      	ldr	r3, [pc, #648]	; (800574c <_dtoa_r+0x60c>)
 80054c4:	f006 020f 	and.w	r2, r6, #15
 80054c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fa fffe 	bl	80004d0 <__aeabi_dmul>
 80054d4:	2502      	movs	r5, #2
 80054d6:	2300      	movs	r3, #0
 80054d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054dc:	4f9c      	ldr	r7, [pc, #624]	; (8005750 <_dtoa_r+0x610>)
 80054de:	1136      	asrs	r6, r6, #4
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	f040 8084 	bne.w	80055ee <_dtoa_r+0x4ae>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d18d      	bne.n	8005406 <_dtoa_r+0x2c6>
 80054ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 808b 	beq.w	8005608 <_dtoa_r+0x4c8>
 80054f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80054fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054fe:	2200      	movs	r2, #0
 8005500:	4b94      	ldr	r3, [pc, #592]	; (8005754 <_dtoa_r+0x614>)
 8005502:	f7fb fa57 	bl	80009b4 <__aeabi_dcmplt>
 8005506:	2800      	cmp	r0, #0
 8005508:	d07e      	beq.n	8005608 <_dtoa_r+0x4c8>
 800550a:	f1b9 0f00 	cmp.w	r9, #0
 800550e:	d07b      	beq.n	8005608 <_dtoa_r+0x4c8>
 8005510:	9b04      	ldr	r3, [sp, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	dd37      	ble.n	8005586 <_dtoa_r+0x446>
 8005516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800551a:	2200      	movs	r2, #0
 800551c:	4b8e      	ldr	r3, [pc, #568]	; (8005758 <_dtoa_r+0x618>)
 800551e:	f7fa ffd7 	bl	80004d0 <__aeabi_dmul>
 8005522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005526:	9e04      	ldr	r6, [sp, #16]
 8005528:	f10b 37ff 	add.w	r7, fp, #4294967295
 800552c:	3501      	adds	r5, #1
 800552e:	4628      	mov	r0, r5
 8005530:	f7fa ff68 	bl	8000404 <__aeabi_i2d>
 8005534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005538:	f7fa ffca 	bl	80004d0 <__aeabi_dmul>
 800553c:	4b87      	ldr	r3, [pc, #540]	; (800575c <_dtoa_r+0x61c>)
 800553e:	2200      	movs	r2, #0
 8005540:	f7fa fe14 	bl	800016c <__adddf3>
 8005544:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800554a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800554e:	950b      	str	r5, [sp, #44]	; 0x2c
 8005550:	2e00      	cmp	r6, #0
 8005552:	d15c      	bne.n	800560e <_dtoa_r+0x4ce>
 8005554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005558:	2200      	movs	r2, #0
 800555a:	4b81      	ldr	r3, [pc, #516]	; (8005760 <_dtoa_r+0x620>)
 800555c:	f7fa fe04 	bl	8000168 <__aeabi_dsub>
 8005560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005562:	462b      	mov	r3, r5
 8005564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005568:	f7fb fa42 	bl	80009f0 <__aeabi_dcmpgt>
 800556c:	2800      	cmp	r0, #0
 800556e:	f040 82f7 	bne.w	8005b60 <_dtoa_r+0xa20>
 8005572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005578:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800557c:	f7fb fa1a 	bl	80009b4 <__aeabi_dcmplt>
 8005580:	2800      	cmp	r0, #0
 8005582:	f040 82eb 	bne.w	8005b5c <_dtoa_r+0xa1c>
 8005586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800558a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800558e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005590:	2b00      	cmp	r3, #0
 8005592:	f2c0 8150 	blt.w	8005836 <_dtoa_r+0x6f6>
 8005596:	f1bb 0f0e 	cmp.w	fp, #14
 800559a:	f300 814c 	bgt.w	8005836 <_dtoa_r+0x6f6>
 800559e:	4b6b      	ldr	r3, [pc, #428]	; (800574c <_dtoa_r+0x60c>)
 80055a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f280 80da 	bge.w	8005768 <_dtoa_r+0x628>
 80055b4:	f1b9 0f00 	cmp.w	r9, #0
 80055b8:	f300 80d6 	bgt.w	8005768 <_dtoa_r+0x628>
 80055bc:	f040 82cd 	bne.w	8005b5a <_dtoa_r+0xa1a>
 80055c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055c4:	2200      	movs	r2, #0
 80055c6:	4b66      	ldr	r3, [pc, #408]	; (8005760 <_dtoa_r+0x620>)
 80055c8:	f7fa ff82 	bl	80004d0 <__aeabi_dmul>
 80055cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055d0:	f7fb fa04 	bl	80009dc <__aeabi_dcmpge>
 80055d4:	464e      	mov	r6, r9
 80055d6:	464f      	mov	r7, r9
 80055d8:	2800      	cmp	r0, #0
 80055da:	f040 82a4 	bne.w	8005b26 <_dtoa_r+0x9e6>
 80055de:	9b06      	ldr	r3, [sp, #24]
 80055e0:	9a06      	ldr	r2, [sp, #24]
 80055e2:	1c5d      	adds	r5, r3, #1
 80055e4:	2331      	movs	r3, #49	; 0x31
 80055e6:	f10b 0b01 	add.w	fp, fp, #1
 80055ea:	7013      	strb	r3, [r2, #0]
 80055ec:	e29f      	b.n	8005b2e <_dtoa_r+0x9ee>
 80055ee:	07f2      	lsls	r2, r6, #31
 80055f0:	d505      	bpl.n	80055fe <_dtoa_r+0x4be>
 80055f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f6:	f7fa ff6b 	bl	80004d0 <__aeabi_dmul>
 80055fa:	2301      	movs	r3, #1
 80055fc:	3501      	adds	r5, #1
 80055fe:	1076      	asrs	r6, r6, #1
 8005600:	3708      	adds	r7, #8
 8005602:	e76d      	b.n	80054e0 <_dtoa_r+0x3a0>
 8005604:	2502      	movs	r5, #2
 8005606:	e770      	b.n	80054ea <_dtoa_r+0x3aa>
 8005608:	465f      	mov	r7, fp
 800560a:	464e      	mov	r6, r9
 800560c:	e78f      	b.n	800552e <_dtoa_r+0x3ee>
 800560e:	9a06      	ldr	r2, [sp, #24]
 8005610:	4b4e      	ldr	r3, [pc, #312]	; (800574c <_dtoa_r+0x60c>)
 8005612:	4432      	add	r2, r6
 8005614:	9211      	str	r2, [sp, #68]	; 0x44
 8005616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005618:	1e71      	subs	r1, r6, #1
 800561a:	2a00      	cmp	r2, #0
 800561c:	d048      	beq.n	80056b0 <_dtoa_r+0x570>
 800561e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	2000      	movs	r0, #0
 8005628:	494e      	ldr	r1, [pc, #312]	; (8005764 <_dtoa_r+0x624>)
 800562a:	f7fb f87b 	bl	8000724 <__aeabi_ddiv>
 800562e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005632:	f7fa fd99 	bl	8000168 <__aeabi_dsub>
 8005636:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800563a:	9d06      	ldr	r5, [sp, #24]
 800563c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005640:	f7fb f9f6 	bl	8000a30 <__aeabi_d2iz>
 8005644:	4606      	mov	r6, r0
 8005646:	f7fa fedd 	bl	8000404 <__aeabi_i2d>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005652:	f7fa fd89 	bl	8000168 <__aeabi_dsub>
 8005656:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800565a:	3630      	adds	r6, #48	; 0x30
 800565c:	f805 6b01 	strb.w	r6, [r5], #1
 8005660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005664:	f7fb f9a6 	bl	80009b4 <__aeabi_dcmplt>
 8005668:	2800      	cmp	r0, #0
 800566a:	d164      	bne.n	8005736 <_dtoa_r+0x5f6>
 800566c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005670:	2000      	movs	r0, #0
 8005672:	4938      	ldr	r1, [pc, #224]	; (8005754 <_dtoa_r+0x614>)
 8005674:	f7fa fd78 	bl	8000168 <__aeabi_dsub>
 8005678:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800567c:	f7fb f99a 	bl	80009b4 <__aeabi_dcmplt>
 8005680:	2800      	cmp	r0, #0
 8005682:	f040 80b9 	bne.w	80057f8 <_dtoa_r+0x6b8>
 8005686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005688:	429d      	cmp	r5, r3
 800568a:	f43f af7c 	beq.w	8005586 <_dtoa_r+0x446>
 800568e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005692:	2200      	movs	r2, #0
 8005694:	4b30      	ldr	r3, [pc, #192]	; (8005758 <_dtoa_r+0x618>)
 8005696:	f7fa ff1b 	bl	80004d0 <__aeabi_dmul>
 800569a:	2200      	movs	r2, #0
 800569c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056a4:	4b2c      	ldr	r3, [pc, #176]	; (8005758 <_dtoa_r+0x618>)
 80056a6:	f7fa ff13 	bl	80004d0 <__aeabi_dmul>
 80056aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ae:	e7c5      	b.n	800563c <_dtoa_r+0x4fc>
 80056b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80056b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056bc:	f7fa ff08 	bl	80004d0 <__aeabi_dmul>
 80056c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056c4:	9d06      	ldr	r5, [sp, #24]
 80056c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ca:	f7fb f9b1 	bl	8000a30 <__aeabi_d2iz>
 80056ce:	4606      	mov	r6, r0
 80056d0:	f7fa fe98 	bl	8000404 <__aeabi_i2d>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056dc:	f7fa fd44 	bl	8000168 <__aeabi_dsub>
 80056e0:	3630      	adds	r6, #48	; 0x30
 80056e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056e4:	f805 6b01 	strb.w	r6, [r5], #1
 80056e8:	42ab      	cmp	r3, r5
 80056ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	d124      	bne.n	800573e <_dtoa_r+0x5fe>
 80056f4:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <_dtoa_r+0x624>)
 80056f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056fa:	f7fa fd37 	bl	800016c <__adddf3>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005706:	f7fb f973 	bl	80009f0 <__aeabi_dcmpgt>
 800570a:	2800      	cmp	r0, #0
 800570c:	d174      	bne.n	80057f8 <_dtoa_r+0x6b8>
 800570e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005712:	2000      	movs	r0, #0
 8005714:	4913      	ldr	r1, [pc, #76]	; (8005764 <_dtoa_r+0x624>)
 8005716:	f7fa fd27 	bl	8000168 <__aeabi_dsub>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005722:	f7fb f947 	bl	80009b4 <__aeabi_dcmplt>
 8005726:	2800      	cmp	r0, #0
 8005728:	f43f af2d 	beq.w	8005586 <_dtoa_r+0x446>
 800572c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005730:	1e6a      	subs	r2, r5, #1
 8005732:	2b30      	cmp	r3, #48	; 0x30
 8005734:	d001      	beq.n	800573a <_dtoa_r+0x5fa>
 8005736:	46bb      	mov	fp, r7
 8005738:	e04d      	b.n	80057d6 <_dtoa_r+0x696>
 800573a:	4615      	mov	r5, r2
 800573c:	e7f6      	b.n	800572c <_dtoa_r+0x5ec>
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <_dtoa_r+0x618>)
 8005740:	f7fa fec6 	bl	80004d0 <__aeabi_dmul>
 8005744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005748:	e7bd      	b.n	80056c6 <_dtoa_r+0x586>
 800574a:	bf00      	nop
 800574c:	08007008 	.word	0x08007008
 8005750:	08006fe0 	.word	0x08006fe0
 8005754:	3ff00000 	.word	0x3ff00000
 8005758:	40240000 	.word	0x40240000
 800575c:	401c0000 	.word	0x401c0000
 8005760:	40140000 	.word	0x40140000
 8005764:	3fe00000 	.word	0x3fe00000
 8005768:	9d06      	ldr	r5, [sp, #24]
 800576a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800576e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005772:	4630      	mov	r0, r6
 8005774:	4639      	mov	r1, r7
 8005776:	f7fa ffd5 	bl	8000724 <__aeabi_ddiv>
 800577a:	f7fb f959 	bl	8000a30 <__aeabi_d2iz>
 800577e:	4680      	mov	r8, r0
 8005780:	f7fa fe40 	bl	8000404 <__aeabi_i2d>
 8005784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005788:	f7fa fea2 	bl	80004d0 <__aeabi_dmul>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fa fce8 	bl	8000168 <__aeabi_dsub>
 8005798:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800579c:	f805 6b01 	strb.w	r6, [r5], #1
 80057a0:	9e06      	ldr	r6, [sp, #24]
 80057a2:	4602      	mov	r2, r0
 80057a4:	1bae      	subs	r6, r5, r6
 80057a6:	45b1      	cmp	r9, r6
 80057a8:	460b      	mov	r3, r1
 80057aa:	d137      	bne.n	800581c <_dtoa_r+0x6dc>
 80057ac:	f7fa fcde 	bl	800016c <__adddf3>
 80057b0:	4606      	mov	r6, r0
 80057b2:	460f      	mov	r7, r1
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057bc:	f7fb f8fa 	bl	80009b4 <__aeabi_dcmplt>
 80057c0:	b9c8      	cbnz	r0, 80057f6 <_dtoa_r+0x6b6>
 80057c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c6:	4632      	mov	r2, r6
 80057c8:	463b      	mov	r3, r7
 80057ca:	f7fb f8e9 	bl	80009a0 <__aeabi_dcmpeq>
 80057ce:	b110      	cbz	r0, 80057d6 <_dtoa_r+0x696>
 80057d0:	f018 0f01 	tst.w	r8, #1
 80057d4:	d10f      	bne.n	80057f6 <_dtoa_r+0x6b6>
 80057d6:	4651      	mov	r1, sl
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 fd01 	bl	80061e0 <_Bfree>
 80057de:	2300      	movs	r3, #0
 80057e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057e2:	702b      	strb	r3, [r5, #0]
 80057e4:	f10b 0301 	add.w	r3, fp, #1
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f43f acec 	beq.w	80051ca <_dtoa_r+0x8a>
 80057f2:	601d      	str	r5, [r3, #0]
 80057f4:	e4e9      	b.n	80051ca <_dtoa_r+0x8a>
 80057f6:	465f      	mov	r7, fp
 80057f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80057fc:	1e6b      	subs	r3, r5, #1
 80057fe:	2a39      	cmp	r2, #57	; 0x39
 8005800:	d106      	bne.n	8005810 <_dtoa_r+0x6d0>
 8005802:	9a06      	ldr	r2, [sp, #24]
 8005804:	429a      	cmp	r2, r3
 8005806:	d107      	bne.n	8005818 <_dtoa_r+0x6d8>
 8005808:	2330      	movs	r3, #48	; 0x30
 800580a:	7013      	strb	r3, [r2, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	3701      	adds	r7, #1
 8005810:	781a      	ldrb	r2, [r3, #0]
 8005812:	3201      	adds	r2, #1
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e78e      	b.n	8005736 <_dtoa_r+0x5f6>
 8005818:	461d      	mov	r5, r3
 800581a:	e7ed      	b.n	80057f8 <_dtoa_r+0x6b8>
 800581c:	2200      	movs	r2, #0
 800581e:	4bb5      	ldr	r3, [pc, #724]	; (8005af4 <_dtoa_r+0x9b4>)
 8005820:	f7fa fe56 	bl	80004d0 <__aeabi_dmul>
 8005824:	2200      	movs	r2, #0
 8005826:	2300      	movs	r3, #0
 8005828:	4606      	mov	r6, r0
 800582a:	460f      	mov	r7, r1
 800582c:	f7fb f8b8 	bl	80009a0 <__aeabi_dcmpeq>
 8005830:	2800      	cmp	r0, #0
 8005832:	d09c      	beq.n	800576e <_dtoa_r+0x62e>
 8005834:	e7cf      	b.n	80057d6 <_dtoa_r+0x696>
 8005836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005838:	2a00      	cmp	r2, #0
 800583a:	f000 8129 	beq.w	8005a90 <_dtoa_r+0x950>
 800583e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005840:	2a01      	cmp	r2, #1
 8005842:	f300 810e 	bgt.w	8005a62 <_dtoa_r+0x922>
 8005846:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005848:	2a00      	cmp	r2, #0
 800584a:	f000 8106 	beq.w	8005a5a <_dtoa_r+0x91a>
 800584e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005852:	4645      	mov	r5, r8
 8005854:	9e08      	ldr	r6, [sp, #32]
 8005856:	9a07      	ldr	r2, [sp, #28]
 8005858:	2101      	movs	r1, #1
 800585a:	441a      	add	r2, r3
 800585c:	4620      	mov	r0, r4
 800585e:	4498      	add	r8, r3
 8005860:	9207      	str	r2, [sp, #28]
 8005862:	f000 fd5d 	bl	8006320 <__i2b>
 8005866:	4607      	mov	r7, r0
 8005868:	2d00      	cmp	r5, #0
 800586a:	dd0b      	ble.n	8005884 <_dtoa_r+0x744>
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd08      	ble.n	8005884 <_dtoa_r+0x744>
 8005872:	42ab      	cmp	r3, r5
 8005874:	bfa8      	it	ge
 8005876:	462b      	movge	r3, r5
 8005878:	9a07      	ldr	r2, [sp, #28]
 800587a:	eba8 0803 	sub.w	r8, r8, r3
 800587e:	1aed      	subs	r5, r5, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	9307      	str	r3, [sp, #28]
 8005884:	9b08      	ldr	r3, [sp, #32]
 8005886:	b1fb      	cbz	r3, 80058c8 <_dtoa_r+0x788>
 8005888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8104 	beq.w	8005a98 <_dtoa_r+0x958>
 8005890:	2e00      	cmp	r6, #0
 8005892:	dd11      	ble.n	80058b8 <_dtoa_r+0x778>
 8005894:	4639      	mov	r1, r7
 8005896:	4632      	mov	r2, r6
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fdd7 	bl	800644c <__pow5mult>
 800589e:	4652      	mov	r2, sl
 80058a0:	4601      	mov	r1, r0
 80058a2:	4607      	mov	r7, r0
 80058a4:	4620      	mov	r0, r4
 80058a6:	f000 fd44 	bl	8006332 <__multiply>
 80058aa:	4651      	mov	r1, sl
 80058ac:	900a      	str	r0, [sp, #40]	; 0x28
 80058ae:	4620      	mov	r0, r4
 80058b0:	f000 fc96 	bl	80061e0 <_Bfree>
 80058b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b6:	469a      	mov	sl, r3
 80058b8:	9b08      	ldr	r3, [sp, #32]
 80058ba:	1b9a      	subs	r2, r3, r6
 80058bc:	d004      	beq.n	80058c8 <_dtoa_r+0x788>
 80058be:	4651      	mov	r1, sl
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 fdc3 	bl	800644c <__pow5mult>
 80058c6:	4682      	mov	sl, r0
 80058c8:	2101      	movs	r1, #1
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 fd28 	bl	8006320 <__i2b>
 80058d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058d2:	4606      	mov	r6, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f340 80e1 	ble.w	8005a9c <_dtoa_r+0x95c>
 80058da:	461a      	mov	r2, r3
 80058dc:	4601      	mov	r1, r0
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fdb4 	bl	800644c <__pow5mult>
 80058e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80058e6:	4606      	mov	r6, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	f340 80da 	ble.w	8005aa2 <_dtoa_r+0x962>
 80058ee:	2300      	movs	r3, #0
 80058f0:	9308      	str	r3, [sp, #32]
 80058f2:	6933      	ldr	r3, [r6, #16]
 80058f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80058f8:	6918      	ldr	r0, [r3, #16]
 80058fa:	f000 fcc3 	bl	8006284 <__hi0bits>
 80058fe:	f1c0 0020 	rsb	r0, r0, #32
 8005902:	9b07      	ldr	r3, [sp, #28]
 8005904:	4418      	add	r0, r3
 8005906:	f010 001f 	ands.w	r0, r0, #31
 800590a:	f000 80f0 	beq.w	8005aee <_dtoa_r+0x9ae>
 800590e:	f1c0 0320 	rsb	r3, r0, #32
 8005912:	2b04      	cmp	r3, #4
 8005914:	f340 80e2 	ble.w	8005adc <_dtoa_r+0x99c>
 8005918:	9b07      	ldr	r3, [sp, #28]
 800591a:	f1c0 001c 	rsb	r0, r0, #28
 800591e:	4480      	add	r8, r0
 8005920:	4405      	add	r5, r0
 8005922:	4403      	add	r3, r0
 8005924:	9307      	str	r3, [sp, #28]
 8005926:	f1b8 0f00 	cmp.w	r8, #0
 800592a:	dd05      	ble.n	8005938 <_dtoa_r+0x7f8>
 800592c:	4651      	mov	r1, sl
 800592e:	4642      	mov	r2, r8
 8005930:	4620      	mov	r0, r4
 8005932:	f000 fdd9 	bl	80064e8 <__lshift>
 8005936:	4682      	mov	sl, r0
 8005938:	9b07      	ldr	r3, [sp, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	dd05      	ble.n	800594a <_dtoa_r+0x80a>
 800593e:	4631      	mov	r1, r6
 8005940:	461a      	mov	r2, r3
 8005942:	4620      	mov	r0, r4
 8005944:	f000 fdd0 	bl	80064e8 <__lshift>
 8005948:	4606      	mov	r6, r0
 800594a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80d3 	beq.w	8005af8 <_dtoa_r+0x9b8>
 8005952:	4631      	mov	r1, r6
 8005954:	4650      	mov	r0, sl
 8005956:	f000 fe18 	bl	800658a <__mcmp>
 800595a:	2800      	cmp	r0, #0
 800595c:	f280 80cc 	bge.w	8005af8 <_dtoa_r+0x9b8>
 8005960:	2300      	movs	r3, #0
 8005962:	4651      	mov	r1, sl
 8005964:	220a      	movs	r2, #10
 8005966:	4620      	mov	r0, r4
 8005968:	f000 fc51 	bl	800620e <__multadd>
 800596c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005972:	4682      	mov	sl, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 81a9 	beq.w	8005ccc <_dtoa_r+0xb8c>
 800597a:	2300      	movs	r3, #0
 800597c:	4639      	mov	r1, r7
 800597e:	220a      	movs	r2, #10
 8005980:	4620      	mov	r0, r4
 8005982:	f000 fc44 	bl	800620e <__multadd>
 8005986:	9b04      	ldr	r3, [sp, #16]
 8005988:	4607      	mov	r7, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	dc03      	bgt.n	8005996 <_dtoa_r+0x856>
 800598e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005990:	2b02      	cmp	r3, #2
 8005992:	f300 80b9 	bgt.w	8005b08 <_dtoa_r+0x9c8>
 8005996:	2d00      	cmp	r5, #0
 8005998:	dd05      	ble.n	80059a6 <_dtoa_r+0x866>
 800599a:	4639      	mov	r1, r7
 800599c:	462a      	mov	r2, r5
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 fda2 	bl	80064e8 <__lshift>
 80059a4:	4607      	mov	r7, r0
 80059a6:	9b08      	ldr	r3, [sp, #32]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8110 	beq.w	8005bce <_dtoa_r+0xa8e>
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 fbe1 	bl	8006178 <_Balloc>
 80059b6:	4605      	mov	r5, r0
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	f107 010c 	add.w	r1, r7, #12
 80059be:	3202      	adds	r2, #2
 80059c0:	0092      	lsls	r2, r2, #2
 80059c2:	300c      	adds	r0, #12
 80059c4:	f000 fbc0 	bl	8006148 <memcpy>
 80059c8:	2201      	movs	r2, #1
 80059ca:	4629      	mov	r1, r5
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 fd8b 	bl	80064e8 <__lshift>
 80059d2:	9707      	str	r7, [sp, #28]
 80059d4:	4607      	mov	r7, r0
 80059d6:	9b02      	ldr	r3, [sp, #8]
 80059d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	9308      	str	r3, [sp, #32]
 80059e2:	4631      	mov	r1, r6
 80059e4:	4650      	mov	r0, sl
 80059e6:	f7ff fb1f 	bl	8005028 <quorem>
 80059ea:	9907      	ldr	r1, [sp, #28]
 80059ec:	4605      	mov	r5, r0
 80059ee:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059f2:	4650      	mov	r0, sl
 80059f4:	f000 fdc9 	bl	800658a <__mcmp>
 80059f8:	463a      	mov	r2, r7
 80059fa:	9002      	str	r0, [sp, #8]
 80059fc:	4631      	mov	r1, r6
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 fddd 	bl	80065be <__mdiff>
 8005a04:	68c3      	ldr	r3, [r0, #12]
 8005a06:	4602      	mov	r2, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f040 80e2 	bne.w	8005bd2 <_dtoa_r+0xa92>
 8005a0e:	4601      	mov	r1, r0
 8005a10:	9009      	str	r0, [sp, #36]	; 0x24
 8005a12:	4650      	mov	r0, sl
 8005a14:	f000 fdb9 	bl	800658a <__mcmp>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4620      	mov	r0, r4
 8005a20:	9309      	str	r3, [sp, #36]	; 0x24
 8005a22:	f000 fbdd 	bl	80061e0 <_Bfree>
 8005a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f040 80d4 	bne.w	8005bd6 <_dtoa_r+0xa96>
 8005a2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	f040 80d0 	bne.w	8005bd6 <_dtoa_r+0xa96>
 8005a36:	9a08      	ldr	r2, [sp, #32]
 8005a38:	2a00      	cmp	r2, #0
 8005a3a:	f040 80cc 	bne.w	8005bd6 <_dtoa_r+0xa96>
 8005a3e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a42:	f000 80e8 	beq.w	8005c16 <_dtoa_r+0xad6>
 8005a46:	9b02      	ldr	r3, [sp, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	dd01      	ble.n	8005a50 <_dtoa_r+0x910>
 8005a4c:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005a50:	f108 0501 	add.w	r5, r8, #1
 8005a54:	f888 9000 	strb.w	r9, [r8]
 8005a58:	e06b      	b.n	8005b32 <_dtoa_r+0x9f2>
 8005a5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a5c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a60:	e6f7      	b.n	8005852 <_dtoa_r+0x712>
 8005a62:	9b08      	ldr	r3, [sp, #32]
 8005a64:	f109 36ff 	add.w	r6, r9, #4294967295
 8005a68:	42b3      	cmp	r3, r6
 8005a6a:	bfb7      	itett	lt
 8005a6c:	9b08      	ldrlt	r3, [sp, #32]
 8005a6e:	1b9e      	subge	r6, r3, r6
 8005a70:	1af2      	sublt	r2, r6, r3
 8005a72:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005a74:	bfbf      	itttt	lt
 8005a76:	9608      	strlt	r6, [sp, #32]
 8005a78:	189b      	addlt	r3, r3, r2
 8005a7a:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005a7c:	2600      	movlt	r6, #0
 8005a7e:	f1b9 0f00 	cmp.w	r9, #0
 8005a82:	bfb9      	ittee	lt
 8005a84:	eba8 0509 	sublt.w	r5, r8, r9
 8005a88:	2300      	movlt	r3, #0
 8005a8a:	4645      	movge	r5, r8
 8005a8c:	464b      	movge	r3, r9
 8005a8e:	e6e2      	b.n	8005856 <_dtoa_r+0x716>
 8005a90:	9e08      	ldr	r6, [sp, #32]
 8005a92:	4645      	mov	r5, r8
 8005a94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a96:	e6e7      	b.n	8005868 <_dtoa_r+0x728>
 8005a98:	9a08      	ldr	r2, [sp, #32]
 8005a9a:	e710      	b.n	80058be <_dtoa_r+0x77e>
 8005a9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	dc18      	bgt.n	8005ad4 <_dtoa_r+0x994>
 8005aa2:	9b02      	ldr	r3, [sp, #8]
 8005aa4:	b9b3      	cbnz	r3, 8005ad4 <_dtoa_r+0x994>
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aac:	b9a3      	cbnz	r3, 8005ad8 <_dtoa_r+0x998>
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	0d1b      	lsrs	r3, r3, #20
 8005ab6:	051b      	lsls	r3, r3, #20
 8005ab8:	b12b      	cbz	r3, 8005ac6 <_dtoa_r+0x986>
 8005aba:	9b07      	ldr	r3, [sp, #28]
 8005abc:	f108 0801 	add.w	r8, r8, #1
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	9307      	str	r3, [sp, #28]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	9308      	str	r3, [sp, #32]
 8005ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f47f af11 	bne.w	80058f2 <_dtoa_r+0x7b2>
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	e716      	b.n	8005902 <_dtoa_r+0x7c2>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e7f6      	b.n	8005ac6 <_dtoa_r+0x986>
 8005ad8:	9b02      	ldr	r3, [sp, #8]
 8005ada:	e7f4      	b.n	8005ac6 <_dtoa_r+0x986>
 8005adc:	f43f af23 	beq.w	8005926 <_dtoa_r+0x7e6>
 8005ae0:	9a07      	ldr	r2, [sp, #28]
 8005ae2:	331c      	adds	r3, #28
 8005ae4:	441a      	add	r2, r3
 8005ae6:	4498      	add	r8, r3
 8005ae8:	441d      	add	r5, r3
 8005aea:	4613      	mov	r3, r2
 8005aec:	e71a      	b.n	8005924 <_dtoa_r+0x7e4>
 8005aee:	4603      	mov	r3, r0
 8005af0:	e7f6      	b.n	8005ae0 <_dtoa_r+0x9a0>
 8005af2:	bf00      	nop
 8005af4:	40240000 	.word	0x40240000
 8005af8:	f1b9 0f00 	cmp.w	r9, #0
 8005afc:	dc33      	bgt.n	8005b66 <_dtoa_r+0xa26>
 8005afe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	dd30      	ble.n	8005b66 <_dtoa_r+0xa26>
 8005b04:	f8cd 9010 	str.w	r9, [sp, #16]
 8005b08:	9b04      	ldr	r3, [sp, #16]
 8005b0a:	b963      	cbnz	r3, 8005b26 <_dtoa_r+0x9e6>
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	2205      	movs	r2, #5
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 fb7c 	bl	800620e <__multadd>
 8005b16:	4601      	mov	r1, r0
 8005b18:	4606      	mov	r6, r0
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f000 fd35 	bl	800658a <__mcmp>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	f73f ad5c 	bgt.w	80055de <_dtoa_r+0x49e>
 8005b26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b28:	9d06      	ldr	r5, [sp, #24]
 8005b2a:	ea6f 0b03 	mvn.w	fp, r3
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9307      	str	r3, [sp, #28]
 8005b32:	4631      	mov	r1, r6
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 fb53 	bl	80061e0 <_Bfree>
 8005b3a:	2f00      	cmp	r7, #0
 8005b3c:	f43f ae4b 	beq.w	80057d6 <_dtoa_r+0x696>
 8005b40:	9b07      	ldr	r3, [sp, #28]
 8005b42:	b12b      	cbz	r3, 8005b50 <_dtoa_r+0xa10>
 8005b44:	42bb      	cmp	r3, r7
 8005b46:	d003      	beq.n	8005b50 <_dtoa_r+0xa10>
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 fb48 	bl	80061e0 <_Bfree>
 8005b50:	4639      	mov	r1, r7
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 fb44 	bl	80061e0 <_Bfree>
 8005b58:	e63d      	b.n	80057d6 <_dtoa_r+0x696>
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	4637      	mov	r7, r6
 8005b5e:	e7e2      	b.n	8005b26 <_dtoa_r+0x9e6>
 8005b60:	46bb      	mov	fp, r7
 8005b62:	4637      	mov	r7, r6
 8005b64:	e53b      	b.n	80055de <_dtoa_r+0x49e>
 8005b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b68:	f8cd 9010 	str.w	r9, [sp, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f47f af12 	bne.w	8005996 <_dtoa_r+0x856>
 8005b72:	9d06      	ldr	r5, [sp, #24]
 8005b74:	4631      	mov	r1, r6
 8005b76:	4650      	mov	r0, sl
 8005b78:	f7ff fa56 	bl	8005028 <quorem>
 8005b7c:	9b06      	ldr	r3, [sp, #24]
 8005b7e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b82:	f805 9b01 	strb.w	r9, [r5], #1
 8005b86:	9a04      	ldr	r2, [sp, #16]
 8005b88:	1aeb      	subs	r3, r5, r3
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	f300 8081 	bgt.w	8005c92 <_dtoa_r+0xb52>
 8005b90:	9b06      	ldr	r3, [sp, #24]
 8005b92:	2a01      	cmp	r2, #1
 8005b94:	bfac      	ite	ge
 8005b96:	189b      	addge	r3, r3, r2
 8005b98:	3301      	addlt	r3, #1
 8005b9a:	4698      	mov	r8, r3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9307      	str	r3, [sp, #28]
 8005ba0:	4651      	mov	r1, sl
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fc9f 	bl	80064e8 <__lshift>
 8005baa:	4631      	mov	r1, r6
 8005bac:	4682      	mov	sl, r0
 8005bae:	f000 fcec 	bl	800658a <__mcmp>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	dc34      	bgt.n	8005c20 <_dtoa_r+0xae0>
 8005bb6:	d102      	bne.n	8005bbe <_dtoa_r+0xa7e>
 8005bb8:	f019 0f01 	tst.w	r9, #1
 8005bbc:	d130      	bne.n	8005c20 <_dtoa_r+0xae0>
 8005bbe:	4645      	mov	r5, r8
 8005bc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bc4:	1e6a      	subs	r2, r5, #1
 8005bc6:	2b30      	cmp	r3, #48	; 0x30
 8005bc8:	d1b3      	bne.n	8005b32 <_dtoa_r+0x9f2>
 8005bca:	4615      	mov	r5, r2
 8005bcc:	e7f8      	b.n	8005bc0 <_dtoa_r+0xa80>
 8005bce:	4638      	mov	r0, r7
 8005bd0:	e6ff      	b.n	80059d2 <_dtoa_r+0x892>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e722      	b.n	8005a1c <_dtoa_r+0x8dc>
 8005bd6:	9a02      	ldr	r2, [sp, #8]
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	db04      	blt.n	8005be6 <_dtoa_r+0xaa6>
 8005bdc:	d128      	bne.n	8005c30 <_dtoa_r+0xaf0>
 8005bde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005be0:	bb32      	cbnz	r2, 8005c30 <_dtoa_r+0xaf0>
 8005be2:	9a08      	ldr	r2, [sp, #32]
 8005be4:	bb22      	cbnz	r2, 8005c30 <_dtoa_r+0xaf0>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f77f af32 	ble.w	8005a50 <_dtoa_r+0x910>
 8005bec:	4651      	mov	r1, sl
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 fc79 	bl	80064e8 <__lshift>
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4682      	mov	sl, r0
 8005bfa:	f000 fcc6 	bl	800658a <__mcmp>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	dc05      	bgt.n	8005c0e <_dtoa_r+0xace>
 8005c02:	f47f af25 	bne.w	8005a50 <_dtoa_r+0x910>
 8005c06:	f019 0f01 	tst.w	r9, #1
 8005c0a:	f43f af21 	beq.w	8005a50 <_dtoa_r+0x910>
 8005c0e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c12:	f47f af1b 	bne.w	8005a4c <_dtoa_r+0x90c>
 8005c16:	2339      	movs	r3, #57	; 0x39
 8005c18:	f108 0801 	add.w	r8, r8, #1
 8005c1c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005c20:	4645      	mov	r5, r8
 8005c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c26:	1e6a      	subs	r2, r5, #1
 8005c28:	2b39      	cmp	r3, #57	; 0x39
 8005c2a:	d03a      	beq.n	8005ca2 <_dtoa_r+0xb62>
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	e03f      	b.n	8005cb0 <_dtoa_r+0xb70>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f108 0501 	add.w	r5, r8, #1
 8005c36:	dd05      	ble.n	8005c44 <_dtoa_r+0xb04>
 8005c38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c3c:	d0eb      	beq.n	8005c16 <_dtoa_r+0xad6>
 8005c3e:	f109 0901 	add.w	r9, r9, #1
 8005c42:	e707      	b.n	8005a54 <_dtoa_r+0x914>
 8005c44:	9b06      	ldr	r3, [sp, #24]
 8005c46:	9a04      	ldr	r2, [sp, #16]
 8005c48:	1aeb      	subs	r3, r5, r3
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	46a8      	mov	r8, r5
 8005c4e:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005c52:	d0a5      	beq.n	8005ba0 <_dtoa_r+0xa60>
 8005c54:	4651      	mov	r1, sl
 8005c56:	2300      	movs	r3, #0
 8005c58:	220a      	movs	r2, #10
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 fad7 	bl	800620e <__multadd>
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	4682      	mov	sl, r0
 8005c64:	42bb      	cmp	r3, r7
 8005c66:	f04f 020a 	mov.w	r2, #10
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	9907      	ldr	r1, [sp, #28]
 8005c70:	4620      	mov	r0, r4
 8005c72:	d104      	bne.n	8005c7e <_dtoa_r+0xb3e>
 8005c74:	f000 facb 	bl	800620e <__multadd>
 8005c78:	9007      	str	r0, [sp, #28]
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	e6b1      	b.n	80059e2 <_dtoa_r+0x8a2>
 8005c7e:	f000 fac6 	bl	800620e <__multadd>
 8005c82:	2300      	movs	r3, #0
 8005c84:	9007      	str	r0, [sp, #28]
 8005c86:	220a      	movs	r2, #10
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fabf 	bl	800620e <__multadd>
 8005c90:	e7f3      	b.n	8005c7a <_dtoa_r+0xb3a>
 8005c92:	4651      	mov	r1, sl
 8005c94:	2300      	movs	r3, #0
 8005c96:	220a      	movs	r2, #10
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fab8 	bl	800620e <__multadd>
 8005c9e:	4682      	mov	sl, r0
 8005ca0:	e768      	b.n	8005b74 <_dtoa_r+0xa34>
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d105      	bne.n	8005cb4 <_dtoa_r+0xb74>
 8005ca8:	2331      	movs	r3, #49	; 0x31
 8005caa:	9a06      	ldr	r2, [sp, #24]
 8005cac:	f10b 0b01 	add.w	fp, fp, #1
 8005cb0:	7013      	strb	r3, [r2, #0]
 8005cb2:	e73e      	b.n	8005b32 <_dtoa_r+0x9f2>
 8005cb4:	4615      	mov	r5, r2
 8005cb6:	e7b4      	b.n	8005c22 <_dtoa_r+0xae2>
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <_dtoa_r+0xba0>)
 8005cba:	f7ff baa3 	b.w	8005204 <_dtoa_r+0xc4>
 8005cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f47f aa7d 	bne.w	80051c0 <_dtoa_r+0x80>
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <_dtoa_r+0xba4>)
 8005cc8:	f7ff ba9c 	b.w	8005204 <_dtoa_r+0xc4>
 8005ccc:	9b04      	ldr	r3, [sp, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f73f af4f 	bgt.w	8005b72 <_dtoa_r+0xa32>
 8005cd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	f77f af4b 	ble.w	8005b72 <_dtoa_r+0xa32>
 8005cdc:	e714      	b.n	8005b08 <_dtoa_r+0x9c8>
 8005cde:	bf00      	nop
 8005ce0:	08006faf 	.word	0x08006faf
 8005ce4:	08006fd1 	.word	0x08006fd1

08005ce8 <_localeconv_r>:
 8005ce8:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <_localeconv_r+0x14>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6a18      	ldr	r0, [r3, #32]
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <_localeconv_r+0x18>)
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	bf08      	it	eq
 8005cf4:	4618      	moveq	r0, r3
 8005cf6:	30f0      	adds	r0, #240	; 0xf0
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000160 	.word	0x20000160
 8005d00:	20000664 	.word	0x20000664

08005d04 <malloc>:
 8005d04:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <malloc+0xc>)
 8005d06:	4601      	mov	r1, r0
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	f000 b803 	b.w	8005d14 <_malloc_r>
 8005d0e:	bf00      	nop
 8005d10:	20000160 	.word	0x20000160

08005d14 <_malloc_r>:
 8005d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d18:	f101 040b 	add.w	r4, r1, #11
 8005d1c:	2c16      	cmp	r4, #22
 8005d1e:	4681      	mov	r9, r0
 8005d20:	d907      	bls.n	8005d32 <_malloc_r+0x1e>
 8005d22:	f034 0407 	bics.w	r4, r4, #7
 8005d26:	d505      	bpl.n	8005d34 <_malloc_r+0x20>
 8005d28:	230c      	movs	r3, #12
 8005d2a:	f8c9 3000 	str.w	r3, [r9]
 8005d2e:	2600      	movs	r6, #0
 8005d30:	e131      	b.n	8005f96 <_malloc_r+0x282>
 8005d32:	2410      	movs	r4, #16
 8005d34:	428c      	cmp	r4, r1
 8005d36:	d3f7      	bcc.n	8005d28 <_malloc_r+0x14>
 8005d38:	4648      	mov	r0, r9
 8005d3a:	f000 fa11 	bl	8006160 <__malloc_lock>
 8005d3e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005d42:	4d9b      	ldr	r5, [pc, #620]	; (8005fb0 <_malloc_r+0x29c>)
 8005d44:	d236      	bcs.n	8005db4 <_malloc_r+0xa0>
 8005d46:	f104 0208 	add.w	r2, r4, #8
 8005d4a:	442a      	add	r2, r5
 8005d4c:	6856      	ldr	r6, [r2, #4]
 8005d4e:	f1a2 0108 	sub.w	r1, r2, #8
 8005d52:	428e      	cmp	r6, r1
 8005d54:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005d58:	d102      	bne.n	8005d60 <_malloc_r+0x4c>
 8005d5a:	68d6      	ldr	r6, [r2, #12]
 8005d5c:	42b2      	cmp	r2, r6
 8005d5e:	d010      	beq.n	8005d82 <_malloc_r+0x6e>
 8005d60:	6873      	ldr	r3, [r6, #4]
 8005d62:	68f2      	ldr	r2, [r6, #12]
 8005d64:	68b1      	ldr	r1, [r6, #8]
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	60ca      	str	r2, [r1, #12]
 8005d6c:	4433      	add	r3, r6
 8005d6e:	6091      	str	r1, [r2, #8]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	605a      	str	r2, [r3, #4]
 8005d78:	4648      	mov	r0, r9
 8005d7a:	f000 f9f7 	bl	800616c <__malloc_unlock>
 8005d7e:	3608      	adds	r6, #8
 8005d80:	e109      	b.n	8005f96 <_malloc_r+0x282>
 8005d82:	3302      	adds	r3, #2
 8005d84:	4a8b      	ldr	r2, [pc, #556]	; (8005fb4 <_malloc_r+0x2a0>)
 8005d86:	692e      	ldr	r6, [r5, #16]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4296      	cmp	r6, r2
 8005d8c:	d06d      	beq.n	8005e6a <_malloc_r+0x156>
 8005d8e:	6870      	ldr	r0, [r6, #4]
 8005d90:	f020 0003 	bic.w	r0, r0, #3
 8005d94:	1b07      	subs	r7, r0, r4
 8005d96:	2f0f      	cmp	r7, #15
 8005d98:	dd47      	ble.n	8005e2a <_malloc_r+0x116>
 8005d9a:	1933      	adds	r3, r6, r4
 8005d9c:	f044 0401 	orr.w	r4, r4, #1
 8005da0:	6074      	str	r4, [r6, #4]
 8005da2:	616b      	str	r3, [r5, #20]
 8005da4:	612b      	str	r3, [r5, #16]
 8005da6:	60da      	str	r2, [r3, #12]
 8005da8:	609a      	str	r2, [r3, #8]
 8005daa:	f047 0201 	orr.w	r2, r7, #1
 8005dae:	605a      	str	r2, [r3, #4]
 8005db0:	5037      	str	r7, [r6, r0]
 8005db2:	e7e1      	b.n	8005d78 <_malloc_r+0x64>
 8005db4:	0a63      	lsrs	r3, r4, #9
 8005db6:	d02a      	beq.n	8005e0e <_malloc_r+0xfa>
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d812      	bhi.n	8005de2 <_malloc_r+0xce>
 8005dbc:	09a3      	lsrs	r3, r4, #6
 8005dbe:	3338      	adds	r3, #56	; 0x38
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005dc6:	6856      	ldr	r6, [r2, #4]
 8005dc8:	f1a2 0008 	sub.w	r0, r2, #8
 8005dcc:	4286      	cmp	r6, r0
 8005dce:	d006      	beq.n	8005dde <_malloc_r+0xca>
 8005dd0:	6872      	ldr	r2, [r6, #4]
 8005dd2:	f022 0203 	bic.w	r2, r2, #3
 8005dd6:	1b11      	subs	r1, r2, r4
 8005dd8:	290f      	cmp	r1, #15
 8005dda:	dd1c      	ble.n	8005e16 <_malloc_r+0x102>
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	3301      	adds	r3, #1
 8005de0:	e7d0      	b.n	8005d84 <_malloc_r+0x70>
 8005de2:	2b14      	cmp	r3, #20
 8005de4:	d801      	bhi.n	8005dea <_malloc_r+0xd6>
 8005de6:	335b      	adds	r3, #91	; 0x5b
 8005de8:	e7ea      	b.n	8005dc0 <_malloc_r+0xac>
 8005dea:	2b54      	cmp	r3, #84	; 0x54
 8005dec:	d802      	bhi.n	8005df4 <_malloc_r+0xe0>
 8005dee:	0b23      	lsrs	r3, r4, #12
 8005df0:	336e      	adds	r3, #110	; 0x6e
 8005df2:	e7e5      	b.n	8005dc0 <_malloc_r+0xac>
 8005df4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005df8:	d802      	bhi.n	8005e00 <_malloc_r+0xec>
 8005dfa:	0be3      	lsrs	r3, r4, #15
 8005dfc:	3377      	adds	r3, #119	; 0x77
 8005dfe:	e7df      	b.n	8005dc0 <_malloc_r+0xac>
 8005e00:	f240 5254 	movw	r2, #1364	; 0x554
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d804      	bhi.n	8005e12 <_malloc_r+0xfe>
 8005e08:	0ca3      	lsrs	r3, r4, #18
 8005e0a:	337c      	adds	r3, #124	; 0x7c
 8005e0c:	e7d8      	b.n	8005dc0 <_malloc_r+0xac>
 8005e0e:	233f      	movs	r3, #63	; 0x3f
 8005e10:	e7d6      	b.n	8005dc0 <_malloc_r+0xac>
 8005e12:	237e      	movs	r3, #126	; 0x7e
 8005e14:	e7d4      	b.n	8005dc0 <_malloc_r+0xac>
 8005e16:	2900      	cmp	r1, #0
 8005e18:	68f1      	ldr	r1, [r6, #12]
 8005e1a:	db04      	blt.n	8005e26 <_malloc_r+0x112>
 8005e1c:	68b3      	ldr	r3, [r6, #8]
 8005e1e:	60d9      	str	r1, [r3, #12]
 8005e20:	608b      	str	r3, [r1, #8]
 8005e22:	18b3      	adds	r3, r6, r2
 8005e24:	e7a4      	b.n	8005d70 <_malloc_r+0x5c>
 8005e26:	460e      	mov	r6, r1
 8005e28:	e7d0      	b.n	8005dcc <_malloc_r+0xb8>
 8005e2a:	2f00      	cmp	r7, #0
 8005e2c:	616a      	str	r2, [r5, #20]
 8005e2e:	612a      	str	r2, [r5, #16]
 8005e30:	db05      	blt.n	8005e3e <_malloc_r+0x12a>
 8005e32:	4430      	add	r0, r6
 8005e34:	6843      	ldr	r3, [r0, #4]
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	6043      	str	r3, [r0, #4]
 8005e3c:	e79c      	b.n	8005d78 <_malloc_r+0x64>
 8005e3e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005e42:	d244      	bcs.n	8005ece <_malloc_r+0x1ba>
 8005e44:	2201      	movs	r2, #1
 8005e46:	08c0      	lsrs	r0, r0, #3
 8005e48:	1087      	asrs	r7, r0, #2
 8005e4a:	fa02 f707 	lsl.w	r7, r2, r7
 8005e4e:	686a      	ldr	r2, [r5, #4]
 8005e50:	3001      	adds	r0, #1
 8005e52:	433a      	orrs	r2, r7
 8005e54:	606a      	str	r2, [r5, #4]
 8005e56:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8005e5a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005e5e:	3a08      	subs	r2, #8
 8005e60:	60f2      	str	r2, [r6, #12]
 8005e62:	60b7      	str	r7, [r6, #8]
 8005e64:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005e68:	60fe      	str	r6, [r7, #12]
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	109a      	asrs	r2, r3, #2
 8005e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e72:	6868      	ldr	r0, [r5, #4]
 8005e74:	4282      	cmp	r2, r0
 8005e76:	f200 809f 	bhi.w	8005fb8 <_malloc_r+0x2a4>
 8005e7a:	4202      	tst	r2, r0
 8005e7c:	d106      	bne.n	8005e8c <_malloc_r+0x178>
 8005e7e:	f023 0303 	bic.w	r3, r3, #3
 8005e82:	0052      	lsls	r2, r2, #1
 8005e84:	4202      	tst	r2, r0
 8005e86:	f103 0304 	add.w	r3, r3, #4
 8005e8a:	d0fa      	beq.n	8005e82 <_malloc_r+0x16e>
 8005e8c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005e90:	46e0      	mov	r8, ip
 8005e92:	469e      	mov	lr, r3
 8005e94:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005e98:	4546      	cmp	r6, r8
 8005e9a:	d153      	bne.n	8005f44 <_malloc_r+0x230>
 8005e9c:	f10e 0e01 	add.w	lr, lr, #1
 8005ea0:	f01e 0f03 	tst.w	lr, #3
 8005ea4:	f108 0808 	add.w	r8, r8, #8
 8005ea8:	d1f4      	bne.n	8005e94 <_malloc_r+0x180>
 8005eaa:	0798      	lsls	r0, r3, #30
 8005eac:	d179      	bne.n	8005fa2 <_malloc_r+0x28e>
 8005eae:	686b      	ldr	r3, [r5, #4]
 8005eb0:	ea23 0302 	bic.w	r3, r3, r2
 8005eb4:	606b      	str	r3, [r5, #4]
 8005eb6:	6868      	ldr	r0, [r5, #4]
 8005eb8:	0052      	lsls	r2, r2, #1
 8005eba:	4282      	cmp	r2, r0
 8005ebc:	d87c      	bhi.n	8005fb8 <_malloc_r+0x2a4>
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	d07a      	beq.n	8005fb8 <_malloc_r+0x2a4>
 8005ec2:	4673      	mov	r3, lr
 8005ec4:	4202      	tst	r2, r0
 8005ec6:	d1e1      	bne.n	8005e8c <_malloc_r+0x178>
 8005ec8:	3304      	adds	r3, #4
 8005eca:	0052      	lsls	r2, r2, #1
 8005ecc:	e7fa      	b.n	8005ec4 <_malloc_r+0x1b0>
 8005ece:	0a42      	lsrs	r2, r0, #9
 8005ed0:	2a04      	cmp	r2, #4
 8005ed2:	d815      	bhi.n	8005f00 <_malloc_r+0x1ec>
 8005ed4:	0982      	lsrs	r2, r0, #6
 8005ed6:	3238      	adds	r2, #56	; 0x38
 8005ed8:	1c57      	adds	r7, r2, #1
 8005eda:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005ede:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8005ee2:	45be      	cmp	lr, r7
 8005ee4:	d126      	bne.n	8005f34 <_malloc_r+0x220>
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	1092      	asrs	r2, r2, #2
 8005eea:	fa00 f202 	lsl.w	r2, r0, r2
 8005eee:	6868      	ldr	r0, [r5, #4]
 8005ef0:	4310      	orrs	r0, r2
 8005ef2:	6068      	str	r0, [r5, #4]
 8005ef4:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005ef8:	60b7      	str	r7, [r6, #8]
 8005efa:	f8ce 6008 	str.w	r6, [lr, #8]
 8005efe:	e7b3      	b.n	8005e68 <_malloc_r+0x154>
 8005f00:	2a14      	cmp	r2, #20
 8005f02:	d801      	bhi.n	8005f08 <_malloc_r+0x1f4>
 8005f04:	325b      	adds	r2, #91	; 0x5b
 8005f06:	e7e7      	b.n	8005ed8 <_malloc_r+0x1c4>
 8005f08:	2a54      	cmp	r2, #84	; 0x54
 8005f0a:	d802      	bhi.n	8005f12 <_malloc_r+0x1fe>
 8005f0c:	0b02      	lsrs	r2, r0, #12
 8005f0e:	326e      	adds	r2, #110	; 0x6e
 8005f10:	e7e2      	b.n	8005ed8 <_malloc_r+0x1c4>
 8005f12:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005f16:	d802      	bhi.n	8005f1e <_malloc_r+0x20a>
 8005f18:	0bc2      	lsrs	r2, r0, #15
 8005f1a:	3277      	adds	r2, #119	; 0x77
 8005f1c:	e7dc      	b.n	8005ed8 <_malloc_r+0x1c4>
 8005f1e:	f240 5754 	movw	r7, #1364	; 0x554
 8005f22:	42ba      	cmp	r2, r7
 8005f24:	bf9a      	itte	ls
 8005f26:	0c82      	lsrls	r2, r0, #18
 8005f28:	327c      	addls	r2, #124	; 0x7c
 8005f2a:	227e      	movhi	r2, #126	; 0x7e
 8005f2c:	e7d4      	b.n	8005ed8 <_malloc_r+0x1c4>
 8005f2e:	68bf      	ldr	r7, [r7, #8]
 8005f30:	45be      	cmp	lr, r7
 8005f32:	d004      	beq.n	8005f3e <_malloc_r+0x22a>
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	f022 0203 	bic.w	r2, r2, #3
 8005f3a:	4290      	cmp	r0, r2
 8005f3c:	d3f7      	bcc.n	8005f2e <_malloc_r+0x21a>
 8005f3e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005f42:	e7d7      	b.n	8005ef4 <_malloc_r+0x1e0>
 8005f44:	6870      	ldr	r0, [r6, #4]
 8005f46:	68f7      	ldr	r7, [r6, #12]
 8005f48:	f020 0003 	bic.w	r0, r0, #3
 8005f4c:	eba0 0a04 	sub.w	sl, r0, r4
 8005f50:	f1ba 0f0f 	cmp.w	sl, #15
 8005f54:	dd10      	ble.n	8005f78 <_malloc_r+0x264>
 8005f56:	68b2      	ldr	r2, [r6, #8]
 8005f58:	1933      	adds	r3, r6, r4
 8005f5a:	f044 0401 	orr.w	r4, r4, #1
 8005f5e:	6074      	str	r4, [r6, #4]
 8005f60:	60d7      	str	r7, [r2, #12]
 8005f62:	60ba      	str	r2, [r7, #8]
 8005f64:	f04a 0201 	orr.w	r2, sl, #1
 8005f68:	616b      	str	r3, [r5, #20]
 8005f6a:	612b      	str	r3, [r5, #16]
 8005f6c:	60d9      	str	r1, [r3, #12]
 8005f6e:	6099      	str	r1, [r3, #8]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	f846 a000 	str.w	sl, [r6, r0]
 8005f76:	e6ff      	b.n	8005d78 <_malloc_r+0x64>
 8005f78:	f1ba 0f00 	cmp.w	sl, #0
 8005f7c:	db0f      	blt.n	8005f9e <_malloc_r+0x28a>
 8005f7e:	4430      	add	r0, r6
 8005f80:	6843      	ldr	r3, [r0, #4]
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	6043      	str	r3, [r0, #4]
 8005f88:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	60df      	str	r7, [r3, #12]
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	f000 f8eb 	bl	800616c <__malloc_unlock>
 8005f96:	4630      	mov	r0, r6
 8005f98:	b003      	add	sp, #12
 8005f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9e:	463e      	mov	r6, r7
 8005fa0:	e77a      	b.n	8005e98 <_malloc_r+0x184>
 8005fa2:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4584      	cmp	ip, r0
 8005faa:	f43f af7e 	beq.w	8005eaa <_malloc_r+0x196>
 8005fae:	e782      	b.n	8005eb6 <_malloc_r+0x1a2>
 8005fb0:	20000254 	.word	0x20000254
 8005fb4:	2000025c 	.word	0x2000025c
 8005fb8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005fbc:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005fc0:	f026 0603 	bic.w	r6, r6, #3
 8005fc4:	42b4      	cmp	r4, r6
 8005fc6:	d803      	bhi.n	8005fd0 <_malloc_r+0x2bc>
 8005fc8:	1b33      	subs	r3, r6, r4
 8005fca:	2b0f      	cmp	r3, #15
 8005fcc:	f300 8095 	bgt.w	80060fa <_malloc_r+0x3e6>
 8005fd0:	4a4f      	ldr	r2, [pc, #316]	; (8006110 <_malloc_r+0x3fc>)
 8005fd2:	eb0b 0306 	add.w	r3, fp, r6
 8005fd6:	6817      	ldr	r7, [r2, #0]
 8005fd8:	4a4e      	ldr	r2, [pc, #312]	; (8006114 <_malloc_r+0x400>)
 8005fda:	3710      	adds	r7, #16
 8005fdc:	6811      	ldr	r1, [r2, #0]
 8005fde:	4427      	add	r7, r4
 8005fe0:	3101      	adds	r1, #1
 8005fe2:	d005      	beq.n	8005ff0 <_malloc_r+0x2dc>
 8005fe4:	494c      	ldr	r1, [pc, #304]	; (8006118 <_malloc_r+0x404>)
 8005fe6:	3901      	subs	r1, #1
 8005fe8:	440f      	add	r7, r1
 8005fea:	3101      	adds	r1, #1
 8005fec:	4249      	negs	r1, r1
 8005fee:	400f      	ands	r7, r1
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4648      	mov	r0, r9
 8005ff4:	9201      	str	r2, [sp, #4]
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	f000 fb90 	bl	800671c <_sbrk_r>
 8005ffc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006000:	4680      	mov	r8, r0
 8006002:	d055      	beq.n	80060b0 <_malloc_r+0x39c>
 8006004:	9b00      	ldr	r3, [sp, #0]
 8006006:	9a01      	ldr	r2, [sp, #4]
 8006008:	4283      	cmp	r3, r0
 800600a:	d901      	bls.n	8006010 <_malloc_r+0x2fc>
 800600c:	45ab      	cmp	fp, r5
 800600e:	d14f      	bne.n	80060b0 <_malloc_r+0x39c>
 8006010:	4842      	ldr	r0, [pc, #264]	; (800611c <_malloc_r+0x408>)
 8006012:	4543      	cmp	r3, r8
 8006014:	6801      	ldr	r1, [r0, #0]
 8006016:	4682      	mov	sl, r0
 8006018:	eb07 0e01 	add.w	lr, r7, r1
 800601c:	f8c0 e000 	str.w	lr, [r0]
 8006020:	493f      	ldr	r1, [pc, #252]	; (8006120 <_malloc_r+0x40c>)
 8006022:	d113      	bne.n	800604c <_malloc_r+0x338>
 8006024:	420b      	tst	r3, r1
 8006026:	d111      	bne.n	800604c <_malloc_r+0x338>
 8006028:	68ab      	ldr	r3, [r5, #8]
 800602a:	443e      	add	r6, r7
 800602c:	f046 0601 	orr.w	r6, r6, #1
 8006030:	605e      	str	r6, [r3, #4]
 8006032:	4a3c      	ldr	r2, [pc, #240]	; (8006124 <_malloc_r+0x410>)
 8006034:	f8da 3000 	ldr.w	r3, [sl]
 8006038:	6811      	ldr	r1, [r2, #0]
 800603a:	428b      	cmp	r3, r1
 800603c:	bf88      	it	hi
 800603e:	6013      	strhi	r3, [r2, #0]
 8006040:	4a39      	ldr	r2, [pc, #228]	; (8006128 <_malloc_r+0x414>)
 8006042:	6811      	ldr	r1, [r2, #0]
 8006044:	428b      	cmp	r3, r1
 8006046:	bf88      	it	hi
 8006048:	6013      	strhi	r3, [r2, #0]
 800604a:	e031      	b.n	80060b0 <_malloc_r+0x39c>
 800604c:	6810      	ldr	r0, [r2, #0]
 800604e:	3001      	adds	r0, #1
 8006050:	bf1b      	ittet	ne
 8006052:	eba8 0303 	subne.w	r3, r8, r3
 8006056:	4473      	addne	r3, lr
 8006058:	f8c2 8000 	streq.w	r8, [r2]
 800605c:	f8ca 3000 	strne.w	r3, [sl]
 8006060:	f018 0007 	ands.w	r0, r8, #7
 8006064:	bf1c      	itt	ne
 8006066:	f1c0 0008 	rsbne	r0, r0, #8
 800606a:	4480      	addne	r8, r0
 800606c:	4b2a      	ldr	r3, [pc, #168]	; (8006118 <_malloc_r+0x404>)
 800606e:	4447      	add	r7, r8
 8006070:	4418      	add	r0, r3
 8006072:	400f      	ands	r7, r1
 8006074:	1bc7      	subs	r7, r0, r7
 8006076:	4639      	mov	r1, r7
 8006078:	4648      	mov	r0, r9
 800607a:	f000 fb4f 	bl	800671c <_sbrk_r>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	bf04      	itt	eq
 8006082:	4640      	moveq	r0, r8
 8006084:	2700      	moveq	r7, #0
 8006086:	f8da 3000 	ldr.w	r3, [sl]
 800608a:	eba0 0008 	sub.w	r0, r0, r8
 800608e:	443b      	add	r3, r7
 8006090:	4407      	add	r7, r0
 8006092:	f047 0701 	orr.w	r7, r7, #1
 8006096:	45ab      	cmp	fp, r5
 8006098:	f8c5 8008 	str.w	r8, [r5, #8]
 800609c:	f8ca 3000 	str.w	r3, [sl]
 80060a0:	f8c8 7004 	str.w	r7, [r8, #4]
 80060a4:	d0c5      	beq.n	8006032 <_malloc_r+0x31e>
 80060a6:	2e0f      	cmp	r6, #15
 80060a8:	d810      	bhi.n	80060cc <_malloc_r+0x3b8>
 80060aa:	2301      	movs	r3, #1
 80060ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80060b0:	68ab      	ldr	r3, [r5, #8]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	f022 0203 	bic.w	r2, r2, #3
 80060b8:	4294      	cmp	r4, r2
 80060ba:	eba2 0304 	sub.w	r3, r2, r4
 80060be:	d801      	bhi.n	80060c4 <_malloc_r+0x3b0>
 80060c0:	2b0f      	cmp	r3, #15
 80060c2:	dc1a      	bgt.n	80060fa <_malloc_r+0x3e6>
 80060c4:	4648      	mov	r0, r9
 80060c6:	f000 f851 	bl	800616c <__malloc_unlock>
 80060ca:	e630      	b.n	8005d2e <_malloc_r+0x1a>
 80060cc:	2205      	movs	r2, #5
 80060ce:	f8db 3004 	ldr.w	r3, [fp, #4]
 80060d2:	3e0c      	subs	r6, #12
 80060d4:	f026 0607 	bic.w	r6, r6, #7
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	4333      	orrs	r3, r6
 80060de:	f8cb 3004 	str.w	r3, [fp, #4]
 80060e2:	2e0f      	cmp	r6, #15
 80060e4:	eb0b 0306 	add.w	r3, fp, r6
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	d9a1      	bls.n	8006032 <_malloc_r+0x31e>
 80060ee:	f10b 0108 	add.w	r1, fp, #8
 80060f2:	4648      	mov	r0, r9
 80060f4:	f000 fc20 	bl	8006938 <_free_r>
 80060f8:	e79b      	b.n	8006032 <_malloc_r+0x31e>
 80060fa:	68ae      	ldr	r6, [r5, #8]
 80060fc:	f044 0201 	orr.w	r2, r4, #1
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	4434      	add	r4, r6
 8006106:	6072      	str	r2, [r6, #4]
 8006108:	60ac      	str	r4, [r5, #8]
 800610a:	6063      	str	r3, [r4, #4]
 800610c:	e634      	b.n	8005d78 <_malloc_r+0x64>
 800610e:	bf00      	nop
 8006110:	20000a4c 	.word	0x20000a4c
 8006114:	2000065c 	.word	0x2000065c
 8006118:	00000080 	.word	0x00000080
 800611c:	20000a1c 	.word	0x20000a1c
 8006120:	0000007f 	.word	0x0000007f
 8006124:	20000a44 	.word	0x20000a44
 8006128:	20000a48 	.word	0x20000a48

0800612c <memchr>:
 800612c:	b510      	push	{r4, lr}
 800612e:	b2c9      	uxtb	r1, r1
 8006130:	4402      	add	r2, r0
 8006132:	4290      	cmp	r0, r2
 8006134:	4603      	mov	r3, r0
 8006136:	d101      	bne.n	800613c <memchr+0x10>
 8006138:	2000      	movs	r0, #0
 800613a:	bd10      	pop	{r4, pc}
 800613c:	781c      	ldrb	r4, [r3, #0]
 800613e:	3001      	adds	r0, #1
 8006140:	428c      	cmp	r4, r1
 8006142:	d1f6      	bne.n	8006132 <memchr+0x6>
 8006144:	4618      	mov	r0, r3
 8006146:	bd10      	pop	{r4, pc}

08006148 <memcpy>:
 8006148:	b510      	push	{r4, lr}
 800614a:	1e43      	subs	r3, r0, #1
 800614c:	440a      	add	r2, r1
 800614e:	4291      	cmp	r1, r2
 8006150:	d100      	bne.n	8006154 <memcpy+0xc>
 8006152:	bd10      	pop	{r4, pc}
 8006154:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006158:	f803 4f01 	strb.w	r4, [r3, #1]!
 800615c:	e7f7      	b.n	800614e <memcpy+0x6>
	...

08006160 <__malloc_lock>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__malloc_lock+0x8>)
 8006162:	f000 bca5 	b.w	8006ab0 <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	20001bb0 	.word	0x20001bb0

0800616c <__malloc_unlock>:
 800616c:	4801      	ldr	r0, [pc, #4]	; (8006174 <__malloc_unlock+0x8>)
 800616e:	f000 bca0 	b.w	8006ab2 <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	20001bb0 	.word	0x20001bb0

08006178 <_Balloc>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800617c:	4604      	mov	r4, r0
 800617e:	460e      	mov	r6, r1
 8006180:	b93d      	cbnz	r5, 8006192 <_Balloc+0x1a>
 8006182:	2010      	movs	r0, #16
 8006184:	f7ff fdbe 	bl	8005d04 <malloc>
 8006188:	6260      	str	r0, [r4, #36]	; 0x24
 800618a:	6045      	str	r5, [r0, #4]
 800618c:	6085      	str	r5, [r0, #8]
 800618e:	6005      	str	r5, [r0, #0]
 8006190:	60c5      	str	r5, [r0, #12]
 8006192:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006194:	68eb      	ldr	r3, [r5, #12]
 8006196:	b183      	cbz	r3, 80061ba <_Balloc+0x42>
 8006198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80061a0:	b9b8      	cbnz	r0, 80061d2 <_Balloc+0x5a>
 80061a2:	2101      	movs	r1, #1
 80061a4:	fa01 f506 	lsl.w	r5, r1, r6
 80061a8:	1d6a      	adds	r2, r5, #5
 80061aa:	0092      	lsls	r2, r2, #2
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fb3f 	bl	8006830 <_calloc_r>
 80061b2:	b160      	cbz	r0, 80061ce <_Balloc+0x56>
 80061b4:	6046      	str	r6, [r0, #4]
 80061b6:	6085      	str	r5, [r0, #8]
 80061b8:	e00e      	b.n	80061d8 <_Balloc+0x60>
 80061ba:	2221      	movs	r2, #33	; 0x21
 80061bc:	2104      	movs	r1, #4
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 fb36 	bl	8006830 <_calloc_r>
 80061c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c6:	60e8      	str	r0, [r5, #12]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e4      	bne.n	8006198 <_Balloc+0x20>
 80061ce:	2000      	movs	r0, #0
 80061d0:	bd70      	pop	{r4, r5, r6, pc}
 80061d2:	6802      	ldr	r2, [r0, #0]
 80061d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80061d8:	2300      	movs	r3, #0
 80061da:	6103      	str	r3, [r0, #16]
 80061dc:	60c3      	str	r3, [r0, #12]
 80061de:	bd70      	pop	{r4, r5, r6, pc}

080061e0 <_Bfree>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80061e4:	4606      	mov	r6, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	b93c      	cbnz	r4, 80061fa <_Bfree+0x1a>
 80061ea:	2010      	movs	r0, #16
 80061ec:	f7ff fd8a 	bl	8005d04 <malloc>
 80061f0:	6270      	str	r0, [r6, #36]	; 0x24
 80061f2:	6044      	str	r4, [r0, #4]
 80061f4:	6084      	str	r4, [r0, #8]
 80061f6:	6004      	str	r4, [r0, #0]
 80061f8:	60c4      	str	r4, [r0, #12]
 80061fa:	b13d      	cbz	r5, 800620c <_Bfree+0x2c>
 80061fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80061fe:	686a      	ldr	r2, [r5, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006206:	6029      	str	r1, [r5, #0]
 8006208:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800620c:	bd70      	pop	{r4, r5, r6, pc}

0800620e <__multadd>:
 800620e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006212:	461f      	mov	r7, r3
 8006214:	4606      	mov	r6, r0
 8006216:	460c      	mov	r4, r1
 8006218:	2300      	movs	r3, #0
 800621a:	690d      	ldr	r5, [r1, #16]
 800621c:	f101 0e14 	add.w	lr, r1, #20
 8006220:	f8de 0000 	ldr.w	r0, [lr]
 8006224:	3301      	adds	r3, #1
 8006226:	b281      	uxth	r1, r0
 8006228:	fb02 7101 	mla	r1, r2, r1, r7
 800622c:	0c00      	lsrs	r0, r0, #16
 800622e:	0c0f      	lsrs	r7, r1, #16
 8006230:	fb02 7000 	mla	r0, r2, r0, r7
 8006234:	b289      	uxth	r1, r1
 8006236:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800623a:	429d      	cmp	r5, r3
 800623c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006240:	f84e 1b04 	str.w	r1, [lr], #4
 8006244:	dcec      	bgt.n	8006220 <__multadd+0x12>
 8006246:	b1d7      	cbz	r7, 800627e <__multadd+0x70>
 8006248:	68a3      	ldr	r3, [r4, #8]
 800624a:	429d      	cmp	r5, r3
 800624c:	db12      	blt.n	8006274 <__multadd+0x66>
 800624e:	6861      	ldr	r1, [r4, #4]
 8006250:	4630      	mov	r0, r6
 8006252:	3101      	adds	r1, #1
 8006254:	f7ff ff90 	bl	8006178 <_Balloc>
 8006258:	4680      	mov	r8, r0
 800625a:	6922      	ldr	r2, [r4, #16]
 800625c:	f104 010c 	add.w	r1, r4, #12
 8006260:	3202      	adds	r2, #2
 8006262:	0092      	lsls	r2, r2, #2
 8006264:	300c      	adds	r0, #12
 8006266:	f7ff ff6f 	bl	8006148 <memcpy>
 800626a:	4621      	mov	r1, r4
 800626c:	4630      	mov	r0, r6
 800626e:	f7ff ffb7 	bl	80061e0 <_Bfree>
 8006272:	4644      	mov	r4, r8
 8006274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006278:	3501      	adds	r5, #1
 800627a:	615f      	str	r7, [r3, #20]
 800627c:	6125      	str	r5, [r4, #16]
 800627e:	4620      	mov	r0, r4
 8006280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006284 <__hi0bits>:
 8006284:	0c02      	lsrs	r2, r0, #16
 8006286:	0412      	lsls	r2, r2, #16
 8006288:	4603      	mov	r3, r0
 800628a:	b9b2      	cbnz	r2, 80062ba <__hi0bits+0x36>
 800628c:	0403      	lsls	r3, r0, #16
 800628e:	2010      	movs	r0, #16
 8006290:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006294:	bf04      	itt	eq
 8006296:	021b      	lsleq	r3, r3, #8
 8006298:	3008      	addeq	r0, #8
 800629a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800629e:	bf04      	itt	eq
 80062a0:	011b      	lsleq	r3, r3, #4
 80062a2:	3004      	addeq	r0, #4
 80062a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80062a8:	bf04      	itt	eq
 80062aa:	009b      	lsleq	r3, r3, #2
 80062ac:	3002      	addeq	r0, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	db06      	blt.n	80062c0 <__hi0bits+0x3c>
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	d503      	bpl.n	80062be <__hi0bits+0x3a>
 80062b6:	3001      	adds	r0, #1
 80062b8:	4770      	bx	lr
 80062ba:	2000      	movs	r0, #0
 80062bc:	e7e8      	b.n	8006290 <__hi0bits+0xc>
 80062be:	2020      	movs	r0, #32
 80062c0:	4770      	bx	lr

080062c2 <__lo0bits>:
 80062c2:	6803      	ldr	r3, [r0, #0]
 80062c4:	4601      	mov	r1, r0
 80062c6:	f013 0207 	ands.w	r2, r3, #7
 80062ca:	d00b      	beq.n	80062e4 <__lo0bits+0x22>
 80062cc:	07da      	lsls	r2, r3, #31
 80062ce:	d423      	bmi.n	8006318 <__lo0bits+0x56>
 80062d0:	0798      	lsls	r0, r3, #30
 80062d2:	bf49      	itett	mi
 80062d4:	085b      	lsrmi	r3, r3, #1
 80062d6:	089b      	lsrpl	r3, r3, #2
 80062d8:	2001      	movmi	r0, #1
 80062da:	600b      	strmi	r3, [r1, #0]
 80062dc:	bf5c      	itt	pl
 80062de:	600b      	strpl	r3, [r1, #0]
 80062e0:	2002      	movpl	r0, #2
 80062e2:	4770      	bx	lr
 80062e4:	b298      	uxth	r0, r3
 80062e6:	b9a8      	cbnz	r0, 8006314 <__lo0bits+0x52>
 80062e8:	2010      	movs	r0, #16
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80062f0:	bf04      	itt	eq
 80062f2:	0a1b      	lsreq	r3, r3, #8
 80062f4:	3008      	addeq	r0, #8
 80062f6:	071a      	lsls	r2, r3, #28
 80062f8:	bf04      	itt	eq
 80062fa:	091b      	lsreq	r3, r3, #4
 80062fc:	3004      	addeq	r0, #4
 80062fe:	079a      	lsls	r2, r3, #30
 8006300:	bf04      	itt	eq
 8006302:	089b      	lsreq	r3, r3, #2
 8006304:	3002      	addeq	r0, #2
 8006306:	07da      	lsls	r2, r3, #31
 8006308:	d402      	bmi.n	8006310 <__lo0bits+0x4e>
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	d006      	beq.n	800631c <__lo0bits+0x5a>
 800630e:	3001      	adds	r0, #1
 8006310:	600b      	str	r3, [r1, #0]
 8006312:	4770      	bx	lr
 8006314:	4610      	mov	r0, r2
 8006316:	e7e9      	b.n	80062ec <__lo0bits+0x2a>
 8006318:	2000      	movs	r0, #0
 800631a:	4770      	bx	lr
 800631c:	2020      	movs	r0, #32
 800631e:	4770      	bx	lr

08006320 <__i2b>:
 8006320:	b510      	push	{r4, lr}
 8006322:	460c      	mov	r4, r1
 8006324:	2101      	movs	r1, #1
 8006326:	f7ff ff27 	bl	8006178 <_Balloc>
 800632a:	2201      	movs	r2, #1
 800632c:	6144      	str	r4, [r0, #20]
 800632e:	6102      	str	r2, [r0, #16]
 8006330:	bd10      	pop	{r4, pc}

08006332 <__multiply>:
 8006332:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006336:	4614      	mov	r4, r2
 8006338:	690a      	ldr	r2, [r1, #16]
 800633a:	6923      	ldr	r3, [r4, #16]
 800633c:	4689      	mov	r9, r1
 800633e:	429a      	cmp	r2, r3
 8006340:	bfbe      	ittt	lt
 8006342:	460b      	movlt	r3, r1
 8006344:	46a1      	movlt	r9, r4
 8006346:	461c      	movlt	r4, r3
 8006348:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800634c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006350:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006354:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006358:	eb07 060a 	add.w	r6, r7, sl
 800635c:	429e      	cmp	r6, r3
 800635e:	bfc8      	it	gt
 8006360:	3101      	addgt	r1, #1
 8006362:	f7ff ff09 	bl	8006178 <_Balloc>
 8006366:	f100 0514 	add.w	r5, r0, #20
 800636a:	462b      	mov	r3, r5
 800636c:	2200      	movs	r2, #0
 800636e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006372:	4543      	cmp	r3, r8
 8006374:	d316      	bcc.n	80063a4 <__multiply+0x72>
 8006376:	f104 0214 	add.w	r2, r4, #20
 800637a:	f109 0114 	add.w	r1, r9, #20
 800637e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006382:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	9c01      	ldr	r4, [sp, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	4294      	cmp	r4, r2
 800638e:	d80c      	bhi.n	80063aa <__multiply+0x78>
 8006390:	2e00      	cmp	r6, #0
 8006392:	dd03      	ble.n	800639c <__multiply+0x6a>
 8006394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006398:	2b00      	cmp	r3, #0
 800639a:	d054      	beq.n	8006446 <__multiply+0x114>
 800639c:	6106      	str	r6, [r0, #16]
 800639e:	b003      	add	sp, #12
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	f843 2b04 	str.w	r2, [r3], #4
 80063a8:	e7e3      	b.n	8006372 <__multiply+0x40>
 80063aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80063ae:	3204      	adds	r2, #4
 80063b0:	f1ba 0f00 	cmp.w	sl, #0
 80063b4:	d020      	beq.n	80063f8 <__multiply+0xc6>
 80063b6:	46ae      	mov	lr, r5
 80063b8:	4689      	mov	r9, r1
 80063ba:	f04f 0c00 	mov.w	ip, #0
 80063be:	f859 4b04 	ldr.w	r4, [r9], #4
 80063c2:	f8be b000 	ldrh.w	fp, [lr]
 80063c6:	b2a3      	uxth	r3, r4
 80063c8:	fb0a b303 	mla	r3, sl, r3, fp
 80063cc:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80063d0:	f8de 4000 	ldr.w	r4, [lr]
 80063d4:	4463      	add	r3, ip
 80063d6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80063da:	fb0a c40b 	mla	r4, sl, fp, ip
 80063de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80063e8:	454f      	cmp	r7, r9
 80063ea:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80063ee:	f84e 3b04 	str.w	r3, [lr], #4
 80063f2:	d8e4      	bhi.n	80063be <__multiply+0x8c>
 80063f4:	f8ce c000 	str.w	ip, [lr]
 80063f8:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80063fc:	f1b9 0f00 	cmp.w	r9, #0
 8006400:	d01f      	beq.n	8006442 <__multiply+0x110>
 8006402:	46ae      	mov	lr, r5
 8006404:	468c      	mov	ip, r1
 8006406:	f04f 0a00 	mov.w	sl, #0
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	f8bc 4000 	ldrh.w	r4, [ip]
 8006410:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006414:	b29b      	uxth	r3, r3
 8006416:	fb09 b404 	mla	r4, r9, r4, fp
 800641a:	44a2      	add	sl, r4
 800641c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006420:	f84e 3b04 	str.w	r3, [lr], #4
 8006424:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006428:	f8be 4000 	ldrh.w	r4, [lr]
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	fb09 4303 	mla	r3, r9, r3, r4
 8006432:	4567      	cmp	r7, ip
 8006434:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006438:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800643c:	d8e6      	bhi.n	800640c <__multiply+0xda>
 800643e:	f8ce 3000 	str.w	r3, [lr]
 8006442:	3504      	adds	r5, #4
 8006444:	e7a0      	b.n	8006388 <__multiply+0x56>
 8006446:	3e01      	subs	r6, #1
 8006448:	e7a2      	b.n	8006390 <__multiply+0x5e>
	...

0800644c <__pow5mult>:
 800644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006450:	4615      	mov	r5, r2
 8006452:	f012 0203 	ands.w	r2, r2, #3
 8006456:	4606      	mov	r6, r0
 8006458:	460f      	mov	r7, r1
 800645a:	d007      	beq.n	800646c <__pow5mult+0x20>
 800645c:	4c21      	ldr	r4, [pc, #132]	; (80064e4 <__pow5mult+0x98>)
 800645e:	3a01      	subs	r2, #1
 8006460:	2300      	movs	r3, #0
 8006462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006466:	f7ff fed2 	bl	800620e <__multadd>
 800646a:	4607      	mov	r7, r0
 800646c:	10ad      	asrs	r5, r5, #2
 800646e:	d035      	beq.n	80064dc <__pow5mult+0x90>
 8006470:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006472:	b93c      	cbnz	r4, 8006484 <__pow5mult+0x38>
 8006474:	2010      	movs	r0, #16
 8006476:	f7ff fc45 	bl	8005d04 <malloc>
 800647a:	6270      	str	r0, [r6, #36]	; 0x24
 800647c:	6044      	str	r4, [r0, #4]
 800647e:	6084      	str	r4, [r0, #8]
 8006480:	6004      	str	r4, [r0, #0]
 8006482:	60c4      	str	r4, [r0, #12]
 8006484:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800648c:	b94c      	cbnz	r4, 80064a2 <__pow5mult+0x56>
 800648e:	f240 2171 	movw	r1, #625	; 0x271
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff ff44 	bl	8006320 <__i2b>
 8006498:	2300      	movs	r3, #0
 800649a:	4604      	mov	r4, r0
 800649c:	f8c8 0008 	str.w	r0, [r8, #8]
 80064a0:	6003      	str	r3, [r0, #0]
 80064a2:	f04f 0800 	mov.w	r8, #0
 80064a6:	07eb      	lsls	r3, r5, #31
 80064a8:	d50a      	bpl.n	80064c0 <__pow5mult+0x74>
 80064aa:	4639      	mov	r1, r7
 80064ac:	4622      	mov	r2, r4
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7ff ff3f 	bl	8006332 <__multiply>
 80064b4:	4681      	mov	r9, r0
 80064b6:	4639      	mov	r1, r7
 80064b8:	4630      	mov	r0, r6
 80064ba:	f7ff fe91 	bl	80061e0 <_Bfree>
 80064be:	464f      	mov	r7, r9
 80064c0:	106d      	asrs	r5, r5, #1
 80064c2:	d00b      	beq.n	80064dc <__pow5mult+0x90>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	b938      	cbnz	r0, 80064d8 <__pow5mult+0x8c>
 80064c8:	4622      	mov	r2, r4
 80064ca:	4621      	mov	r1, r4
 80064cc:	4630      	mov	r0, r6
 80064ce:	f7ff ff30 	bl	8006332 <__multiply>
 80064d2:	6020      	str	r0, [r4, #0]
 80064d4:	f8c0 8000 	str.w	r8, [r0]
 80064d8:	4604      	mov	r4, r0
 80064da:	e7e4      	b.n	80064a6 <__pow5mult+0x5a>
 80064dc:	4638      	mov	r0, r7
 80064de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e2:	bf00      	nop
 80064e4:	080070d0 	.word	0x080070d0

080064e8 <__lshift>:
 80064e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	460c      	mov	r4, r1
 80064ee:	4607      	mov	r7, r0
 80064f0:	4616      	mov	r6, r2
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064f8:	eb0a 0903 	add.w	r9, sl, r3
 80064fc:	6849      	ldr	r1, [r1, #4]
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	f109 0501 	add.w	r5, r9, #1
 8006504:	42ab      	cmp	r3, r5
 8006506:	db31      	blt.n	800656c <__lshift+0x84>
 8006508:	4638      	mov	r0, r7
 800650a:	f7ff fe35 	bl	8006178 <_Balloc>
 800650e:	2200      	movs	r2, #0
 8006510:	4680      	mov	r8, r0
 8006512:	4611      	mov	r1, r2
 8006514:	f100 0314 	add.w	r3, r0, #20
 8006518:	4552      	cmp	r2, sl
 800651a:	db2a      	blt.n	8006572 <__lshift+0x8a>
 800651c:	6920      	ldr	r0, [r4, #16]
 800651e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006522:	f104 0114 	add.w	r1, r4, #20
 8006526:	f016 021f 	ands.w	r2, r6, #31
 800652a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800652e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006532:	d022      	beq.n	800657a <__lshift+0x92>
 8006534:	2000      	movs	r0, #0
 8006536:	f1c2 0c20 	rsb	ip, r2, #32
 800653a:	680e      	ldr	r6, [r1, #0]
 800653c:	4096      	lsls	r6, r2
 800653e:	4330      	orrs	r0, r6
 8006540:	f843 0b04 	str.w	r0, [r3], #4
 8006544:	f851 0b04 	ldr.w	r0, [r1], #4
 8006548:	458e      	cmp	lr, r1
 800654a:	fa20 f00c 	lsr.w	r0, r0, ip
 800654e:	d8f4      	bhi.n	800653a <__lshift+0x52>
 8006550:	6018      	str	r0, [r3, #0]
 8006552:	b108      	cbz	r0, 8006558 <__lshift+0x70>
 8006554:	f109 0502 	add.w	r5, r9, #2
 8006558:	3d01      	subs	r5, #1
 800655a:	4638      	mov	r0, r7
 800655c:	f8c8 5010 	str.w	r5, [r8, #16]
 8006560:	4621      	mov	r1, r4
 8006562:	f7ff fe3d 	bl	80061e0 <_Bfree>
 8006566:	4640      	mov	r0, r8
 8006568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656c:	3101      	adds	r1, #1
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	e7c8      	b.n	8006504 <__lshift+0x1c>
 8006572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006576:	3201      	adds	r2, #1
 8006578:	e7ce      	b.n	8006518 <__lshift+0x30>
 800657a:	3b04      	subs	r3, #4
 800657c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006580:	458e      	cmp	lr, r1
 8006582:	f843 2f04 	str.w	r2, [r3, #4]!
 8006586:	d8f9      	bhi.n	800657c <__lshift+0x94>
 8006588:	e7e6      	b.n	8006558 <__lshift+0x70>

0800658a <__mcmp>:
 800658a:	6903      	ldr	r3, [r0, #16]
 800658c:	690a      	ldr	r2, [r1, #16]
 800658e:	b530      	push	{r4, r5, lr}
 8006590:	1a9b      	subs	r3, r3, r2
 8006592:	d10c      	bne.n	80065ae <__mcmp+0x24>
 8006594:	0092      	lsls	r2, r2, #2
 8006596:	3014      	adds	r0, #20
 8006598:	3114      	adds	r1, #20
 800659a:	1884      	adds	r4, r0, r2
 800659c:	4411      	add	r1, r2
 800659e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065a2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065a6:	4295      	cmp	r5, r2
 80065a8:	d003      	beq.n	80065b2 <__mcmp+0x28>
 80065aa:	d305      	bcc.n	80065b8 <__mcmp+0x2e>
 80065ac:	2301      	movs	r3, #1
 80065ae:	4618      	mov	r0, r3
 80065b0:	bd30      	pop	{r4, r5, pc}
 80065b2:	42a0      	cmp	r0, r4
 80065b4:	d3f3      	bcc.n	800659e <__mcmp+0x14>
 80065b6:	e7fa      	b.n	80065ae <__mcmp+0x24>
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	e7f7      	b.n	80065ae <__mcmp+0x24>

080065be <__mdiff>:
 80065be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c2:	460d      	mov	r5, r1
 80065c4:	4607      	mov	r7, r0
 80065c6:	4611      	mov	r1, r2
 80065c8:	4628      	mov	r0, r5
 80065ca:	4614      	mov	r4, r2
 80065cc:	f7ff ffdd 	bl	800658a <__mcmp>
 80065d0:	1e06      	subs	r6, r0, #0
 80065d2:	d108      	bne.n	80065e6 <__mdiff+0x28>
 80065d4:	4631      	mov	r1, r6
 80065d6:	4638      	mov	r0, r7
 80065d8:	f7ff fdce 	bl	8006178 <_Balloc>
 80065dc:	2301      	movs	r3, #1
 80065de:	6146      	str	r6, [r0, #20]
 80065e0:	6103      	str	r3, [r0, #16]
 80065e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e6:	bfa4      	itt	ge
 80065e8:	4623      	movge	r3, r4
 80065ea:	462c      	movge	r4, r5
 80065ec:	4638      	mov	r0, r7
 80065ee:	6861      	ldr	r1, [r4, #4]
 80065f0:	bfa6      	itte	ge
 80065f2:	461d      	movge	r5, r3
 80065f4:	2600      	movge	r6, #0
 80065f6:	2601      	movlt	r6, #1
 80065f8:	f7ff fdbe 	bl	8006178 <_Balloc>
 80065fc:	f04f 0c00 	mov.w	ip, #0
 8006600:	60c6      	str	r6, [r0, #12]
 8006602:	692b      	ldr	r3, [r5, #16]
 8006604:	6926      	ldr	r6, [r4, #16]
 8006606:	f104 0214 	add.w	r2, r4, #20
 800660a:	f105 0914 	add.w	r9, r5, #20
 800660e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006612:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006616:	f100 0114 	add.w	r1, r0, #20
 800661a:	f852 ab04 	ldr.w	sl, [r2], #4
 800661e:	f859 5b04 	ldr.w	r5, [r9], #4
 8006622:	fa1f f38a 	uxth.w	r3, sl
 8006626:	4463      	add	r3, ip
 8006628:	b2ac      	uxth	r4, r5
 800662a:	1b1b      	subs	r3, r3, r4
 800662c:	0c2c      	lsrs	r4, r5, #16
 800662e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006632:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006636:	b29b      	uxth	r3, r3
 8006638:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800663c:	45c8      	cmp	r8, r9
 800663e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006642:	4696      	mov	lr, r2
 8006644:	f841 4b04 	str.w	r4, [r1], #4
 8006648:	d8e7      	bhi.n	800661a <__mdiff+0x5c>
 800664a:	45be      	cmp	lr, r7
 800664c:	d305      	bcc.n	800665a <__mdiff+0x9c>
 800664e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006652:	b18b      	cbz	r3, 8006678 <__mdiff+0xba>
 8006654:	6106      	str	r6, [r0, #16]
 8006656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800665e:	b2a2      	uxth	r2, r4
 8006660:	4462      	add	r2, ip
 8006662:	1413      	asrs	r3, r2, #16
 8006664:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006668:	b292      	uxth	r2, r2
 800666a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800666e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006672:	f841 2b04 	str.w	r2, [r1], #4
 8006676:	e7e8      	b.n	800664a <__mdiff+0x8c>
 8006678:	3e01      	subs	r6, #1
 800667a:	e7e8      	b.n	800664e <__mdiff+0x90>

0800667c <__d2b>:
 800667c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006680:	461c      	mov	r4, r3
 8006682:	2101      	movs	r1, #1
 8006684:	4690      	mov	r8, r2
 8006686:	9e08      	ldr	r6, [sp, #32]
 8006688:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800668a:	f7ff fd75 	bl	8006178 <_Balloc>
 800668e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006692:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006696:	4607      	mov	r7, r0
 8006698:	bb34      	cbnz	r4, 80066e8 <__d2b+0x6c>
 800669a:	9201      	str	r2, [sp, #4]
 800669c:	f1b8 0f00 	cmp.w	r8, #0
 80066a0:	d027      	beq.n	80066f2 <__d2b+0x76>
 80066a2:	a802      	add	r0, sp, #8
 80066a4:	f840 8d08 	str.w	r8, [r0, #-8]!
 80066a8:	f7ff fe0b 	bl	80062c2 <__lo0bits>
 80066ac:	9900      	ldr	r1, [sp, #0]
 80066ae:	b1f0      	cbz	r0, 80066ee <__d2b+0x72>
 80066b0:	9a01      	ldr	r2, [sp, #4]
 80066b2:	f1c0 0320 	rsb	r3, r0, #32
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	430b      	orrs	r3, r1
 80066bc:	40c2      	lsrs	r2, r0
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	9201      	str	r2, [sp, #4]
 80066c2:	9b01      	ldr	r3, [sp, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bf14      	ite	ne
 80066c8:	2102      	movne	r1, #2
 80066ca:	2101      	moveq	r1, #1
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	6139      	str	r1, [r7, #16]
 80066d0:	b1c4      	cbz	r4, 8006704 <__d2b+0x88>
 80066d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80066d6:	4404      	add	r4, r0
 80066d8:	6034      	str	r4, [r6, #0]
 80066da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066de:	6028      	str	r0, [r5, #0]
 80066e0:	4638      	mov	r0, r7
 80066e2:	b002      	add	sp, #8
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80066ec:	e7d5      	b.n	800669a <__d2b+0x1e>
 80066ee:	6179      	str	r1, [r7, #20]
 80066f0:	e7e7      	b.n	80066c2 <__d2b+0x46>
 80066f2:	a801      	add	r0, sp, #4
 80066f4:	f7ff fde5 	bl	80062c2 <__lo0bits>
 80066f8:	2101      	movs	r1, #1
 80066fa:	9b01      	ldr	r3, [sp, #4]
 80066fc:	6139      	str	r1, [r7, #16]
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	3020      	adds	r0, #32
 8006702:	e7e5      	b.n	80066d0 <__d2b+0x54>
 8006704:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006708:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800670c:	6030      	str	r0, [r6, #0]
 800670e:	6918      	ldr	r0, [r3, #16]
 8006710:	f7ff fdb8 	bl	8006284 <__hi0bits>
 8006714:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006718:	e7e1      	b.n	80066de <__d2b+0x62>
	...

0800671c <_sbrk_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	2300      	movs	r3, #0
 8006720:	4c05      	ldr	r4, [pc, #20]	; (8006738 <_sbrk_r+0x1c>)
 8006722:	4605      	mov	r5, r0
 8006724:	4608      	mov	r0, r1
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	f000 fb80 	bl	8006e2c <_sbrk>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_sbrk_r+0x1a>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	b103      	cbz	r3, 8006736 <_sbrk_r+0x1a>
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	20001bb8 	.word	0x20001bb8

0800673c <__ssprint_r>:
 800673c:	6893      	ldr	r3, [r2, #8]
 800673e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006742:	4681      	mov	r9, r0
 8006744:	460c      	mov	r4, r1
 8006746:	4617      	mov	r7, r2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d060      	beq.n	800680e <__ssprint_r+0xd2>
 800674c:	f04f 0b00 	mov.w	fp, #0
 8006750:	465e      	mov	r6, fp
 8006752:	f8d2 a000 	ldr.w	sl, [r2]
 8006756:	b356      	cbz	r6, 80067ae <__ssprint_r+0x72>
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	429e      	cmp	r6, r3
 800675c:	d344      	bcc.n	80067e8 <__ssprint_r+0xac>
 800675e:	89a2      	ldrh	r2, [r4, #12]
 8006760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006764:	d03e      	beq.n	80067e4 <__ssprint_r+0xa8>
 8006766:	2302      	movs	r3, #2
 8006768:	6825      	ldr	r5, [r4, #0]
 800676a:	6921      	ldr	r1, [r4, #16]
 800676c:	eba5 0801 	sub.w	r8, r5, r1
 8006770:	6965      	ldr	r5, [r4, #20]
 8006772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006776:	fb95 f5f3 	sdiv	r5, r5, r3
 800677a:	f108 0301 	add.w	r3, r8, #1
 800677e:	4433      	add	r3, r6
 8006780:	429d      	cmp	r5, r3
 8006782:	bf38      	it	cc
 8006784:	461d      	movcc	r5, r3
 8006786:	0553      	lsls	r3, r2, #21
 8006788:	d546      	bpl.n	8006818 <__ssprint_r+0xdc>
 800678a:	4629      	mov	r1, r5
 800678c:	4648      	mov	r0, r9
 800678e:	f7ff fac1 	bl	8005d14 <_malloc_r>
 8006792:	b998      	cbnz	r0, 80067bc <__ssprint_r+0x80>
 8006794:	230c      	movs	r3, #12
 8006796:	f8c9 3000 	str.w	r3, [r9]
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	2300      	movs	r3, #0
 80067a8:	60bb      	str	r3, [r7, #8]
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	e031      	b.n	8006812 <__ssprint_r+0xd6>
 80067ae:	f8da b000 	ldr.w	fp, [sl]
 80067b2:	f8da 6004 	ldr.w	r6, [sl, #4]
 80067b6:	f10a 0a08 	add.w	sl, sl, #8
 80067ba:	e7cc      	b.n	8006756 <__ssprint_r+0x1a>
 80067bc:	4642      	mov	r2, r8
 80067be:	6921      	ldr	r1, [r4, #16]
 80067c0:	9001      	str	r0, [sp, #4]
 80067c2:	f7ff fcc1 	bl	8006148 <memcpy>
 80067c6:	89a2      	ldrh	r2, [r4, #12]
 80067c8:	9b01      	ldr	r3, [sp, #4]
 80067ca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80067ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067d2:	81a2      	strh	r2, [r4, #12]
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	4443      	add	r3, r8
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	4633      	mov	r3, r6
 80067dc:	6165      	str	r5, [r4, #20]
 80067de:	eba5 0508 	sub.w	r5, r5, r8
 80067e2:	60a5      	str	r5, [r4, #8]
 80067e4:	429e      	cmp	r6, r3
 80067e6:	d200      	bcs.n	80067ea <__ssprint_r+0xae>
 80067e8:	4633      	mov	r3, r6
 80067ea:	461a      	mov	r2, r3
 80067ec:	4659      	mov	r1, fp
 80067ee:	6820      	ldr	r0, [r4, #0]
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	f000 f971 	bl	8006ad8 <memmove>
 80067f6:	68a2      	ldr	r2, [r4, #8]
 80067f8:	9b01      	ldr	r3, [sp, #4]
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	60a2      	str	r2, [r4, #8]
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	4413      	add	r3, r2
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	1b9e      	subs	r6, r3, r6
 8006808:	60be      	str	r6, [r7, #8]
 800680a:	2e00      	cmp	r6, #0
 800680c:	d1cf      	bne.n	80067ae <__ssprint_r+0x72>
 800680e:	2000      	movs	r0, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	b003      	add	sp, #12
 8006814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006818:	462a      	mov	r2, r5
 800681a:	4648      	mov	r0, r9
 800681c:	f000 f976 	bl	8006b0c <_realloc_r>
 8006820:	4603      	mov	r3, r0
 8006822:	2800      	cmp	r0, #0
 8006824:	d1d6      	bne.n	80067d4 <__ssprint_r+0x98>
 8006826:	6921      	ldr	r1, [r4, #16]
 8006828:	4648      	mov	r0, r9
 800682a:	f000 f885 	bl	8006938 <_free_r>
 800682e:	e7b1      	b.n	8006794 <__ssprint_r+0x58>

08006830 <_calloc_r>:
 8006830:	b510      	push	{r4, lr}
 8006832:	4351      	muls	r1, r2
 8006834:	f7ff fa6e 	bl	8005d14 <_malloc_r>
 8006838:	4604      	mov	r4, r0
 800683a:	b198      	cbz	r0, 8006864 <_calloc_r+0x34>
 800683c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006840:	f022 0203 	bic.w	r2, r2, #3
 8006844:	3a04      	subs	r2, #4
 8006846:	2a24      	cmp	r2, #36	; 0x24
 8006848:	d81b      	bhi.n	8006882 <_calloc_r+0x52>
 800684a:	2a13      	cmp	r2, #19
 800684c:	d917      	bls.n	800687e <_calloc_r+0x4e>
 800684e:	2100      	movs	r1, #0
 8006850:	2a1b      	cmp	r2, #27
 8006852:	6001      	str	r1, [r0, #0]
 8006854:	6041      	str	r1, [r0, #4]
 8006856:	d807      	bhi.n	8006868 <_calloc_r+0x38>
 8006858:	f100 0308 	add.w	r3, r0, #8
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	4620      	mov	r0, r4
 8006866:	bd10      	pop	{r4, pc}
 8006868:	2a24      	cmp	r2, #36	; 0x24
 800686a:	6081      	str	r1, [r0, #8]
 800686c:	60c1      	str	r1, [r0, #12]
 800686e:	bf11      	iteee	ne
 8006870:	f100 0310 	addne.w	r3, r0, #16
 8006874:	6101      	streq	r1, [r0, #16]
 8006876:	f100 0318 	addeq.w	r3, r0, #24
 800687a:	6141      	streq	r1, [r0, #20]
 800687c:	e7ee      	b.n	800685c <_calloc_r+0x2c>
 800687e:	4603      	mov	r3, r0
 8006880:	e7ec      	b.n	800685c <_calloc_r+0x2c>
 8006882:	2100      	movs	r1, #0
 8006884:	f7fd fbd4 	bl	8004030 <memset>
 8006888:	e7ec      	b.n	8006864 <_calloc_r+0x34>
	...

0800688c <_malloc_trim_r>:
 800688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006890:	4689      	mov	r9, r1
 8006892:	4f25      	ldr	r7, [pc, #148]	; (8006928 <_malloc_trim_r+0x9c>)
 8006894:	4606      	mov	r6, r0
 8006896:	f7ff fc63 	bl	8006160 <__malloc_lock>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8006934 <_malloc_trim_r+0xa8>
 80068a0:	685d      	ldr	r5, [r3, #4]
 80068a2:	f1a8 0411 	sub.w	r4, r8, #17
 80068a6:	f025 0503 	bic.w	r5, r5, #3
 80068aa:	eba4 0409 	sub.w	r4, r4, r9
 80068ae:	442c      	add	r4, r5
 80068b0:	fbb4 f4f8 	udiv	r4, r4, r8
 80068b4:	3c01      	subs	r4, #1
 80068b6:	fb08 f404 	mul.w	r4, r8, r4
 80068ba:	4544      	cmp	r4, r8
 80068bc:	da05      	bge.n	80068ca <_malloc_trim_r+0x3e>
 80068be:	4630      	mov	r0, r6
 80068c0:	f7ff fc54 	bl	800616c <__malloc_unlock>
 80068c4:	2000      	movs	r0, #0
 80068c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ca:	2100      	movs	r1, #0
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7ff ff25 	bl	800671c <_sbrk_r>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	442b      	add	r3, r5
 80068d6:	4298      	cmp	r0, r3
 80068d8:	d1f1      	bne.n	80068be <_malloc_trim_r+0x32>
 80068da:	4261      	negs	r1, r4
 80068dc:	4630      	mov	r0, r6
 80068de:	f7ff ff1d 	bl	800671c <_sbrk_r>
 80068e2:	3001      	adds	r0, #1
 80068e4:	d110      	bne.n	8006908 <_malloc_trim_r+0x7c>
 80068e6:	2100      	movs	r1, #0
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff ff17 	bl	800671c <_sbrk_r>
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	1a83      	subs	r3, r0, r2
 80068f2:	2b0f      	cmp	r3, #15
 80068f4:	dde3      	ble.n	80068be <_malloc_trim_r+0x32>
 80068f6:	490d      	ldr	r1, [pc, #52]	; (800692c <_malloc_trim_r+0xa0>)
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	6809      	ldr	r1, [r1, #0]
 80068fe:	6053      	str	r3, [r2, #4]
 8006900:	1a40      	subs	r0, r0, r1
 8006902:	490b      	ldr	r1, [pc, #44]	; (8006930 <_malloc_trim_r+0xa4>)
 8006904:	6008      	str	r0, [r1, #0]
 8006906:	e7da      	b.n	80068be <_malloc_trim_r+0x32>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4a09      	ldr	r2, [pc, #36]	; (8006930 <_malloc_trim_r+0xa4>)
 800690c:	1b2d      	subs	r5, r5, r4
 800690e:	f045 0501 	orr.w	r5, r5, #1
 8006912:	605d      	str	r5, [r3, #4]
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	4630      	mov	r0, r6
 8006918:	1b1c      	subs	r4, r3, r4
 800691a:	6014      	str	r4, [r2, #0]
 800691c:	f7ff fc26 	bl	800616c <__malloc_unlock>
 8006920:	2001      	movs	r0, #1
 8006922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006926:	bf00      	nop
 8006928:	20000254 	.word	0x20000254
 800692c:	2000065c 	.word	0x2000065c
 8006930:	20000a1c 	.word	0x20000a1c
 8006934:	00000080 	.word	0x00000080

08006938 <_free_r>:
 8006938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693c:	4604      	mov	r4, r0
 800693e:	4688      	mov	r8, r1
 8006940:	2900      	cmp	r1, #0
 8006942:	f000 80ab 	beq.w	8006a9c <_free_r+0x164>
 8006946:	f7ff fc0b 	bl	8006160 <__malloc_lock>
 800694a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800694e:	4d54      	ldr	r5, [pc, #336]	; (8006aa0 <_free_r+0x168>)
 8006950:	f022 0001 	bic.w	r0, r2, #1
 8006954:	f1a8 0308 	sub.w	r3, r8, #8
 8006958:	181f      	adds	r7, r3, r0
 800695a:	68a9      	ldr	r1, [r5, #8]
 800695c:	687e      	ldr	r6, [r7, #4]
 800695e:	428f      	cmp	r7, r1
 8006960:	f026 0603 	bic.w	r6, r6, #3
 8006964:	f002 0201 	and.w	r2, r2, #1
 8006968:	d11b      	bne.n	80069a2 <_free_r+0x6a>
 800696a:	4430      	add	r0, r6
 800696c:	b93a      	cbnz	r2, 800697e <_free_r+0x46>
 800696e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006972:	1a9b      	subs	r3, r3, r2
 8006974:	6899      	ldr	r1, [r3, #8]
 8006976:	4410      	add	r0, r2
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	60ca      	str	r2, [r1, #12]
 800697c:	6091      	str	r1, [r2, #8]
 800697e:	f040 0201 	orr.w	r2, r0, #1
 8006982:	605a      	str	r2, [r3, #4]
 8006984:	60ab      	str	r3, [r5, #8]
 8006986:	4b47      	ldr	r3, [pc, #284]	; (8006aa4 <_free_r+0x16c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4298      	cmp	r0, r3
 800698c:	d304      	bcc.n	8006998 <_free_r+0x60>
 800698e:	4b46      	ldr	r3, [pc, #280]	; (8006aa8 <_free_r+0x170>)
 8006990:	4620      	mov	r0, r4
 8006992:	6819      	ldr	r1, [r3, #0]
 8006994:	f7ff ff7a 	bl	800688c <_malloc_trim_r>
 8006998:	4620      	mov	r0, r4
 800699a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800699e:	f7ff bbe5 	b.w	800616c <__malloc_unlock>
 80069a2:	607e      	str	r6, [r7, #4]
 80069a4:	2a00      	cmp	r2, #0
 80069a6:	d139      	bne.n	8006a1c <_free_r+0xe4>
 80069a8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80069ac:	f105 0e08 	add.w	lr, r5, #8
 80069b0:	1a5b      	subs	r3, r3, r1
 80069b2:	4408      	add	r0, r1
 80069b4:	6899      	ldr	r1, [r3, #8]
 80069b6:	4571      	cmp	r1, lr
 80069b8:	d032      	beq.n	8006a20 <_free_r+0xe8>
 80069ba:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80069be:	f8c1 e00c 	str.w	lr, [r1, #12]
 80069c2:	f8ce 1008 	str.w	r1, [lr, #8]
 80069c6:	19b9      	adds	r1, r7, r6
 80069c8:	6849      	ldr	r1, [r1, #4]
 80069ca:	07c9      	lsls	r1, r1, #31
 80069cc:	d40a      	bmi.n	80069e4 <_free_r+0xac>
 80069ce:	4430      	add	r0, r6
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	bb3a      	cbnz	r2, 8006a24 <_free_r+0xec>
 80069d4:	4e35      	ldr	r6, [pc, #212]	; (8006aac <_free_r+0x174>)
 80069d6:	42b1      	cmp	r1, r6
 80069d8:	d124      	bne.n	8006a24 <_free_r+0xec>
 80069da:	2201      	movs	r2, #1
 80069dc:	616b      	str	r3, [r5, #20]
 80069de:	612b      	str	r3, [r5, #16]
 80069e0:	60d9      	str	r1, [r3, #12]
 80069e2:	6099      	str	r1, [r3, #8]
 80069e4:	f040 0101 	orr.w	r1, r0, #1
 80069e8:	6059      	str	r1, [r3, #4]
 80069ea:	5018      	str	r0, [r3, r0]
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	d1d3      	bne.n	8006998 <_free_r+0x60>
 80069f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80069f4:	d21a      	bcs.n	8006a2c <_free_r+0xf4>
 80069f6:	2201      	movs	r2, #1
 80069f8:	08c0      	lsrs	r0, r0, #3
 80069fa:	1081      	asrs	r1, r0, #2
 80069fc:	408a      	lsls	r2, r1
 80069fe:	6869      	ldr	r1, [r5, #4]
 8006a00:	3001      	adds	r0, #1
 8006a02:	430a      	orrs	r2, r1
 8006a04:	606a      	str	r2, [r5, #4]
 8006a06:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006a0a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006a0e:	3a08      	subs	r2, #8
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	6099      	str	r1, [r3, #8]
 8006a14:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006a18:	60cb      	str	r3, [r1, #12]
 8006a1a:	e7bd      	b.n	8006998 <_free_r+0x60>
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	e7d2      	b.n	80069c6 <_free_r+0x8e>
 8006a20:	2201      	movs	r2, #1
 8006a22:	e7d0      	b.n	80069c6 <_free_r+0x8e>
 8006a24:	68fe      	ldr	r6, [r7, #12]
 8006a26:	60ce      	str	r6, [r1, #12]
 8006a28:	60b1      	str	r1, [r6, #8]
 8006a2a:	e7db      	b.n	80069e4 <_free_r+0xac>
 8006a2c:	0a42      	lsrs	r2, r0, #9
 8006a2e:	2a04      	cmp	r2, #4
 8006a30:	d813      	bhi.n	8006a5a <_free_r+0x122>
 8006a32:	0982      	lsrs	r2, r0, #6
 8006a34:	3238      	adds	r2, #56	; 0x38
 8006a36:	1c51      	adds	r1, r2, #1
 8006a38:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006a3c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006a40:	428e      	cmp	r6, r1
 8006a42:	d124      	bne.n	8006a8e <_free_r+0x156>
 8006a44:	2001      	movs	r0, #1
 8006a46:	1092      	asrs	r2, r2, #2
 8006a48:	fa00 f202 	lsl.w	r2, r0, r2
 8006a4c:	6868      	ldr	r0, [r5, #4]
 8006a4e:	4302      	orrs	r2, r0
 8006a50:	606a      	str	r2, [r5, #4]
 8006a52:	60de      	str	r6, [r3, #12]
 8006a54:	6099      	str	r1, [r3, #8]
 8006a56:	60b3      	str	r3, [r6, #8]
 8006a58:	e7de      	b.n	8006a18 <_free_r+0xe0>
 8006a5a:	2a14      	cmp	r2, #20
 8006a5c:	d801      	bhi.n	8006a62 <_free_r+0x12a>
 8006a5e:	325b      	adds	r2, #91	; 0x5b
 8006a60:	e7e9      	b.n	8006a36 <_free_r+0xfe>
 8006a62:	2a54      	cmp	r2, #84	; 0x54
 8006a64:	d802      	bhi.n	8006a6c <_free_r+0x134>
 8006a66:	0b02      	lsrs	r2, r0, #12
 8006a68:	326e      	adds	r2, #110	; 0x6e
 8006a6a:	e7e4      	b.n	8006a36 <_free_r+0xfe>
 8006a6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006a70:	d802      	bhi.n	8006a78 <_free_r+0x140>
 8006a72:	0bc2      	lsrs	r2, r0, #15
 8006a74:	3277      	adds	r2, #119	; 0x77
 8006a76:	e7de      	b.n	8006a36 <_free_r+0xfe>
 8006a78:	f240 5154 	movw	r1, #1364	; 0x554
 8006a7c:	428a      	cmp	r2, r1
 8006a7e:	bf9a      	itte	ls
 8006a80:	0c82      	lsrls	r2, r0, #18
 8006a82:	327c      	addls	r2, #124	; 0x7c
 8006a84:	227e      	movhi	r2, #126	; 0x7e
 8006a86:	e7d6      	b.n	8006a36 <_free_r+0xfe>
 8006a88:	6889      	ldr	r1, [r1, #8]
 8006a8a:	428e      	cmp	r6, r1
 8006a8c:	d004      	beq.n	8006a98 <_free_r+0x160>
 8006a8e:	684a      	ldr	r2, [r1, #4]
 8006a90:	f022 0203 	bic.w	r2, r2, #3
 8006a94:	4290      	cmp	r0, r2
 8006a96:	d3f7      	bcc.n	8006a88 <_free_r+0x150>
 8006a98:	68ce      	ldr	r6, [r1, #12]
 8006a9a:	e7da      	b.n	8006a52 <_free_r+0x11a>
 8006a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa0:	20000254 	.word	0x20000254
 8006aa4:	20000660 	.word	0x20000660
 8006aa8:	20000a4c 	.word	0x20000a4c
 8006aac:	2000025c 	.word	0x2000025c

08006ab0 <__retarget_lock_acquire_recursive>:
 8006ab0:	4770      	bx	lr

08006ab2 <__retarget_lock_release_recursive>:
 8006ab2:	4770      	bx	lr

08006ab4 <__ascii_mbtowc>:
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	b901      	cbnz	r1, 8006aba <__ascii_mbtowc+0x6>
 8006ab8:	a901      	add	r1, sp, #4
 8006aba:	b142      	cbz	r2, 8006ace <__ascii_mbtowc+0x1a>
 8006abc:	b14b      	cbz	r3, 8006ad2 <__ascii_mbtowc+0x1e>
 8006abe:	7813      	ldrb	r3, [r2, #0]
 8006ac0:	600b      	str	r3, [r1, #0]
 8006ac2:	7812      	ldrb	r2, [r2, #0]
 8006ac4:	1c10      	adds	r0, r2, #0
 8006ac6:	bf18      	it	ne
 8006ac8:	2001      	movne	r0, #1
 8006aca:	b002      	add	sp, #8
 8006acc:	4770      	bx	lr
 8006ace:	4610      	mov	r0, r2
 8006ad0:	e7fb      	b.n	8006aca <__ascii_mbtowc+0x16>
 8006ad2:	f06f 0001 	mvn.w	r0, #1
 8006ad6:	e7f8      	b.n	8006aca <__ascii_mbtowc+0x16>

08006ad8 <memmove>:
 8006ad8:	4288      	cmp	r0, r1
 8006ada:	b510      	push	{r4, lr}
 8006adc:	eb01 0302 	add.w	r3, r1, r2
 8006ae0:	d803      	bhi.n	8006aea <memmove+0x12>
 8006ae2:	1e42      	subs	r2, r0, #1
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	d10c      	bne.n	8006b02 <memmove+0x2a>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	4298      	cmp	r0, r3
 8006aec:	d2f9      	bcs.n	8006ae2 <memmove+0xa>
 8006aee:	1881      	adds	r1, r0, r2
 8006af0:	1ad2      	subs	r2, r2, r3
 8006af2:	42d3      	cmn	r3, r2
 8006af4:	d100      	bne.n	8006af8 <memmove+0x20>
 8006af6:	bd10      	pop	{r4, pc}
 8006af8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006afc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b00:	e7f7      	b.n	8006af2 <memmove+0x1a>
 8006b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b0a:	e7eb      	b.n	8006ae4 <memmove+0xc>

08006b0c <_realloc_r>:
 8006b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	4682      	mov	sl, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	b929      	cbnz	r1, 8006b22 <_realloc_r+0x16>
 8006b16:	4611      	mov	r1, r2
 8006b18:	b003      	add	sp, #12
 8006b1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1e:	f7ff b8f9 	b.w	8005d14 <_malloc_r>
 8006b22:	9201      	str	r2, [sp, #4]
 8006b24:	f7ff fb1c 	bl	8006160 <__malloc_lock>
 8006b28:	9a01      	ldr	r2, [sp, #4]
 8006b2a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8006b2e:	f102 080b 	add.w	r8, r2, #11
 8006b32:	f1b8 0f16 	cmp.w	r8, #22
 8006b36:	f1a4 0908 	sub.w	r9, r4, #8
 8006b3a:	f025 0603 	bic.w	r6, r5, #3
 8006b3e:	d90a      	bls.n	8006b56 <_realloc_r+0x4a>
 8006b40:	f038 0807 	bics.w	r8, r8, #7
 8006b44:	d509      	bpl.n	8006b5a <_realloc_r+0x4e>
 8006b46:	230c      	movs	r3, #12
 8006b48:	2700      	movs	r7, #0
 8006b4a:	f8ca 3000 	str.w	r3, [sl]
 8006b4e:	4638      	mov	r0, r7
 8006b50:	b003      	add	sp, #12
 8006b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b56:	f04f 0810 	mov.w	r8, #16
 8006b5a:	4590      	cmp	r8, r2
 8006b5c:	d3f3      	bcc.n	8006b46 <_realloc_r+0x3a>
 8006b5e:	45b0      	cmp	r8, r6
 8006b60:	f340 8148 	ble.w	8006df4 <_realloc_r+0x2e8>
 8006b64:	4ba9      	ldr	r3, [pc, #676]	; (8006e0c <_realloc_r+0x300>)
 8006b66:	eb09 0106 	add.w	r1, r9, r6
 8006b6a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8006b6e:	469b      	mov	fp, r3
 8006b70:	4571      	cmp	r1, lr
 8006b72:	684b      	ldr	r3, [r1, #4]
 8006b74:	d005      	beq.n	8006b82 <_realloc_r+0x76>
 8006b76:	f023 0001 	bic.w	r0, r3, #1
 8006b7a:	4408      	add	r0, r1
 8006b7c:	6840      	ldr	r0, [r0, #4]
 8006b7e:	07c7      	lsls	r7, r0, #31
 8006b80:	d447      	bmi.n	8006c12 <_realloc_r+0x106>
 8006b82:	f023 0303 	bic.w	r3, r3, #3
 8006b86:	4571      	cmp	r1, lr
 8006b88:	eb06 0703 	add.w	r7, r6, r3
 8006b8c:	d119      	bne.n	8006bc2 <_realloc_r+0xb6>
 8006b8e:	f108 0010 	add.w	r0, r8, #16
 8006b92:	4287      	cmp	r7, r0
 8006b94:	db3f      	blt.n	8006c16 <_realloc_r+0x10a>
 8006b96:	eba7 0708 	sub.w	r7, r7, r8
 8006b9a:	eb09 0308 	add.w	r3, r9, r8
 8006b9e:	f047 0701 	orr.w	r7, r7, #1
 8006ba2:	f8cb 3008 	str.w	r3, [fp, #8]
 8006ba6:	605f      	str	r7, [r3, #4]
 8006ba8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006bac:	4650      	mov	r0, sl
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	ea43 0308 	orr.w	r3, r3, r8
 8006bb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bba:	f7ff fad7 	bl	800616c <__malloc_unlock>
 8006bbe:	4627      	mov	r7, r4
 8006bc0:	e7c5      	b.n	8006b4e <_realloc_r+0x42>
 8006bc2:	45b8      	cmp	r8, r7
 8006bc4:	dc27      	bgt.n	8006c16 <_realloc_r+0x10a>
 8006bc6:	68cb      	ldr	r3, [r1, #12]
 8006bc8:	688a      	ldr	r2, [r1, #8]
 8006bca:	60d3      	str	r3, [r2, #12]
 8006bcc:	609a      	str	r2, [r3, #8]
 8006bce:	eba7 0008 	sub.w	r0, r7, r8
 8006bd2:	280f      	cmp	r0, #15
 8006bd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006bd8:	eb09 0207 	add.w	r2, r9, r7
 8006bdc:	f240 810c 	bls.w	8006df8 <_realloc_r+0x2ec>
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	eb09 0108 	add.w	r1, r9, r8
 8006be8:	ea43 0308 	orr.w	r3, r3, r8
 8006bec:	f040 0001 	orr.w	r0, r0, #1
 8006bf0:	f8c9 3004 	str.w	r3, [r9, #4]
 8006bf4:	6048      	str	r0, [r1, #4]
 8006bf6:	6853      	ldr	r3, [r2, #4]
 8006bf8:	3108      	adds	r1, #8
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	6053      	str	r3, [r2, #4]
 8006c00:	4650      	mov	r0, sl
 8006c02:	f7ff fe99 	bl	8006938 <_free_r>
 8006c06:	4650      	mov	r0, sl
 8006c08:	f7ff fab0 	bl	800616c <__malloc_unlock>
 8006c0c:	f109 0708 	add.w	r7, r9, #8
 8006c10:	e79d      	b.n	8006b4e <_realloc_r+0x42>
 8006c12:	2300      	movs	r3, #0
 8006c14:	4619      	mov	r1, r3
 8006c16:	07e8      	lsls	r0, r5, #31
 8006c18:	f100 8085 	bmi.w	8006d26 <_realloc_r+0x21a>
 8006c1c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8006c20:	eba9 0505 	sub.w	r5, r9, r5
 8006c24:	6868      	ldr	r0, [r5, #4]
 8006c26:	f020 0003 	bic.w	r0, r0, #3
 8006c2a:	4430      	add	r0, r6
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	d077      	beq.n	8006d20 <_realloc_r+0x214>
 8006c30:	4571      	cmp	r1, lr
 8006c32:	d151      	bne.n	8006cd8 <_realloc_r+0x1cc>
 8006c34:	4403      	add	r3, r0
 8006c36:	f108 0110 	add.w	r1, r8, #16
 8006c3a:	428b      	cmp	r3, r1
 8006c3c:	db70      	blt.n	8006d20 <_realloc_r+0x214>
 8006c3e:	462f      	mov	r7, r5
 8006c40:	68ea      	ldr	r2, [r5, #12]
 8006c42:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006c46:	60ca      	str	r2, [r1, #12]
 8006c48:	6091      	str	r1, [r2, #8]
 8006c4a:	1f32      	subs	r2, r6, #4
 8006c4c:	2a24      	cmp	r2, #36	; 0x24
 8006c4e:	d83c      	bhi.n	8006cca <_realloc_r+0x1be>
 8006c50:	2a13      	cmp	r2, #19
 8006c52:	d937      	bls.n	8006cc4 <_realloc_r+0x1b8>
 8006c54:	6821      	ldr	r1, [r4, #0]
 8006c56:	2a1b      	cmp	r2, #27
 8006c58:	60a9      	str	r1, [r5, #8]
 8006c5a:	6861      	ldr	r1, [r4, #4]
 8006c5c:	60e9      	str	r1, [r5, #12]
 8006c5e:	d81c      	bhi.n	8006c9a <_realloc_r+0x18e>
 8006c60:	f105 0210 	add.w	r2, r5, #16
 8006c64:	f104 0108 	add.w	r1, r4, #8
 8006c68:	6808      	ldr	r0, [r1, #0]
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	6848      	ldr	r0, [r1, #4]
 8006c6e:	6050      	str	r0, [r2, #4]
 8006c70:	6889      	ldr	r1, [r1, #8]
 8006c72:	6091      	str	r1, [r2, #8]
 8006c74:	eba3 0308 	sub.w	r3, r3, r8
 8006c78:	eb05 0208 	add.w	r2, r5, r8
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	f8cb 2008 	str.w	r2, [fp, #8]
 8006c84:	6053      	str	r3, [r2, #4]
 8006c86:	686b      	ldr	r3, [r5, #4]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	ea43 0308 	orr.w	r3, r3, r8
 8006c90:	606b      	str	r3, [r5, #4]
 8006c92:	4650      	mov	r0, sl
 8006c94:	f7ff fa6a 	bl	800616c <__malloc_unlock>
 8006c98:	e759      	b.n	8006b4e <_realloc_r+0x42>
 8006c9a:	68a1      	ldr	r1, [r4, #8]
 8006c9c:	2a24      	cmp	r2, #36	; 0x24
 8006c9e:	6129      	str	r1, [r5, #16]
 8006ca0:	68e1      	ldr	r1, [r4, #12]
 8006ca2:	bf18      	it	ne
 8006ca4:	f105 0218 	addne.w	r2, r5, #24
 8006ca8:	6169      	str	r1, [r5, #20]
 8006caa:	bf09      	itett	eq
 8006cac:	6922      	ldreq	r2, [r4, #16]
 8006cae:	f104 0110 	addne.w	r1, r4, #16
 8006cb2:	61aa      	streq	r2, [r5, #24]
 8006cb4:	6960      	ldreq	r0, [r4, #20]
 8006cb6:	bf02      	ittt	eq
 8006cb8:	f105 0220 	addeq.w	r2, r5, #32
 8006cbc:	f104 0118 	addeq.w	r1, r4, #24
 8006cc0:	61e8      	streq	r0, [r5, #28]
 8006cc2:	e7d1      	b.n	8006c68 <_realloc_r+0x15c>
 8006cc4:	463a      	mov	r2, r7
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	e7ce      	b.n	8006c68 <_realloc_r+0x15c>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4638      	mov	r0, r7
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	f7ff ff02 	bl	8006ad8 <memmove>
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	e7cd      	b.n	8006c74 <_realloc_r+0x168>
 8006cd8:	18c7      	adds	r7, r0, r3
 8006cda:	45b8      	cmp	r8, r7
 8006cdc:	dc20      	bgt.n	8006d20 <_realloc_r+0x214>
 8006cde:	68cb      	ldr	r3, [r1, #12]
 8006ce0:	688a      	ldr	r2, [r1, #8]
 8006ce2:	60d3      	str	r3, [r2, #12]
 8006ce4:	609a      	str	r2, [r3, #8]
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	68eb      	ldr	r3, [r5, #12]
 8006cea:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006cee:	60d3      	str	r3, [r2, #12]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	1f32      	subs	r2, r6, #4
 8006cf4:	2a24      	cmp	r2, #36	; 0x24
 8006cf6:	d843      	bhi.n	8006d80 <_realloc_r+0x274>
 8006cf8:	2a13      	cmp	r2, #19
 8006cfa:	d93f      	bls.n	8006d7c <_realloc_r+0x270>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	2a1b      	cmp	r2, #27
 8006d00:	60ab      	str	r3, [r5, #8]
 8006d02:	6863      	ldr	r3, [r4, #4]
 8006d04:	60eb      	str	r3, [r5, #12]
 8006d06:	d824      	bhi.n	8006d52 <_realloc_r+0x246>
 8006d08:	f105 0010 	add.w	r0, r5, #16
 8006d0c:	f104 0308 	add.w	r3, r4, #8
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	6002      	str	r2, [r0, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	6042      	str	r2, [r0, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	6083      	str	r3, [r0, #8]
 8006d1c:	46a9      	mov	r9, r5
 8006d1e:	e756      	b.n	8006bce <_realloc_r+0xc2>
 8006d20:	4580      	cmp	r8, r0
 8006d22:	4607      	mov	r7, r0
 8006d24:	dddf      	ble.n	8006ce6 <_realloc_r+0x1da>
 8006d26:	4611      	mov	r1, r2
 8006d28:	4650      	mov	r0, sl
 8006d2a:	f7fe fff3 	bl	8005d14 <_malloc_r>
 8006d2e:	4607      	mov	r7, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d0ae      	beq.n	8006c92 <_realloc_r+0x186>
 8006d34:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006d38:	f1a0 0208 	sub.w	r2, r0, #8
 8006d3c:	f023 0301 	bic.w	r3, r3, #1
 8006d40:	444b      	add	r3, r9
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d120      	bne.n	8006d88 <_realloc_r+0x27c>
 8006d46:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8006d4a:	f027 0703 	bic.w	r7, r7, #3
 8006d4e:	4437      	add	r7, r6
 8006d50:	e73d      	b.n	8006bce <_realloc_r+0xc2>
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	2a24      	cmp	r2, #36	; 0x24
 8006d56:	612b      	str	r3, [r5, #16]
 8006d58:	68e3      	ldr	r3, [r4, #12]
 8006d5a:	bf18      	it	ne
 8006d5c:	f105 0018 	addne.w	r0, r5, #24
 8006d60:	616b      	str	r3, [r5, #20]
 8006d62:	bf09      	itett	eq
 8006d64:	6923      	ldreq	r3, [r4, #16]
 8006d66:	f104 0310 	addne.w	r3, r4, #16
 8006d6a:	61ab      	streq	r3, [r5, #24]
 8006d6c:	6962      	ldreq	r2, [r4, #20]
 8006d6e:	bf02      	ittt	eq
 8006d70:	f105 0020 	addeq.w	r0, r5, #32
 8006d74:	f104 0318 	addeq.w	r3, r4, #24
 8006d78:	61ea      	streq	r2, [r5, #28]
 8006d7a:	e7c9      	b.n	8006d10 <_realloc_r+0x204>
 8006d7c:	4623      	mov	r3, r4
 8006d7e:	e7c7      	b.n	8006d10 <_realloc_r+0x204>
 8006d80:	4621      	mov	r1, r4
 8006d82:	f7ff fea9 	bl	8006ad8 <memmove>
 8006d86:	e7c9      	b.n	8006d1c <_realloc_r+0x210>
 8006d88:	1f32      	subs	r2, r6, #4
 8006d8a:	2a24      	cmp	r2, #36	; 0x24
 8006d8c:	d82e      	bhi.n	8006dec <_realloc_r+0x2e0>
 8006d8e:	2a13      	cmp	r2, #19
 8006d90:	d929      	bls.n	8006de6 <_realloc_r+0x2da>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	2a1b      	cmp	r2, #27
 8006d96:	6003      	str	r3, [r0, #0]
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	6043      	str	r3, [r0, #4]
 8006d9c:	d80e      	bhi.n	8006dbc <_realloc_r+0x2b0>
 8006d9e:	f100 0308 	add.w	r3, r0, #8
 8006da2:	f104 0208 	add.w	r2, r4, #8
 8006da6:	6811      	ldr	r1, [r2, #0]
 8006da8:	6019      	str	r1, [r3, #0]
 8006daa:	6851      	ldr	r1, [r2, #4]
 8006dac:	6059      	str	r1, [r3, #4]
 8006dae:	6892      	ldr	r2, [r2, #8]
 8006db0:	609a      	str	r2, [r3, #8]
 8006db2:	4621      	mov	r1, r4
 8006db4:	4650      	mov	r0, sl
 8006db6:	f7ff fdbf 	bl	8006938 <_free_r>
 8006dba:	e76a      	b.n	8006c92 <_realloc_r+0x186>
 8006dbc:	68a3      	ldr	r3, [r4, #8]
 8006dbe:	2a24      	cmp	r2, #36	; 0x24
 8006dc0:	6083      	str	r3, [r0, #8]
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	bf18      	it	ne
 8006dc6:	f104 0210 	addne.w	r2, r4, #16
 8006dca:	60c3      	str	r3, [r0, #12]
 8006dcc:	bf09      	itett	eq
 8006dce:	6923      	ldreq	r3, [r4, #16]
 8006dd0:	f100 0310 	addne.w	r3, r0, #16
 8006dd4:	6103      	streq	r3, [r0, #16]
 8006dd6:	6961      	ldreq	r1, [r4, #20]
 8006dd8:	bf02      	ittt	eq
 8006dda:	f100 0318 	addeq.w	r3, r0, #24
 8006dde:	f104 0218 	addeq.w	r2, r4, #24
 8006de2:	6141      	streq	r1, [r0, #20]
 8006de4:	e7df      	b.n	8006da6 <_realloc_r+0x29a>
 8006de6:	4603      	mov	r3, r0
 8006de8:	4622      	mov	r2, r4
 8006dea:	e7dc      	b.n	8006da6 <_realloc_r+0x29a>
 8006dec:	4621      	mov	r1, r4
 8006dee:	f7ff fe73 	bl	8006ad8 <memmove>
 8006df2:	e7de      	b.n	8006db2 <_realloc_r+0x2a6>
 8006df4:	4637      	mov	r7, r6
 8006df6:	e6ea      	b.n	8006bce <_realloc_r+0xc2>
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	431f      	orrs	r7, r3
 8006dfe:	f8c9 7004 	str.w	r7, [r9, #4]
 8006e02:	6853      	ldr	r3, [r2, #4]
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	6053      	str	r3, [r2, #4]
 8006e0a:	e6fc      	b.n	8006c06 <_realloc_r+0xfa>
 8006e0c:	20000254 	.word	0x20000254

08006e10 <__ascii_wctomb>:
 8006e10:	b149      	cbz	r1, 8006e26 <__ascii_wctomb+0x16>
 8006e12:	2aff      	cmp	r2, #255	; 0xff
 8006e14:	bf8b      	itete	hi
 8006e16:	238a      	movhi	r3, #138	; 0x8a
 8006e18:	700a      	strbls	r2, [r1, #0]
 8006e1a:	6003      	strhi	r3, [r0, #0]
 8006e1c:	2001      	movls	r0, #1
 8006e1e:	bf88      	it	hi
 8006e20:	f04f 30ff 	movhi.w	r0, #4294967295
 8006e24:	4770      	bx	lr
 8006e26:	4608      	mov	r0, r1
 8006e28:	4770      	bx	lr
	...

08006e2c <_sbrk>:
 8006e2c:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <_sbrk+0x14>)
 8006e2e:	4602      	mov	r2, r0
 8006e30:	6819      	ldr	r1, [r3, #0]
 8006e32:	b909      	cbnz	r1, 8006e38 <_sbrk+0xc>
 8006e34:	4903      	ldr	r1, [pc, #12]	; (8006e44 <_sbrk+0x18>)
 8006e36:	6019      	str	r1, [r3, #0]
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	4402      	add	r2, r0
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	4770      	bx	lr
 8006e40:	20000a50 	.word	0x20000a50
 8006e44:	20001bbc 	.word	0x20001bbc

08006e48 <_init>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	bf00      	nop
 8006e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4e:	bc08      	pop	{r3}
 8006e50:	469e      	mov	lr, r3
 8006e52:	4770      	bx	lr

08006e54 <_fini>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	bf00      	nop
 8006e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5a:	bc08      	pop	{r3}
 8006e5c:	469e      	mov	lr, r3
 8006e5e:	4770      	bx	lr
