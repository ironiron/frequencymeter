
F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000760c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08007720  08007720  00017720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007d4  20000000  08007ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017e8  200007d4  080084bc  000207d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001fbc  080084bc  00021fbc  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000207d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d8ee  00000000  00000000  000207fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003e71  00000000  00000000  0003e0eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008359  00000000  00000000  00041f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c70  00000000  00000000  0004a2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010a8  00000000  00000000  0004af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006f68  00000000  00000000  0004bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004391  00000000  00000000  00052f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000572c9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002db0  00000000  00000000  00057348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200007d4 	.word	0x200007d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007704 	.word	0x08007704

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200007d8 	.word	0x200007d8
 800014c:	08007704 	.word	0x08007704

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_frsub>:
 8000a80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a84:	e002      	b.n	8000a8c <__addsf3>
 8000a86:	bf00      	nop

08000a88 <__aeabi_fsub>:
 8000a88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a8c <__addsf3>:
 8000a8c:	0042      	lsls	r2, r0, #1
 8000a8e:	bf1f      	itttt	ne
 8000a90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a94:	ea92 0f03 	teqne	r2, r3
 8000a98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa0:	d06a      	beq.n	8000b78 <__addsf3+0xec>
 8000aa2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aaa:	bfc1      	itttt	gt
 8000aac:	18d2      	addgt	r2, r2, r3
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	4048      	eorgt	r0, r1
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	bfb8      	it	lt
 8000ab6:	425b      	neglt	r3, r3
 8000ab8:	2b19      	cmp	r3, #25
 8000aba:	bf88      	it	hi
 8000abc:	4770      	bxhi	lr
 8000abe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ad6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4249      	negne	r1, r1
 8000ade:	ea92 0f03 	teq	r2, r3
 8000ae2:	d03f      	beq.n	8000b64 <__addsf3+0xd8>
 8000ae4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae8:	fa41 fc03 	asr.w	ip, r1, r3
 8000aec:	eb10 000c 	adds.w	r0, r0, ip
 8000af0:	f1c3 0320 	rsb	r3, r3, #32
 8000af4:	fa01 f103 	lsl.w	r1, r1, r3
 8000af8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__addsf3+0x78>
 8000afe:	4249      	negs	r1, r1
 8000b00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b08:	d313      	bcc.n	8000b32 <__addsf3+0xa6>
 8000b0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0e:	d306      	bcc.n	8000b1e <__addsf3+0x92>
 8000b10:	0840      	lsrs	r0, r0, #1
 8000b12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b16:	f102 0201 	add.w	r2, r2, #1
 8000b1a:	2afe      	cmp	r2, #254	; 0xfe
 8000b1c:	d251      	bcs.n	8000bc2 <__addsf3+0x136>
 8000b1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	ea40 0003 	orr.w	r0, r0, r3
 8000b30:	4770      	bx	lr
 8000b32:	0049      	lsls	r1, r1, #1
 8000b34:	eb40 0000 	adc.w	r0, r0, r0
 8000b38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	d1ed      	bne.n	8000b1e <__addsf3+0x92>
 8000b42:	fab0 fc80 	clz	ip, r0
 8000b46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b52:	bfaa      	itet	ge
 8000b54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b58:	4252      	neglt	r2, r2
 8000b5a:	4318      	orrge	r0, r3
 8000b5c:	bfbc      	itt	lt
 8000b5e:	40d0      	lsrlt	r0, r2
 8000b60:	4318      	orrlt	r0, r3
 8000b62:	4770      	bx	lr
 8000b64:	f092 0f00 	teq	r2, #0
 8000b68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b6c:	bf06      	itte	eq
 8000b6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b72:	3201      	addeq	r2, #1
 8000b74:	3b01      	subne	r3, #1
 8000b76:	e7b5      	b.n	8000ae4 <__addsf3+0x58>
 8000b78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	bf18      	it	ne
 8000b82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b86:	d021      	beq.n	8000bcc <__addsf3+0x140>
 8000b88:	ea92 0f03 	teq	r2, r3
 8000b8c:	d004      	beq.n	8000b98 <__addsf3+0x10c>
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	bf08      	it	eq
 8000b94:	4608      	moveq	r0, r1
 8000b96:	4770      	bx	lr
 8000b98:	ea90 0f01 	teq	r0, r1
 8000b9c:	bf1c      	itt	ne
 8000b9e:	2000      	movne	r0, #0
 8000ba0:	4770      	bxne	lr
 8000ba2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ba6:	d104      	bne.n	8000bb2 <__addsf3+0x126>
 8000ba8:	0040      	lsls	r0, r0, #1
 8000baa:	bf28      	it	cs
 8000bac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	4770      	bx	lr
 8000bb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bb6:	bf3c      	itt	cc
 8000bb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bxcc	lr
 8000bbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd0:	bf16      	itet	ne
 8000bd2:	4608      	movne	r0, r1
 8000bd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd8:	4601      	movne	r1, r0
 8000bda:	0242      	lsls	r2, r0, #9
 8000bdc:	bf06      	itte	eq
 8000bde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be2:	ea90 0f01 	teqeq	r0, r1
 8000be6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ui2f>:
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e004      	b.n	8000bfc <__aeabi_i2f+0x8>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_i2f>:
 8000bf4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	bf48      	it	mi
 8000bfa:	4240      	negmi	r0, r0
 8000bfc:	ea5f 0c00 	movs.w	ip, r0
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c08:	4601      	mov	r1, r0
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	e01c      	b.n	8000c4a <__aeabi_l2f+0x2a>

08000c10 <__aeabi_ul2f>:
 8000c10:	ea50 0201 	orrs.w	r2, r0, r1
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e00a      	b.n	8000c34 <__aeabi_l2f+0x14>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_l2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__aeabi_l2f+0x14>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	ea5f 0c01 	movs.w	ip, r1
 8000c38:	bf02      	ittt	eq
 8000c3a:	4684      	moveq	ip, r0
 8000c3c:	4601      	moveq	r1, r0
 8000c3e:	2000      	moveq	r0, #0
 8000c40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c44:	bf08      	it	eq
 8000c46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c4e:	fabc f28c 	clz	r2, ip
 8000c52:	3a08      	subs	r2, #8
 8000c54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c58:	db10      	blt.n	8000c7c <__aeabi_l2f+0x5c>
 8000c5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5e:	4463      	add	r3, ip
 8000c60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c64:	f1c2 0220 	rsb	r2, r2, #32
 8000c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c70:	eb43 0002 	adc.w	r0, r3, r2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f102 0220 	add.w	r2, r2, #32
 8000c80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c84:	f1c2 0220 	rsb	r2, r2, #32
 8000c88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000c90:	eb43 0002 	adc.w	r0, r3, r2
 8000c94:	bf08      	it	eq
 8000c96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_fmul>:
 8000c9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000caa:	ea92 0f0c 	teqne	r2, ip
 8000cae:	ea93 0f0c 	teqne	r3, ip
 8000cb2:	d06f      	beq.n	8000d94 <__aeabi_fmul+0xf8>
 8000cb4:	441a      	add	r2, r3
 8000cb6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cba:	0240      	lsls	r0, r0, #9
 8000cbc:	bf18      	it	ne
 8000cbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc2:	d01e      	beq.n	8000d02 <__aeabi_fmul+0x66>
 8000cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ccc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd0:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cdc:	bf3e      	ittt	cc
 8000cde:	0049      	lslcc	r1, r1, #1
 8000ce0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce4:	005b      	lslcc	r3, r3, #1
 8000ce6:	ea40 0001 	orr.w	r0, r0, r1
 8000cea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cee:	2afd      	cmp	r2, #253	; 0xfd
 8000cf0:	d81d      	bhi.n	8000d2e <__aeabi_fmul+0x92>
 8000cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	4770      	bx	lr
 8000d02:	f090 0f00 	teq	r0, #0
 8000d06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0a:	bf08      	it	eq
 8000d0c:	0249      	lsleq	r1, r1, #9
 8000d0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d16:	3a7f      	subs	r2, #127	; 0x7f
 8000d18:	bfc2      	ittt	gt
 8000d1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d22:	4770      	bxgt	lr
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	dc5d      	bgt.n	8000dec <__aeabi_fmul+0x150>
 8000d30:	f112 0f19 	cmn.w	r2, #25
 8000d34:	bfdc      	itt	le
 8000d36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3a:	4770      	bxle	lr
 8000d3c:	f1c2 0200 	rsb	r2, r2, #0
 8000d40:	0041      	lsls	r1, r0, #1
 8000d42:	fa21 f102 	lsr.w	r1, r1, r2
 8000d46:	f1c2 0220 	rsb	r2, r2, #32
 8000d4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d52:	f140 0000 	adc.w	r0, r0, #0
 8000d56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5a:	bf08      	it	eq
 8000d5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d60:	4770      	bx	lr
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0040      	lsleq	r0, r0, #1
 8000d6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d72:	3a01      	subeq	r2, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xce>
 8000d76:	ea40 000c 	orr.w	r0, r0, ip
 8000d7a:	f093 0f00 	teq	r3, #0
 8000d7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0049      	lsleq	r1, r1, #1
 8000d86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8a:	3b01      	subeq	r3, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fmul+0xe6>
 8000d8e:	ea41 010c 	orr.w	r1, r1, ip
 8000d92:	e78f      	b.n	8000cb4 <__aeabi_fmul+0x18>
 8000d94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d98:	ea92 0f0c 	teq	r2, ip
 8000d9c:	bf18      	it	ne
 8000d9e:	ea93 0f0c 	teqne	r3, ip
 8000da2:	d00a      	beq.n	8000dba <__aeabi_fmul+0x11e>
 8000da4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da8:	bf18      	it	ne
 8000daa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	d1d8      	bne.n	8000d62 <__aeabi_fmul+0xc6>
 8000db0:	ea80 0001 	eor.w	r0, r0, r1
 8000db4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	bf17      	itett	ne
 8000dc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc4:	4608      	moveq	r0, r1
 8000dc6:	f091 0f00 	teqne	r1, #0
 8000dca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dce:	d014      	beq.n	8000dfa <__aeabi_fmul+0x15e>
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	d101      	bne.n	8000dda <__aeabi_fmul+0x13e>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	d10f      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000dda:	ea93 0f0c 	teq	r3, ip
 8000dde:	d103      	bne.n	8000de8 <__aeabi_fmul+0x14c>
 8000de0:	024b      	lsls	r3, r1, #9
 8000de2:	bf18      	it	ne
 8000de4:	4608      	movne	r0, r1
 8000de6:	d108      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	4770      	bx	lr
 8000dfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fdiv>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d069      	beq.n	8000ef0 <__aeabi_fdiv+0xec>
 8000e1c:	eba2 0203 	sub.w	r2, r2, r3
 8000e20:	ea80 0c01 	eor.w	ip, r0, r1
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2a:	d037      	beq.n	8000e9c <__aeabi_fdiv+0x98>
 8000e2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	bf38      	it	cc
 8000e40:	005b      	lslcc	r3, r3, #1
 8000e42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	bf24      	itt	cs
 8000e4e:	1a5b      	subcs	r3, r3, r1
 8000e50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e66:	bf24      	itt	cs
 8000e68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	bf18      	it	ne
 8000e82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e86:	d1e0      	bne.n	8000e4a <__aeabi_fdiv+0x46>
 8000e88:	2afd      	cmp	r2, #253	; 0xfd
 8000e8a:	f63f af50 	bhi.w	8000d2e <__aeabi_fmul+0x92>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e94:	bf08      	it	eq
 8000e96:	f020 0001 	biceq.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea4:	327f      	adds	r2, #127	; 0x7f
 8000ea6:	bfc2      	ittt	gt
 8000ea8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb0:	4770      	bxgt	lr
 8000eb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	3a01      	subs	r2, #1
 8000ebc:	e737      	b.n	8000d2e <__aeabi_fmul+0x92>
 8000ebe:	f092 0f00 	teq	r2, #0
 8000ec2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0040      	lsleq	r0, r0, #1
 8000eca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ece:	3a01      	subeq	r2, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xc2>
 8000ed2:	ea40 000c 	orr.w	r0, r0, ip
 8000ed6:	f093 0f00 	teq	r3, #0
 8000eda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0049      	lsleq	r1, r1, #1
 8000ee2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ee6:	3b01      	subeq	r3, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fdiv+0xda>
 8000eea:	ea41 010c 	orr.w	r1, r1, ip
 8000eee:	e795      	b.n	8000e1c <__aeabi_fdiv+0x18>
 8000ef0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef4:	ea92 0f0c 	teq	r2, ip
 8000ef8:	d108      	bne.n	8000f0c <__aeabi_fdiv+0x108>
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	f47f af7d 	bne.w	8000dfa <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	f47f af70 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e776      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f0c:	ea93 0f0c 	teq	r3, ip
 8000f10:	d104      	bne.n	8000f1c <__aeabi_fdiv+0x118>
 8000f12:	024b      	lsls	r3, r1, #9
 8000f14:	f43f af4c 	beq.w	8000db0 <__aeabi_fmul+0x114>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e76e      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1ca      	bne.n	8000ebe <__aeabi_fdiv+0xba>
 8000f28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f2c:	f47f af5c 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f34:	f47f af3c 	bne.w	8000db0 <__aeabi_fmul+0x114>
 8000f38:	e75f      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_uldivmod>:
 8000f3c:	b953      	cbnz	r3, 8000f54 <__aeabi_uldivmod+0x18>
 8000f3e:	b94a      	cbnz	r2, 8000f54 <__aeabi_uldivmod+0x18>
 8000f40:	2900      	cmp	r1, #0
 8000f42:	bf08      	it	eq
 8000f44:	2800      	cmpeq	r0, #0
 8000f46:	bf1c      	itt	ne
 8000f48:	f04f 31ff 	movne.w	r1, #4294967295
 8000f4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f50:	f000 b97a 	b.w	8001248 <__aeabi_idiv0>
 8000f54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f5c:	f000 f806 	bl	8000f6c <__udivmoddi4>
 8000f60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f68:	b004      	add	sp, #16
 8000f6a:	4770      	bx	lr

08000f6c <__udivmoddi4>:
 8000f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f70:	468c      	mov	ip, r1
 8000f72:	460e      	mov	r6, r1
 8000f74:	4604      	mov	r4, r0
 8000f76:	9d08      	ldr	r5, [sp, #32]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d150      	bne.n	800101e <__udivmoddi4+0xb2>
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	4617      	mov	r7, r2
 8000f80:	d96c      	bls.n	800105c <__udivmoddi4+0xf0>
 8000f82:	fab2 fe82 	clz	lr, r2
 8000f86:	f1be 0f00 	cmp.w	lr, #0
 8000f8a:	d00b      	beq.n	8000fa4 <__udivmoddi4+0x38>
 8000f8c:	f1ce 0c20 	rsb	ip, lr, #32
 8000f90:	fa01 f60e 	lsl.w	r6, r1, lr
 8000f94:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000f98:	fa02 f70e 	lsl.w	r7, r2, lr
 8000f9c:	ea4c 0c06 	orr.w	ip, ip, r6
 8000fa0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000fa4:	0c3a      	lsrs	r2, r7, #16
 8000fa6:	fbbc f9f2 	udiv	r9, ip, r2
 8000faa:	b2bb      	uxth	r3, r7
 8000fac:	fb02 cc19 	mls	ip, r2, r9, ip
 8000fb0:	fb09 fa03 	mul.w	sl, r9, r3
 8000fb4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000fb8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000fbc:	45b2      	cmp	sl, r6
 8000fbe:	d90a      	bls.n	8000fd6 <__udivmoddi4+0x6a>
 8000fc0:	19f6      	adds	r6, r6, r7
 8000fc2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fc6:	f080 8125 	bcs.w	8001214 <__udivmoddi4+0x2a8>
 8000fca:	45b2      	cmp	sl, r6
 8000fcc:	f240 8122 	bls.w	8001214 <__udivmoddi4+0x2a8>
 8000fd0:	f1a9 0902 	sub.w	r9, r9, #2
 8000fd4:	443e      	add	r6, r7
 8000fd6:	eba6 060a 	sub.w	r6, r6, sl
 8000fda:	fbb6 f0f2 	udiv	r0, r6, r2
 8000fde:	fb02 6610 	mls	r6, r2, r0, r6
 8000fe2:	fb00 f303 	mul.w	r3, r0, r3
 8000fe6:	b2a4      	uxth	r4, r4
 8000fe8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000fec:	42a3      	cmp	r3, r4
 8000fee:	d909      	bls.n	8001004 <__udivmoddi4+0x98>
 8000ff0:	19e4      	adds	r4, r4, r7
 8000ff2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ff6:	f080 810b 	bcs.w	8001210 <__udivmoddi4+0x2a4>
 8000ffa:	42a3      	cmp	r3, r4
 8000ffc:	f240 8108 	bls.w	8001210 <__udivmoddi4+0x2a4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	2100      	movs	r1, #0
 8001006:	1ae4      	subs	r4, r4, r3
 8001008:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800100c:	2d00      	cmp	r5, #0
 800100e:	d062      	beq.n	80010d6 <__udivmoddi4+0x16a>
 8001010:	2300      	movs	r3, #0
 8001012:	fa24 f40e 	lsr.w	r4, r4, lr
 8001016:	602c      	str	r4, [r5, #0]
 8001018:	606b      	str	r3, [r5, #4]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d907      	bls.n	8001032 <__udivmoddi4+0xc6>
 8001022:	2d00      	cmp	r5, #0
 8001024:	d055      	beq.n	80010d2 <__udivmoddi4+0x166>
 8001026:	2100      	movs	r1, #0
 8001028:	e885 0041 	stmia.w	r5, {r0, r6}
 800102c:	4608      	mov	r0, r1
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	fab3 f183 	clz	r1, r3
 8001036:	2900      	cmp	r1, #0
 8001038:	f040 808f 	bne.w	800115a <__udivmoddi4+0x1ee>
 800103c:	42b3      	cmp	r3, r6
 800103e:	d302      	bcc.n	8001046 <__udivmoddi4+0xda>
 8001040:	4282      	cmp	r2, r0
 8001042:	f200 80fc 	bhi.w	800123e <__udivmoddi4+0x2d2>
 8001046:	1a84      	subs	r4, r0, r2
 8001048:	eb66 0603 	sbc.w	r6, r6, r3
 800104c:	2001      	movs	r0, #1
 800104e:	46b4      	mov	ip, r6
 8001050:	2d00      	cmp	r5, #0
 8001052:	d040      	beq.n	80010d6 <__udivmoddi4+0x16a>
 8001054:	e885 1010 	stmia.w	r5, {r4, ip}
 8001058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105c:	b912      	cbnz	r2, 8001064 <__udivmoddi4+0xf8>
 800105e:	2701      	movs	r7, #1
 8001060:	fbb7 f7f2 	udiv	r7, r7, r2
 8001064:	fab7 fe87 	clz	lr, r7
 8001068:	f1be 0f00 	cmp.w	lr, #0
 800106c:	d135      	bne.n	80010da <__udivmoddi4+0x16e>
 800106e:	2101      	movs	r1, #1
 8001070:	1bf6      	subs	r6, r6, r7
 8001072:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001076:	fa1f f887 	uxth.w	r8, r7
 800107a:	fbb6 f2fc 	udiv	r2, r6, ip
 800107e:	fb0c 6612 	mls	r6, ip, r2, r6
 8001082:	fb08 f002 	mul.w	r0, r8, r2
 8001086:	0c23      	lsrs	r3, r4, #16
 8001088:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 800108c:	42b0      	cmp	r0, r6
 800108e:	d907      	bls.n	80010a0 <__udivmoddi4+0x134>
 8001090:	19f6      	adds	r6, r6, r7
 8001092:	f102 33ff 	add.w	r3, r2, #4294967295
 8001096:	d202      	bcs.n	800109e <__udivmoddi4+0x132>
 8001098:	42b0      	cmp	r0, r6
 800109a:	f200 80d2 	bhi.w	8001242 <__udivmoddi4+0x2d6>
 800109e:	461a      	mov	r2, r3
 80010a0:	1a36      	subs	r6, r6, r0
 80010a2:	fbb6 f0fc 	udiv	r0, r6, ip
 80010a6:	fb0c 6610 	mls	r6, ip, r0, r6
 80010aa:	fb08 f800 	mul.w	r8, r8, r0
 80010ae:	b2a3      	uxth	r3, r4
 80010b0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80010b4:	45a0      	cmp	r8, r4
 80010b6:	d907      	bls.n	80010c8 <__udivmoddi4+0x15c>
 80010b8:	19e4      	adds	r4, r4, r7
 80010ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80010be:	d202      	bcs.n	80010c6 <__udivmoddi4+0x15a>
 80010c0:	45a0      	cmp	r8, r4
 80010c2:	f200 80b9 	bhi.w	8001238 <__udivmoddi4+0x2cc>
 80010c6:	4618      	mov	r0, r3
 80010c8:	eba4 0408 	sub.w	r4, r4, r8
 80010cc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80010d0:	e79c      	b.n	800100c <__udivmoddi4+0xa0>
 80010d2:	4629      	mov	r1, r5
 80010d4:	4628      	mov	r0, r5
 80010d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010da:	fa07 f70e 	lsl.w	r7, r7, lr
 80010de:	f1ce 0320 	rsb	r3, lr, #32
 80010e2:	fa26 f203 	lsr.w	r2, r6, r3
 80010e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80010ea:	fbb2 f1fc 	udiv	r1, r2, ip
 80010ee:	fa1f f887 	uxth.w	r8, r7
 80010f2:	fb0c 2211 	mls	r2, ip, r1, r2
 80010f6:	fa06 f60e 	lsl.w	r6, r6, lr
 80010fa:	fa20 f303 	lsr.w	r3, r0, r3
 80010fe:	fb01 f908 	mul.w	r9, r1, r8
 8001102:	4333      	orrs	r3, r6
 8001104:	0c1e      	lsrs	r6, r3, #16
 8001106:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800110a:	45b1      	cmp	r9, r6
 800110c:	fa00 f40e 	lsl.w	r4, r0, lr
 8001110:	d909      	bls.n	8001126 <__udivmoddi4+0x1ba>
 8001112:	19f6      	adds	r6, r6, r7
 8001114:	f101 32ff 	add.w	r2, r1, #4294967295
 8001118:	f080 808c 	bcs.w	8001234 <__udivmoddi4+0x2c8>
 800111c:	45b1      	cmp	r9, r6
 800111e:	f240 8089 	bls.w	8001234 <__udivmoddi4+0x2c8>
 8001122:	3902      	subs	r1, #2
 8001124:	443e      	add	r6, r7
 8001126:	eba6 0609 	sub.w	r6, r6, r9
 800112a:	fbb6 f0fc 	udiv	r0, r6, ip
 800112e:	fb0c 6210 	mls	r2, ip, r0, r6
 8001132:	fb00 f908 	mul.w	r9, r0, r8
 8001136:	b29e      	uxth	r6, r3
 8001138:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800113c:	45b1      	cmp	r9, r6
 800113e:	d907      	bls.n	8001150 <__udivmoddi4+0x1e4>
 8001140:	19f6      	adds	r6, r6, r7
 8001142:	f100 33ff 	add.w	r3, r0, #4294967295
 8001146:	d271      	bcs.n	800122c <__udivmoddi4+0x2c0>
 8001148:	45b1      	cmp	r9, r6
 800114a:	d96f      	bls.n	800122c <__udivmoddi4+0x2c0>
 800114c:	3802      	subs	r0, #2
 800114e:	443e      	add	r6, r7
 8001150:	eba6 0609 	sub.w	r6, r6, r9
 8001154:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001158:	e78f      	b.n	800107a <__udivmoddi4+0x10e>
 800115a:	f1c1 0720 	rsb	r7, r1, #32
 800115e:	fa22 f807 	lsr.w	r8, r2, r7
 8001162:	408b      	lsls	r3, r1
 8001164:	ea48 0303 	orr.w	r3, r8, r3
 8001168:	fa26 f407 	lsr.w	r4, r6, r7
 800116c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001170:	fbb4 f9fe 	udiv	r9, r4, lr
 8001174:	fa1f fc83 	uxth.w	ip, r3
 8001178:	fb0e 4419 	mls	r4, lr, r9, r4
 800117c:	408e      	lsls	r6, r1
 800117e:	fa20 f807 	lsr.w	r8, r0, r7
 8001182:	fb09 fa0c 	mul.w	sl, r9, ip
 8001186:	ea48 0806 	orr.w	r8, r8, r6
 800118a:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800118e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8001192:	45a2      	cmp	sl, r4
 8001194:	fa02 f201 	lsl.w	r2, r2, r1
 8001198:	fa00 f601 	lsl.w	r6, r0, r1
 800119c:	d908      	bls.n	80011b0 <__udivmoddi4+0x244>
 800119e:	18e4      	adds	r4, r4, r3
 80011a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80011a4:	d244      	bcs.n	8001230 <__udivmoddi4+0x2c4>
 80011a6:	45a2      	cmp	sl, r4
 80011a8:	d942      	bls.n	8001230 <__udivmoddi4+0x2c4>
 80011aa:	f1a9 0902 	sub.w	r9, r9, #2
 80011ae:	441c      	add	r4, r3
 80011b0:	eba4 040a 	sub.w	r4, r4, sl
 80011b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80011b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80011bc:	fb00 fc0c 	mul.w	ip, r0, ip
 80011c0:	fa1f f888 	uxth.w	r8, r8
 80011c4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80011c8:	45a4      	cmp	ip, r4
 80011ca:	d907      	bls.n	80011dc <__udivmoddi4+0x270>
 80011cc:	18e4      	adds	r4, r4, r3
 80011ce:	f100 3eff 	add.w	lr, r0, #4294967295
 80011d2:	d229      	bcs.n	8001228 <__udivmoddi4+0x2bc>
 80011d4:	45a4      	cmp	ip, r4
 80011d6:	d927      	bls.n	8001228 <__udivmoddi4+0x2bc>
 80011d8:	3802      	subs	r0, #2
 80011da:	441c      	add	r4, r3
 80011dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011e0:	fba0 8902 	umull	r8, r9, r0, r2
 80011e4:	eba4 0c0c 	sub.w	ip, r4, ip
 80011e8:	45cc      	cmp	ip, r9
 80011ea:	46c2      	mov	sl, r8
 80011ec:	46ce      	mov	lr, r9
 80011ee:	d315      	bcc.n	800121c <__udivmoddi4+0x2b0>
 80011f0:	d012      	beq.n	8001218 <__udivmoddi4+0x2ac>
 80011f2:	b155      	cbz	r5, 800120a <__udivmoddi4+0x29e>
 80011f4:	ebb6 030a 	subs.w	r3, r6, sl
 80011f8:	eb6c 060e 	sbc.w	r6, ip, lr
 80011fc:	fa06 f707 	lsl.w	r7, r6, r7
 8001200:	40cb      	lsrs	r3, r1
 8001202:	431f      	orrs	r7, r3
 8001204:	40ce      	lsrs	r6, r1
 8001206:	602f      	str	r7, [r5, #0]
 8001208:	606e      	str	r6, [r5, #4]
 800120a:	2100      	movs	r1, #0
 800120c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001210:	4610      	mov	r0, r2
 8001212:	e6f7      	b.n	8001004 <__udivmoddi4+0x98>
 8001214:	4689      	mov	r9, r1
 8001216:	e6de      	b.n	8000fd6 <__udivmoddi4+0x6a>
 8001218:	4546      	cmp	r6, r8
 800121a:	d2ea      	bcs.n	80011f2 <__udivmoddi4+0x286>
 800121c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001220:	eb69 0e03 	sbc.w	lr, r9, r3
 8001224:	3801      	subs	r0, #1
 8001226:	e7e4      	b.n	80011f2 <__udivmoddi4+0x286>
 8001228:	4670      	mov	r0, lr
 800122a:	e7d7      	b.n	80011dc <__udivmoddi4+0x270>
 800122c:	4618      	mov	r0, r3
 800122e:	e78f      	b.n	8001150 <__udivmoddi4+0x1e4>
 8001230:	4681      	mov	r9, r0
 8001232:	e7bd      	b.n	80011b0 <__udivmoddi4+0x244>
 8001234:	4611      	mov	r1, r2
 8001236:	e776      	b.n	8001126 <__udivmoddi4+0x1ba>
 8001238:	3802      	subs	r0, #2
 800123a:	443c      	add	r4, r7
 800123c:	e744      	b.n	80010c8 <__udivmoddi4+0x15c>
 800123e:	4608      	mov	r0, r1
 8001240:	e706      	b.n	8001050 <__udivmoddi4+0xe4>
 8001242:	3a02      	subs	r2, #2
 8001244:	443e      	add	r6, r7
 8001246:	e72b      	b.n	80010a0 <__udivmoddi4+0x134>

08001248 <__aeabi_idiv0>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_InitTick+0x3c>)
{
 8001250:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001252:	7818      	ldrb	r0, [r3, #0]
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	fbb3 f3f0 	udiv	r3, r3, r0
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_InitTick+0x40>)
 800125e:	6810      	ldr	r0, [r2, #0]
 8001260:	fbb0 f0f3 	udiv	r0, r0, r3
 8001264:	f000 f89e 	bl	80013a4 <HAL_SYSTICK_Config>
 8001268:	4604      	mov	r4, r0
 800126a:	b958      	cbnz	r0, 8001284 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126c:	2d0f      	cmp	r5, #15
 800126e:	d809      	bhi.n	8001284 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	4602      	mov	r2, r0
 8001272:	4629      	mov	r1, r5
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f854 	bl	8001324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <HAL_InitTick+0x44>)
 800127e:	4620      	mov	r0, r4
 8001280:	601d      	str	r5, [r3, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001284:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001286:	bd38      	pop	{r3, r4, r5, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	2000011c 	.word	0x2000011c
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_Init+0x20>)
{
 8001296:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a2:	f000 f82d 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff ffd0 	bl	800124c <HAL_InitTick>
  HAL_MspInit();
 80012ac:	f002 fef0 	bl	8004090 <HAL_MspInit>
}
 80012b0:	2000      	movs	r0, #0
 80012b2:	bd08      	pop	{r3, pc}
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_IncTick+0x10>)
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_IncTick+0x14>)
 80012bc:	6811      	ldr	r1, [r2, #0]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	440b      	add	r3, r1
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000a68 	.word	0x20000a68
 80012cc:	20000000 	.word	0x20000000

080012d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012d0:	4b01      	ldr	r3, [pc, #4]	; (80012d8 <HAL_GetTick+0x8>)
 80012d2:	6818      	ldr	r0, [r3, #0]
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000a68 	.word	0x20000a68

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff fff6 	bl	80012d0 <HAL_GetTick>
 80012e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80012e8:	bf1e      	ittt	ne
 80012ea:	4b04      	ldrne	r3, [pc, #16]	; (80012fc <HAL_Delay+0x20>)
 80012ec:	781b      	ldrbne	r3, [r3, #0]
 80012ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	1b40      	subs	r0, r0, r5
 80012f6:	4284      	cmp	r4, r0
 80012f8:	d8fa      	bhi.n	80012f0 <HAL_Delay+0x14>
  {
  }
}
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	20000000 	.word	0x20000000

08001300 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001302:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001306:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	0c1b      	lsrs	r3, r3, #16
 8001312:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800131a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800131c:	60d3      	str	r3, [r2, #12]
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b530      	push	{r4, r5, lr}
 8001328:	68dc      	ldr	r4, [r3, #12]
 800132a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	2b04      	cmp	r3, #4
 8001336:	bf28      	it	cs
 8001338:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001340:	bf98      	it	ls
 8001342:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	fa05 f303 	lsl.w	r3, r5, r3
 8001348:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134c:	bf88      	it	hi
 800134e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4019      	ands	r1, r3
 8001352:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	fa05 f404 	lsl.w	r4, r5, r4
 8001358:	3c01      	subs	r4, #1
 800135a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800135c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135e:	ea42 0201 	orr.w	r2, r2, r1
 8001362:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	bfaf      	iteee	ge
 8001368:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	4b06      	ldrlt	r3, [pc, #24]	; (8001388 <HAL_NVIC_SetPriority+0x64>)
 800136e:	f000 000f 	andlt.w	r0, r0, #15
 8001372:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	bfa5      	ittet	ge
 8001376:	b2d2      	uxtbge	r2, r2
 8001378:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001382:	bd30      	pop	{r4, r5, pc}
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	e000ed14 	.word	0xe000ed14

0800138c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800138c:	2301      	movs	r3, #1
 800138e:	0942      	lsrs	r2, r0, #5
 8001390:	f000 001f 	and.w	r0, r0, #31
 8001394:	fa03 f000 	lsl.w	r0, r3, r0
 8001398:	4b01      	ldr	r3, [pc, #4]	; (80013a0 <HAL_NVIC_EnableIRQ+0x14>)
 800139a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	3801      	subs	r0, #1
 80013a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013aa:	d20a      	bcs.n	80013c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013d2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	bf0c      	ite	eq
 80013d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013dc:	f022 0204 	bicne.w	r2, r2, #4
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	4770      	bx	lr
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013e8:	4770      	bx	lr

080013ea <HAL_SYSTICK_IRQHandler>:
{
 80013ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80013ec:	f7ff fffc 	bl	80013e8 <HAL_SYSTICK_Callback>
 80013f0:	bd08      	pop	{r3, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80013f8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	4616      	mov	r6, r2
 80013fc:	4b65      	ldr	r3, [pc, #404]	; (8001594 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013fe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80015a4 <HAL_GPIO_Init+0x1b0>
 8001402:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80015a8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001406:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800140c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001410:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001414:	45a0      	cmp	r8, r4
 8001416:	d17f      	bne.n	8001518 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001418:	684d      	ldr	r5, [r1, #4]
 800141a:	2d12      	cmp	r5, #18
 800141c:	f000 80af 	beq.w	800157e <HAL_GPIO_Init+0x18a>
 8001420:	f200 8088 	bhi.w	8001534 <HAL_GPIO_Init+0x140>
 8001424:	2d02      	cmp	r5, #2
 8001426:	f000 80a7 	beq.w	8001578 <HAL_GPIO_Init+0x184>
 800142a:	d87c      	bhi.n	8001526 <HAL_GPIO_Init+0x132>
 800142c:	2d00      	cmp	r5, #0
 800142e:	f000 808e 	beq.w	800154e <HAL_GPIO_Init+0x15a>
 8001432:	2d01      	cmp	r5, #1
 8001434:	f000 809e 	beq.w	8001574 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001438:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800143c:	2cff      	cmp	r4, #255	; 0xff
 800143e:	bf93      	iteet	ls
 8001440:	4682      	movls	sl, r0
 8001442:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001446:	3d08      	subhi	r5, #8
 8001448:	f8d0 b000 	ldrls.w	fp, [r0]
 800144c:	bf92      	itee	ls
 800144e:	00b5      	lslls	r5, r6, #2
 8001450:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001454:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001456:	fa09 f805 	lsl.w	r8, r9, r5
 800145a:	ea2b 0808 	bic.w	r8, fp, r8
 800145e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001462:	bf88      	it	hi
 8001464:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001468:	ea48 0505 	orr.w	r5, r8, r5
 800146c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001470:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001474:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001478:	d04e      	beq.n	8001518 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800147a:	4d47      	ldr	r5, [pc, #284]	; (8001598 <HAL_GPIO_Init+0x1a4>)
 800147c:	4f46      	ldr	r7, [pc, #280]	; (8001598 <HAL_GPIO_Init+0x1a4>)
 800147e:	69ad      	ldr	r5, [r5, #24]
 8001480:	f026 0803 	bic.w	r8, r6, #3
 8001484:	f045 0501 	orr.w	r5, r5, #1
 8001488:	61bd      	str	r5, [r7, #24]
 800148a:	69bd      	ldr	r5, [r7, #24]
 800148c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001490:	f005 0501 	and.w	r5, r5, #1
 8001494:	9501      	str	r5, [sp, #4]
 8001496:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800149a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800149e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80014a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80014a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80014a8:	fa09 f90b 	lsl.w	r9, r9, fp
 80014ac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b0:	4d3a      	ldr	r5, [pc, #232]	; (800159c <HAL_GPIO_Init+0x1a8>)
 80014b2:	42a8      	cmp	r0, r5
 80014b4:	d068      	beq.n	8001588 <HAL_GPIO_Init+0x194>
 80014b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ba:	42a8      	cmp	r0, r5
 80014bc:	d066      	beq.n	800158c <HAL_GPIO_Init+0x198>
 80014be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014c2:	42a8      	cmp	r0, r5
 80014c4:	d064      	beq.n	8001590 <HAL_GPIO_Init+0x19c>
 80014c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ca:	42a8      	cmp	r0, r5
 80014cc:	bf0c      	ite	eq
 80014ce:	2503      	moveq	r5, #3
 80014d0:	2504      	movne	r5, #4
 80014d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80014d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80014da:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014de:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80014e4:	bf14      	ite	ne
 80014e6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014e8:	43a5      	biceq	r5, r4
 80014ea:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80014f2:	bf14      	ite	ne
 80014f4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f6:	43a5      	biceq	r5, r4
 80014f8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014fa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001500:	bf14      	ite	ne
 8001502:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001504:	43a5      	biceq	r5, r4
 8001506:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001508:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800150a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800150e:	bf14      	ite	ne
 8001510:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001512:	ea25 0404 	biceq.w	r4, r5, r4
 8001516:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001518:	3601      	adds	r6, #1
 800151a:	2e10      	cmp	r6, #16
 800151c:	f47f af73 	bne.w	8001406 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001520:	b003      	add	sp, #12
 8001522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001526:	2d03      	cmp	r5, #3
 8001528:	d022      	beq.n	8001570 <HAL_GPIO_Init+0x17c>
 800152a:	2d11      	cmp	r5, #17
 800152c:	d184      	bne.n	8001438 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152e:	68ca      	ldr	r2, [r1, #12]
 8001530:	3204      	adds	r2, #4
          break;
 8001532:	e781      	b.n	8001438 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001534:	4f1a      	ldr	r7, [pc, #104]	; (80015a0 <HAL_GPIO_Init+0x1ac>)
 8001536:	42bd      	cmp	r5, r7
 8001538:	d009      	beq.n	800154e <HAL_GPIO_Init+0x15a>
 800153a:	d812      	bhi.n	8001562 <HAL_GPIO_Init+0x16e>
 800153c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80015ac <HAL_GPIO_Init+0x1b8>
 8001540:	454d      	cmp	r5, r9
 8001542:	d004      	beq.n	800154e <HAL_GPIO_Init+0x15a>
 8001544:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001548:	454d      	cmp	r5, r9
 800154a:	f47f af75 	bne.w	8001438 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154e:	688a      	ldr	r2, [r1, #8]
 8001550:	b1c2      	cbz	r2, 8001584 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001552:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001554:	bf0c      	ite	eq
 8001556:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800155a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155e:	2208      	movs	r2, #8
 8001560:	e76a      	b.n	8001438 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001562:	4575      	cmp	r5, lr
 8001564:	d0f3      	beq.n	800154e <HAL_GPIO_Init+0x15a>
 8001566:	4565      	cmp	r5, ip
 8001568:	d0f1      	beq.n	800154e <HAL_GPIO_Init+0x15a>
 800156a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80015b0 <HAL_GPIO_Init+0x1bc>
 800156e:	e7eb      	b.n	8001548 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001570:	2200      	movs	r2, #0
 8001572:	e761      	b.n	8001438 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001574:	68ca      	ldr	r2, [r1, #12]
          break;
 8001576:	e75f      	b.n	8001438 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001578:	68ca      	ldr	r2, [r1, #12]
 800157a:	3208      	adds	r2, #8
          break;
 800157c:	e75c      	b.n	8001438 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800157e:	68ca      	ldr	r2, [r1, #12]
 8001580:	320c      	adds	r2, #12
          break;
 8001582:	e759      	b.n	8001438 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001584:	2204      	movs	r2, #4
 8001586:	e757      	b.n	8001438 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001588:	2500      	movs	r5, #0
 800158a:	e7a2      	b.n	80014d2 <HAL_GPIO_Init+0xde>
 800158c:	2501      	movs	r5, #1
 800158e:	e7a0      	b.n	80014d2 <HAL_GPIO_Init+0xde>
 8001590:	2502      	movs	r5, #2
 8001592:	e79e      	b.n	80014d2 <HAL_GPIO_Init+0xde>
 8001594:	40010400 	.word	0x40010400
 8001598:	40021000 	.word	0x40021000
 800159c:	40010800 	.word	0x40010800
 80015a0:	10210000 	.word	0x10210000
 80015a4:	10310000 	.word	0x10310000
 80015a8:	10320000 	.word	0x10320000
 80015ac:	10110000 	.word	0x10110000
 80015b0:	10220000 	.word	0x10220000

080015b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80015b8:	4604      	mov	r4, r0
{
 80015ba:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80015bc:	2800      	cmp	r0, #0
 80015be:	d060      	beq.n	8001682 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80015c0:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80015c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015c8:	b91b      	cbnz	r3, 80015d2 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ca:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015ce:	f002 ff0b 	bl	80043e8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015d2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d4:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80015d6:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80015d8:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80015dc:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80015e0:	f001 f990 	bl	8002904 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	f104 0804 	add.w	r8, r4, #4
 80015ee:	6033      	str	r3, [r6, #0]
 80015f0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	f001 f975 	bl	80028e4 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80015fa:	2100      	movs	r1, #0
 80015fc:	6820      	ldr	r0, [r4, #0]
 80015fe:	f001 f98b 	bl	8002918 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8001602:	2100      	movs	r1, #0
 8001604:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001606:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8001608:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800160a:	4608      	mov	r0, r1
 800160c:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8001610:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001614:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8001616:	3101      	adds	r1, #1
 8001618:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 800161a:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800161e:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8001622:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8001624:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8001626:	6410      	str	r0, [r2, #64]	; 0x40
 8001628:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 800162c:	d1f0      	bne.n	8001610 <HAL_PCD_Init+0x5c>
 800162e:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8001630:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8001632:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001636:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8001638:	3201      	adds	r2, #1
 800163a:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 800163c:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001640:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8001644:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8001648:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800164c:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8001650:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8001654:	d1ed      	bne.n	8001632 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001656:	466e      	mov	r6, sp
 8001658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800165c:	682b      	ldr	r3, [r5, #0]
 800165e:	6033      	str	r3, [r6, #0]
 8001660:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001664:	6820      	ldr	r0, [r4, #0]
 8001666:	f001 f959 	bl	800291c <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 800166a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800166c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8001670:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8001672:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8001676:	f001 fc29 	bl	8002ecc <USB_DevDisconnect>
  return HAL_OK;
 800167a:	2000      	movs	r0, #0
}
 800167c:	b006      	add	sp, #24
 800167e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	e7fa      	b.n	800167c <HAL_PCD_Init+0xc8>

08001686 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001686:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800168a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800168c:	2b01      	cmp	r3, #1
{
 800168e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001690:	d00e      	beq.n	80016b0 <HAL_PCD_Start+0x2a>
 8001692:	2101      	movs	r1, #1
 8001694:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001698:	f002 ffdb 	bl	8004652 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800169c:	6820      	ldr	r0, [r4, #0]
 800169e:	f001 fc13 	bl	8002ec8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80016a2:	6820      	ldr	r0, [r4, #0]
 80016a4:	f001 f925 	bl	80028f2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80016ae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80016b0:	2002      	movs	r0, #2
}
 80016b2:	bd10      	pop	{r4, pc}

080016b4 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80016b4:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80016b8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80016ba:	2a01      	cmp	r2, #1
{
 80016bc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80016be:	d00b      	beq.n	80016d8 <HAL_PCD_SetAddress+0x24>
 80016c0:	2201      	movs	r2, #1
 80016c2:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80016c6:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80016ca:	6800      	ldr	r0, [r0, #0]
 80016cc:	f001 fbf6 	bl	8002ebc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80016d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80016d8:	2002      	movs	r0, #2
  return HAL_OK;
}
 80016da:	bd10      	pop	{r4, pc}

080016dc <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016dc:	b538      	push	{r3, r4, r5, lr}
 80016de:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80016e0:	b248      	sxtb	r0, r1
 80016e2:	2800      	cmp	r0, #0
 80016e4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016e8:	bfb5      	itete	lt
 80016ea:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80016ee:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016f2:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80016f4:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80016f8:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 80016fa:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80016fc:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80016fe:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8001700:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8001704:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8001706:	2b01      	cmp	r3, #1
 8001708:	d009      	beq.n	800171e <HAL_PCD_EP_Open+0x42>
 800170a:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800170c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800170e:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001712:	f001 f91f 	bl	8002954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001716:	2000      	movs	r0, #0
 8001718:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 800171c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800171e:	2002      	movs	r0, #2
}
 8001720:	bd38      	pop	{r3, r4, r5, pc}

08001722 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001722:	b24b      	sxtb	r3, r1
 8001724:	2b00      	cmp	r3, #0
 8001726:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800172a:	bfb5      	itete	lt
 800172c:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001730:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001734:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001736:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800173a:	0fdb      	lsrs	r3, r3, #31
{  
 800173c:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 800173e:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001740:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8001742:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8001746:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001748:	2b01      	cmp	r3, #1
 800174a:	d009      	beq.n	8001760 <HAL_PCD_EP_Close+0x3e>
 800174c:	2301      	movs	r3, #1
 800174e:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001752:	6800      	ldr	r0, [r0, #0]
 8001754:	f001 fa70 	bl	8002c38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001758:	2000      	movs	r0, #0
 800175a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800175e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001760:	2002      	movs	r0, #2
}
 8001762:	bd10      	pop	{r4, pc}

08001764 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001764:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001766:	2600      	movs	r6, #0
 8001768:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800176c:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 800176e:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8001770:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001774:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001778:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 800177a:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 800177e:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8001782:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8001786:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 800178a:	6800      	ldr	r0, [r0, #0]
 800178c:	f001 fbb8 	bl	8002f00 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001790:	4630      	mov	r0, r6
 8001792:	bd70      	pop	{r4, r5, r6, pc}

08001794 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001794:	f001 010f 	and.w	r1, r1, #15
 8001798:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 800179c:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 80017a0:	4770      	bx	lr

080017a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80017a6:	b570      	push	{r4, r5, r6, lr}
 80017a8:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80017aa:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80017ac:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80017ae:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80017b0:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80017b2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80017b6:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80017ba:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80017bc:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80017be:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80017c0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80017c4:	6800      	ldr	r0, [r0, #0]
 80017c6:	f001 fb9b 	bl	8002f00 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80017ca:	4630      	mov	r0, r6
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080017d0 <HAL_PCD_IRQHandler>:
{ 
 80017d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80017d4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80017d6:	6800      	ldr	r0, [r0, #0]
 80017d8:	f001 fb7a 	bl	8002ed0 <USB_ReadInterrupts>
 80017dc:	0400      	lsls	r0, r0, #16
 80017de:	f100 8098 	bmi.w	8001912 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	f001 fb74 	bl	8002ed0 <USB_ReadInterrupts>
 80017e8:	0541      	lsls	r1, r0, #21
 80017ea:	d50f      	bpl.n	800180c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017ec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80017ee:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80017f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001800:	f002 fe31 	bl	8004466 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001804:	2100      	movs	r1, #0
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff ff54 	bl	80016b4 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800180c:	6820      	ldr	r0, [r4, #0]
 800180e:	f001 fb5f 	bl	8002ed0 <USB_ReadInterrupts>
 8001812:	0447      	lsls	r7, r0, #17
 8001814:	d508      	bpl.n	8001828 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800181c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001828:	6820      	ldr	r0, [r4, #0]
 800182a:	f001 fb51 	bl	8002ed0 <USB_ReadInterrupts>
 800182e:	0486      	lsls	r6, r0, #18
 8001830:	d508      	bpl.n	8001844 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001832:	6822      	ldr	r2, [r4, #0]
 8001834:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	f001 fb43 	bl	8002ed0 <USB_ReadInterrupts>
 800184a:	04c5      	lsls	r5, r0, #19
 800184c:	d51c      	bpl.n	8001888 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800184e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001850:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001852:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001856:	f023 0304 	bic.w	r3, r3, #4
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8001862:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001866:	f023 0308 	bic.w	r3, r3, #8
 800186a:	041b      	lsls	r3, r3, #16
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001872:	f002 fe15 	bl	80044a0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001876:	6822      	ldr	r2, [r4, #0]
 8001878:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800187c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	f001 fb21 	bl	8002ed0 <USB_ReadInterrupts>
 800188e:	0500      	lsls	r0, r0, #20
 8001890:	d51d      	bpl.n	80018ce <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001892:	6820      	ldr	r0, [r4, #0]
 8001894:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001898:	b29b      	uxth	r3, r3
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80018a2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80018a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80018b2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80018c0:	f001 fb06 	bl	8002ed0 <USB_ReadInterrupts>
 80018c4:	04c1      	lsls	r1, r0, #19
 80018c6:	d402      	bmi.n	80018ce <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80018c8:	4620      	mov	r0, r4
 80018ca:	f002 fdd9 	bl	8004480 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80018ce:	6820      	ldr	r0, [r4, #0]
 80018d0:	f001 fafe 	bl	8002ed0 <USB_ReadInterrupts>
 80018d4:	0582      	lsls	r2, r0, #22
 80018d6:	d50b      	bpl.n	80018f0 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80018d8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80018da:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80018dc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80018ec:	f002 fdb7 	bl	800445e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80018f0:	6820      	ldr	r0, [r4, #0]
 80018f2:	f001 faed 	bl	8002ed0 <USB_ReadInterrupts>
 80018f6:	05c3      	lsls	r3, r0, #23
 80018f8:	d508      	bpl.n	800190c <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	0c1b      	lsrs	r3, r3, #16
 8001908:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800190c:	b002      	add	sp, #8
 800190e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8001912:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001914:	4fc8      	ldr	r7, [pc, #800]	; (8001c38 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001916:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001c3c <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800191a:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001c40 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 800191e:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8001922:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001926:	6820      	ldr	r0, [r4, #0]
 8001928:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800192c:	b29b      	uxth	r3, r3
 800192e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	f57f af55 	bpl.w	80017e2 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001938:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 800193c:	f015 050f 	ands.w	r5, r5, #15
 8001940:	f040 80ab 	bne.w	8001a9a <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001944:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001948:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800194a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800194e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001950:	d126      	bne.n	80019a0 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001952:	403b      	ands	r3, r7
 8001954:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001956:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800195a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800195e:	b29b      	uxth	r3, r3
 8001960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001964:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001968:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800196c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800196e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001972:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001974:	4413      	add	r3, r2
 8001976:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001978:	4620      	mov	r0, r4
 800197a:	f002 fd69 	bl	8004450 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800197e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0cf      	beq.n	8001926 <HAL_PCD_IRQHandler+0x156>
 8001986:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001988:	2a00      	cmp	r2, #0
 800198a:	d1cc      	bne.n	8001926 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800198c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001990:	6821      	ldr	r1, [r4, #0]
 8001992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001996:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800199a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800199e:	e7c2      	b.n	8001926 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019a0:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80019a8:	051a      	lsls	r2, r3, #20
 80019aa:	d51f      	bpl.n	80019ec <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019b0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80019be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80019c2:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ca:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80019ce:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80019d2:	f001 fb95 	bl	8003100 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80019d6:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80019d8:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80019da:	8813      	ldrh	r3, [r2, #0]
 80019dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e0:	051b      	lsls	r3, r3, #20
 80019e2:	0d1b      	lsrs	r3, r3, #20
 80019e4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80019e6:	f002 fd25 	bl	8004434 <HAL_PCD_SetupStageCallback>
 80019ea:	e79c      	b.n	8001926 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	d598      	bpl.n	8001926 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019f4:	8803      	ldrh	r3, [r0, #0]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	051b      	lsls	r3, r3, #20
 80019fc:	0d1b      	lsrs	r3, r3, #20
 80019fe:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a04:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8001a1e:	b163      	cbz	r3, 8001a3a <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001a20:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8001a24:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001a28:	f001 fb6a 	bl	8003100 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001a2c:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001a30:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f002 fcff 	bl	8004440 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a42:	6822      	ldr	r2, [r4, #0]
 8001a44:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8001a48:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001a4c:	2d3e      	cmp	r5, #62	; 0x3e
 8001a4e:	b289      	uxth	r1, r1
 8001a50:	f101 0106 	add.w	r1, r1, #6
 8001a54:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8001a58:	d917      	bls.n	8001a8a <HAL_PCD_IRQHandler+0x2ba>
 8001a5a:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001a5e:	06ee      	lsls	r6, r5, #27
 8001a60:	bf04      	itt	eq
 8001a62:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8001a66:	b29b      	uxtheq	r3, r3
 8001a68:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a72:	8813      	ldrh	r3, [r2, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	ea03 0308 	and.w	r3, r3, r8
 8001a7a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a86:	8013      	strh	r3, [r2, #0]
 8001a88:	e74d      	b.n	8001926 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a8a:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001a8e:	07ed      	lsls	r5, r5, #31
 8001a90:	bf44      	itt	mi
 8001a92:	3301      	addmi	r3, #1
 8001a94:	b29b      	uxthmi	r3, r3
 8001a96:	029b      	lsls	r3, r3, #10
 8001a98:	e7e8      	b.n	8001a6c <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a9a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aa4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001aa8:	0419      	lsls	r1, r3, #16
 8001aaa:	d53f      	bpl.n	8001b2c <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001aac:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001ab0:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	0d1b      	lsrs	r3, r3, #20
 8001abc:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001ac0:	eb04 010a 	add.w	r1, r4, sl
 8001ac4:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d174      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001acc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ad0:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3306      	adds	r3, #6
 8001ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001adc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001ae0:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001ae4:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8001ae8:	b136      	cbz	r6, 8001af8 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001aea:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8001aee:	4633      	mov	r3, r6
 8001af0:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001af4:	f001 fb04 	bl	8003100 <USB_ReadPMA>
 8001af8:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8001afc:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8001b00:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8001b04:	4433      	add	r3, r6
 8001b06:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b0a:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8001b0e:	4432      	add	r2, r6
 8001b10:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b14:	b123      	cbz	r3, 8001b20 <HAL_PCD_IRQHandler+0x350>
 8001b16:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8001b1a:	4286      	cmp	r6, r0
 8001b1c:	f080 8086 	bcs.w	8001c2c <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b20:	44a2      	add	sl, r4
 8001b22:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8001b26:	4620      	mov	r0, r4
 8001b28:	f002 fc8a 	bl	8004440 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b2c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b30:	061a      	lsls	r2, r3, #24
 8001b32:	f57f aef8 	bpl.w	8001926 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b36:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001b38:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b3a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001b3e:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	403b      	ands	r3, r7
 8001b44:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001b48:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001b4c:	3502      	adds	r5, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d178      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b52:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b56:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001b66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001b6a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b72:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8001b74:	b11b      	cbz	r3, 8001b7e <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001b76:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001b78:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001b7a:	f001 f9af 	bl	8002edc <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b7e:	6822      	ldr	r2, [r4, #0]
 8001b80:	4426      	add	r6, r4
 8001b82:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001b86:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001b92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001b96:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8001b9a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b9c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ba0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8001ba2:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001ba4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001ba6:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ba8:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 8085 	bne.w	8001cba <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bb0:	f002 fc4e 	bl	8004450 <HAL_PCD_DataInStageCallback>
 8001bb4:	e6b7      	b.n	8001926 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001bb6:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8001bba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bc4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001bc8:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001bca:	d021      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bcc:	3202      	adds	r2, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001bd4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001bd8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001bdc:	b136      	cbz	r6, 8001bec <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bde:	4633      	mov	r3, r6
 8001be0:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001be4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001be8:	f001 fa8a 	bl	8003100 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001bec:	eb04 030a 	add.w	r3, r4, sl
 8001bf0:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8001bf4:	6822      	ldr	r2, [r4, #0]
 8001bf6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfe:	051b      	lsls	r3, r3, #20
 8001c00:	0d1b      	lsrs	r3, r3, #20
 8001c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c0a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001c0e:	e773      	b.n	8001af8 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c10:	3206      	adds	r2, #6
 8001c12:	4413      	add	r3, r2
 8001c14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001c18:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001c1c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001c20:	2e00      	cmp	r6, #0
 8001c22:	d0e3      	beq.n	8001bec <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c24:	4633      	mov	r3, r6
 8001c26:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001c2a:	e7db      	b.n	8001be4 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001c2c:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff fd97 	bl	8001764 <HAL_PCD_EP_Receive>
 8001c36:	e779      	b.n	8001b2c <HAL_PCD_IRQHandler+0x35c>
 8001c38:	ffff8f0f 	.word	0xffff8f0f
 8001c3c:	ffffbf8f 	.word	0xffffbf8f
 8001c40:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001c44:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001c48:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c52:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c56:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001c58:	d020      	beq.n	8001c9c <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c5a:	3202      	adds	r2, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001c62:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c66:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6e:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001c70:	b11b      	cbz	r3, 8001c7a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001c72:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001c74:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001c76:	f001 f931 	bl	8002edc <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001c7a:	19a3      	adds	r3, r4, r6
 8001c7c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001c80:	6822      	ldr	r2, [r4, #0]
 8001c82:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c8a:	051b      	lsls	r3, r3, #20
 8001c8c:	0d1b      	lsrs	r3, r3, #20
 8001c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c96:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001c9a:	e770      	b.n	8001b7e <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c9c:	3206      	adds	r2, #6
 8001c9e:	4413      	add	r3, r2
 8001ca0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001ca4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001ca8:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb0:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0e1      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001cb6:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001cb8:	e7dc      	b.n	8001c74 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001cba:	f7ff fd72 	bl	80017a2 <HAL_PCD_EP_Transmit>
 8001cbe:	e632      	b.n	8001926 <HAL_PCD_IRQHandler+0x156>

08001cc0 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8001cc0:	2201      	movs	r2, #1
{
 8001cc2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001cc4:	b24b      	sxtb	r3, r1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001ccc:	bfb5      	itete	lt
 8001cce:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001cd6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd8:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001cdc:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8001cde:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001ce0:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001ce2:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001ce4:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001ce6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001cea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00e      	beq.n	8001d0e <HAL_PCD_EP_SetStall+0x4e>
 8001cf0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001cf4:	6800      	ldr	r0, [r0, #0]
 8001cf6:	f001 f86d 	bl	8002dd4 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001cfa:	b925      	cbnz	r5, 8001d06 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cfc:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001d00:	6820      	ldr	r0, [r4, #0]
 8001d02:	f001 f8e9 	bl	8002ed8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001d06:	2000      	movs	r0, #0
 8001d08:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001d0e:	2002      	movs	r0, #2
}
 8001d10:	bd38      	pop	{r3, r4, r5, pc}

08001d12 <HAL_PCD_EP_ClrStall>:
{
 8001d12:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001d14:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8001d16:	b24b      	sxtb	r3, r1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d1e:	bfb5      	itete	lt
 8001d20:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001d24:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d28:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001d2a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001d2e:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001d30:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001d32:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001d34:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001d36:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001d3a:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d009      	beq.n	8001d54 <HAL_PCD_EP_ClrStall+0x42>
 8001d40:	2301      	movs	r3, #1
 8001d42:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001d46:	6800      	ldr	r0, [r0, #0]
 8001d48:	f001 f876 	bl	8002e38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001d4c:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001d50:	4620      	mov	r0, r4
 8001d52:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001d54:	2002      	movs	r0, #2
}
 8001d56:	bd38      	pop	{r3, r4, r5, pc}

08001d58 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001d58:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d5c:	bf1b      	ittet	ne
 8001d5e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001d62:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d66:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d6a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001d6c:	bf08      	it	eq
 8001d6e:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001d72:	b91a      	cbnz	r2, 8001d7c <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001d74:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001d76:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001d78:	2000      	movs	r0, #0
 8001d7a:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001d7c:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001d7e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001d80:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001d82:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001d84:	8103      	strh	r3, [r0, #8]
 8001d86:	e7f7      	b.n	8001d78 <HAL_PCDEx_PMAConfig+0x20>

08001d88 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d88:	6803      	ldr	r3, [r0, #0]
{
 8001d8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	07db      	lsls	r3, r3, #31
{
 8001d90:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	d410      	bmi.n	8001db6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	079f      	lsls	r7, r3, #30
 8001d98:	d45e      	bmi.n	8001e58 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	682b      	ldr	r3, [r5, #0]
 8001d9c:	0719      	lsls	r1, r3, #28
 8001d9e:	f100 8095 	bmi.w	8001ecc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da2:	682b      	ldr	r3, [r5, #0]
 8001da4:	075a      	lsls	r2, r3, #29
 8001da6:	f100 80bf 	bmi.w	8001f28 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001daa:	69ea      	ldr	r2, [r5, #28]
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	f040 812d 	bne.w	800200c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001db2:	2000      	movs	r0, #0
 8001db4:	e014      	b.n	8001de0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001db6:	4c90      	ldr	r4, [pc, #576]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d007      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc2:	6863      	ldr	r3, [r4, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
 8001dcc:	6863      	ldr	r3, [r4, #4]
 8001dce:	03de      	lsls	r6, r3, #15
 8001dd0:	d509      	bpl.n	8001de6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	039c      	lsls	r4, r3, #14
 8001dd6:	d5dd      	bpl.n	8001d94 <HAL_RCC_OscConfig+0xc>
 8001dd8:	686b      	ldr	r3, [r5, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1da      	bne.n	8001d94 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001dde:	2001      	movs	r0, #1
}
 8001de0:	b002      	add	sp, #8
 8001de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	686b      	ldr	r3, [r5, #4]
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d110      	bne.n	8001e10 <HAL_RCC_OscConfig+0x88>
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001df6:	f7ff fa6b 	bl	80012d0 <HAL_GetTick>
 8001dfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	0398      	lsls	r0, r3, #14
 8001e00:	d4c8      	bmi.n	8001d94 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e02:	f7ff fa65 	bl	80012d0 <HAL_GetTick>
 8001e06:	1b80      	subs	r0, r0, r6
 8001e08:	2864      	cmp	r0, #100	; 0x64
 8001e0a:	d9f7      	bls.n	8001dfc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	e7e7      	b.n	8001de0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e10:	b99b      	cbnz	r3, 8001e3a <HAL_RCC_OscConfig+0xb2>
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e18:	6023      	str	r3, [r4, #0]
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e22:	f7ff fa55 	bl	80012d0 <HAL_GetTick>
 8001e26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	0399      	lsls	r1, r3, #14
 8001e2c:	d5b2      	bpl.n	8001d94 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e2e:	f7ff fa4f 	bl	80012d0 <HAL_GetTick>
 8001e32:	1b80      	subs	r0, r0, r6
 8001e34:	2864      	cmp	r0, #100	; 0x64
 8001e36:	d9f7      	bls.n	8001e28 <HAL_RCC_OscConfig+0xa0>
 8001e38:	e7e8      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	d103      	bne.n	8001e4a <HAL_RCC_OscConfig+0xc2>
 8001e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e46:	6023      	str	r3, [r4, #0]
 8001e48:	e7d1      	b.n	8001dee <HAL_RCC_OscConfig+0x66>
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4e:	6023      	str	r3, [r4, #0]
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e56:	e7cd      	b.n	8001df4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e58:	4c67      	ldr	r4, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	6863      	ldr	r3, [r4, #4]
 8001e5c:	f013 0f0c 	tst.w	r3, #12
 8001e60:	d007      	beq.n	8001e72 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e62:	6863      	ldr	r3, [r4, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d110      	bne.n	8001e8e <HAL_RCC_OscConfig+0x106>
 8001e6c:	6863      	ldr	r3, [r4, #4]
 8001e6e:	03da      	lsls	r2, r3, #15
 8001e70:	d40d      	bmi.n	8001e8e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	079b      	lsls	r3, r3, #30
 8001e76:	d502      	bpl.n	8001e7e <HAL_RCC_OscConfig+0xf6>
 8001e78:	692b      	ldr	r3, [r5, #16]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d1af      	bne.n	8001dde <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	696a      	ldr	r2, [r5, #20]
 8001e82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e8a:	6023      	str	r3, [r4, #0]
 8001e8c:	e785      	b.n	8001d9a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8e:	692a      	ldr	r2, [r5, #16]
 8001e90:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e92:	b16a      	cbz	r2, 8001eb0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e98:	f7ff fa1a 	bl	80012d0 <HAL_GetTick>
 8001e9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	079f      	lsls	r7, r3, #30
 8001ea2:	d4ec      	bmi.n	8001e7e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fa14 	bl	80012d0 <HAL_GetTick>
 8001ea8:	1b80      	subs	r0, r0, r6
 8001eaa:	2802      	cmp	r0, #2
 8001eac:	d9f7      	bls.n	8001e9e <HAL_RCC_OscConfig+0x116>
 8001eae:	e7ad      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001eb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fa0d 	bl	80012d0 <HAL_GetTick>
 8001eb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	0798      	lsls	r0, r3, #30
 8001ebc:	f57f af6d 	bpl.w	8001d9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fa06 	bl	80012d0 <HAL_GetTick>
 8001ec4:	1b80      	subs	r0, r0, r6
 8001ec6:	2802      	cmp	r0, #2
 8001ec8:	d9f6      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x130>
 8001eca:	e79f      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ecc:	69aa      	ldr	r2, [r5, #24]
 8001ece:	4c4a      	ldr	r4, [pc, #296]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_RCC_OscConfig+0x278>)
 8001ed2:	b1da      	cbz	r2, 8001f0c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f9fa 	bl	80012d0 <HAL_GetTick>
 8001edc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ee0:	079b      	lsls	r3, r3, #30
 8001ee2:	d50d      	bpl.n	8001f00 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ee8:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ef0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001ef2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ef4:	9b01      	ldr	r3, [sp, #4]
 8001ef6:	1e5a      	subs	r2, r3, #1
 8001ef8:	9201      	str	r2, [sp, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x16a>
 8001efe:	e750      	b.n	8001da2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f00:	f7ff f9e6 	bl	80012d0 <HAL_GetTick>
 8001f04:	1b80      	subs	r0, r0, r6
 8001f06:	2802      	cmp	r0, #2
 8001f08:	d9e9      	bls.n	8001ede <HAL_RCC_OscConfig+0x156>
 8001f0a:	e77f      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001f0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f9df 	bl	80012d0 <HAL_GetTick>
 8001f12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f16:	079f      	lsls	r7, r3, #30
 8001f18:	f57f af43 	bpl.w	8001da2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff f9d8 	bl	80012d0 <HAL_GetTick>
 8001f20:	1b80      	subs	r0, r0, r6
 8001f22:	2802      	cmp	r0, #2
 8001f24:	d9f6      	bls.n	8001f14 <HAL_RCC_OscConfig+0x18c>
 8001f26:	e771      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f28:	4c33      	ldr	r4, [pc, #204]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	69e3      	ldr	r3, [r4, #28]
 8001f2c:	00d8      	lsls	r0, r3, #3
 8001f2e:	d424      	bmi.n	8001f7a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001f30:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	69e3      	ldr	r3, [r4, #28]
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61e3      	str	r3, [r4, #28]
 8001f3a:	69e3      	ldr	r3, [r4, #28]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4e30      	ldr	r6, [pc, #192]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f46:	6833      	ldr	r3, [r6, #0]
 8001f48:	05d9      	lsls	r1, r3, #23
 8001f4a:	d518      	bpl.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	68eb      	ldr	r3, [r5, #12]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d126      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x218>
 8001f52:	6a23      	ldr	r3, [r4, #32]
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f9b9 	bl	80012d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	6a23      	ldr	r3, [r4, #32]
 8001f66:	079b      	lsls	r3, r3, #30
 8001f68:	d53f      	bpl.n	8001fea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001f6a:	2f00      	cmp	r7, #0
 8001f6c:	f43f af1d 	beq.w	8001daa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	69e3      	ldr	r3, [r4, #28]
 8001f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f76:	61e3      	str	r3, [r4, #28]
 8001f78:	e717      	b.n	8001daa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	e7e2      	b.n	8001f44 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7e:	6833      	ldr	r3, [r6, #0]
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f86:	f7ff f9a3 	bl	80012d0 <HAL_GetTick>
 8001f8a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	6833      	ldr	r3, [r6, #0]
 8001f8e:	05da      	lsls	r2, r3, #23
 8001f90:	d4dc      	bmi.n	8001f4c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f92:	f7ff f99d 	bl	80012d0 <HAL_GetTick>
 8001f96:	eba0 0008 	sub.w	r0, r0, r8
 8001f9a:	2864      	cmp	r0, #100	; 0x64
 8001f9c:	d9f6      	bls.n	8001f8c <HAL_RCC_OscConfig+0x204>
 8001f9e:	e735      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	b9ab      	cbnz	r3, 8001fce <HAL_RCC_OscConfig+0x246>
 8001fa2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6223      	str	r3, [r4, #32]
 8001fae:	6a23      	ldr	r3, [r4, #32]
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f98b 	bl	80012d0 <HAL_GetTick>
 8001fba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	6a23      	ldr	r3, [r4, #32]
 8001fbe:	0798      	lsls	r0, r3, #30
 8001fc0:	d5d3      	bpl.n	8001f6a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff f985 	bl	80012d0 <HAL_GetTick>
 8001fc6:	1b80      	subs	r0, r0, r6
 8001fc8:	4540      	cmp	r0, r8
 8001fca:	d9f7      	bls.n	8001fbc <HAL_RCC_OscConfig+0x234>
 8001fcc:	e71e      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	6a23      	ldr	r3, [r4, #32]
 8001fd2:	d103      	bne.n	8001fdc <HAL_RCC_OscConfig+0x254>
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6223      	str	r3, [r4, #32]
 8001fda:	e7ba      	b.n	8001f52 <HAL_RCC_OscConfig+0x1ca>
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6223      	str	r3, [r4, #32]
 8001fe2:	6a23      	ldr	r3, [r4, #32]
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	e7b6      	b.n	8001f58 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f971 	bl	80012d0 <HAL_GetTick>
 8001fee:	eba0 0008 	sub.w	r0, r0, r8
 8001ff2:	42b0      	cmp	r0, r6
 8001ff4:	d9b6      	bls.n	8001f64 <HAL_RCC_OscConfig+0x1dc>
 8001ff6:	e709      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	42420000 	.word	0x42420000
 8002000:	42420480 	.word	0x42420480
 8002004:	2000011c 	.word	0x2000011c
 8002008:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200c:	4c22      	ldr	r4, [pc, #136]	; (8002098 <HAL_RCC_OscConfig+0x310>)
 800200e:	6863      	ldr	r3, [r4, #4]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b08      	cmp	r3, #8
 8002016:	f43f aee2 	beq.w	8001dde <HAL_RCC_OscConfig+0x56>
 800201a:	2300      	movs	r3, #0
 800201c:	4e1f      	ldr	r6, [pc, #124]	; (800209c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002020:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002022:	d12b      	bne.n	800207c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002024:	f7ff f954 	bl	80012d0 <HAL_GetTick>
 8002028:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	0199      	lsls	r1, r3, #6
 800202e:	d41f      	bmi.n	8002070 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	6a2b      	ldr	r3, [r5, #32]
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002038:	6862      	ldr	r2, [r4, #4]
 800203a:	68a9      	ldr	r1, [r5, #8]
 800203c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002040:	430a      	orrs	r2, r1
 8002042:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002044:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002046:	6862      	ldr	r2, [r4, #4]
 8002048:	430b      	orrs	r3, r1
 800204a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800204e:	4313      	orrs	r3, r2
 8002050:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002052:	2301      	movs	r3, #1
 8002054:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002056:	f7ff f93b 	bl	80012d0 <HAL_GetTick>
 800205a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	019a      	lsls	r2, r3, #6
 8002060:	f53f aea7 	bmi.w	8001db2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff f934 	bl	80012d0 <HAL_GetTick>
 8002068:	1b40      	subs	r0, r0, r5
 800206a:	2802      	cmp	r0, #2
 800206c:	d9f6      	bls.n	800205c <HAL_RCC_OscConfig+0x2d4>
 800206e:	e6cd      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff f92e 	bl	80012d0 <HAL_GetTick>
 8002074:	1bc0      	subs	r0, r0, r7
 8002076:	2802      	cmp	r0, #2
 8002078:	d9d7      	bls.n	800202a <HAL_RCC_OscConfig+0x2a2>
 800207a:	e6c7      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800207c:	f7ff f928 	bl	80012d0 <HAL_GetTick>
 8002080:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	f57f ae94 	bpl.w	8001db2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff f921 	bl	80012d0 <HAL_GetTick>
 800208e:	1b40      	subs	r0, r0, r5
 8002090:	2802      	cmp	r0, #2
 8002092:	d9f6      	bls.n	8002082 <HAL_RCC_OscConfig+0x2fa>
 8002094:	e6ba      	b.n	8001e0c <HAL_RCC_OscConfig+0x84>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	42420060 	.word	0x42420060

080020a0 <HAL_RCC_MCOConfig>:
{
 80020a0:	b530      	push	{r4, r5, lr}
 80020a2:	b087      	sub	sp, #28
 80020a4:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 80020a6:	2210      	movs	r2, #16
 80020a8:	2100      	movs	r1, #0
 80020aa:	a802      	add	r0, sp, #8
 80020ac:	f002 fb72 	bl	8004794 <memset>
  gpio.Mode      = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 80020b8:	f44f 7380 	mov.w	r3, #256	; 0x100
  MCO1_CLK_ENABLE();
 80020bc:	4c0a      	ldr	r4, [pc, #40]	; (80020e8 <HAL_RCC_MCOConfig+0x48>)
  gpio.Pin       = MCO1_PIN;
 80020be:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 80020c0:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80020c2:	a902      	add	r1, sp, #8
  MCO1_CLK_ENABLE();
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	61a3      	str	r3, [r4, #24]
 80020ca:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <HAL_RCC_MCOConfig+0x4c>)
  MCO1_CLK_ENABLE();
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80020d6:	f7ff f98d 	bl	80013f4 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80020da:	6861      	ldr	r1, [r4, #4]
 80020dc:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80020e0:	4329      	orrs	r1, r5
 80020e2:	6061      	str	r1, [r4, #4]
}
 80020e4:	b007      	add	sp, #28
 80020e6:	bd30      	pop	{r4, r5, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010800 	.word	0x40010800

080020f0 <HAL_RCC_GetSysClockFreq>:
{
 80020f0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80020f4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020f6:	ac02      	add	r4, sp, #8
 80020f8:	f103 0510 	add.w	r5, r3, #16
 80020fc:	4622      	mov	r2, r4
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	3308      	adds	r3, #8
 8002104:	c203      	stmia	r2!, {r0, r1}
 8002106:	42ab      	cmp	r3, r5
 8002108:	4614      	mov	r4, r2
 800210a:	d1f7      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800210c:	2301      	movs	r3, #1
 800210e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002112:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002114:	4911      	ldr	r1, [pc, #68]	; (800215c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002116:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800211a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	f003 020c 	and.w	r2, r3, #12
 8002120:	2a08      	cmp	r2, #8
 8002122:	d117      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002124:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002128:	a806      	add	r0, sp, #24
 800212a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800212c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800212e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002132:	d50c      	bpl.n	800214e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002134:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002136:	480a      	ldr	r0, [pc, #40]	; (8002160 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002138:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800213c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800213e:	aa06      	add	r2, sp, #24
 8002140:	4413      	add	r3, r2
 8002142:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002146:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800214a:	b007      	add	sp, #28
 800214c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_RCC_GetSysClockFreq+0x74>)
 8002150:	4350      	muls	r0, r2
 8002152:	e7fa      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002156:	e7f8      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x5a>
 8002158:	08007720 	.word	0x08007720
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	003d0900 	.word	0x003d0900

08002168 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002168:	4a4d      	ldr	r2, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x138>)
{
 800216a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800216e:	6813      	ldr	r3, [r2, #0]
{
 8002170:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	428b      	cmp	r3, r1
{
 8002178:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800217a:	d328      	bcc.n	80021ce <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	682a      	ldr	r2, [r5, #0]
 800217e:	0791      	lsls	r1, r2, #30
 8002180:	d432      	bmi.n	80021e8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	07d2      	lsls	r2, r2, #31
 8002184:	d438      	bmi.n	80021f8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002186:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <HAL_RCC_ClockConfig+0x138>)
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	429e      	cmp	r6, r3
 8002190:	d373      	bcc.n	800227a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002192:	682a      	ldr	r2, [r5, #0]
 8002194:	4c43      	ldr	r4, [pc, #268]	; (80022a4 <HAL_RCC_ClockConfig+0x13c>)
 8002196:	f012 0f04 	tst.w	r2, #4
 800219a:	d179      	bne.n	8002290 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	0713      	lsls	r3, r2, #28
 800219e:	d506      	bpl.n	80021ae <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	692a      	ldr	r2, [r5, #16]
 80021a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021ac:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ae:	f7ff ff9f 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80021b2:	6863      	ldr	r3, [r4, #4]
 80021b4:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <HAL_RCC_ClockConfig+0x140>)
 80021b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	40d8      	lsrs	r0, r3
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_ClockConfig+0x144>)
 80021c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff f842 	bl	800124c <HAL_InitTick>
  return HAL_OK;
 80021c8:	2000      	movs	r0, #0
}
 80021ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	f023 0307 	bic.w	r3, r3, #7
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	4299      	cmp	r1, r3
 80021e0:	d0cc      	beq.n	800217c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80021e2:	2001      	movs	r0, #1
 80021e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	492e      	ldr	r1, [pc, #184]	; (80022a4 <HAL_RCC_ClockConfig+0x13c>)
 80021ea:	68a8      	ldr	r0, [r5, #8]
 80021ec:	684b      	ldr	r3, [r1, #4]
 80021ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f2:	4303      	orrs	r3, r0
 80021f4:	604b      	str	r3, [r1, #4]
 80021f6:	e7c4      	b.n	8002182 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f8:	686a      	ldr	r2, [r5, #4]
 80021fa:	4c2a      	ldr	r4, [pc, #168]	; (80022a4 <HAL_RCC_ClockConfig+0x13c>)
 80021fc:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002200:	d11c      	bne.n	800223c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	d0ec      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002208:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	4313      	orrs	r3, r2
 8002214:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002216:	f7ff f85b 	bl	80012d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800221c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	2b01      	cmp	r3, #1
 8002220:	d114      	bne.n	800224c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002222:	6863      	ldr	r3, [r4, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b04      	cmp	r3, #4
 800222a:	d0ac      	beq.n	8002186 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7ff f850 	bl	80012d0 <HAL_GetTick>
 8002230:	1bc0      	subs	r0, r0, r7
 8002232:	4540      	cmp	r0, r8
 8002234:	d9f5      	bls.n	8002222 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8002236:	2003      	movs	r0, #3
 8002238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223c:	2a02      	cmp	r2, #2
 800223e:	d102      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002240:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002244:	e7df      	b.n	8002206 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	f013 0f02 	tst.w	r3, #2
 800224a:	e7dc      	b.n	8002206 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224c:	2b02      	cmp	r3, #2
 800224e:	d10f      	bne.n	8002270 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	6863      	ldr	r3, [r4, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	d095      	beq.n	8002186 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f7ff f839 	bl	80012d0 <HAL_GetTick>
 800225e:	1bc0      	subs	r0, r0, r7
 8002260:	4540      	cmp	r0, r8
 8002262:	d9f5      	bls.n	8002250 <HAL_RCC_ClockConfig+0xe8>
 8002264:	e7e7      	b.n	8002236 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002266:	f7ff f833 	bl	80012d0 <HAL_GetTick>
 800226a:	1bc0      	subs	r0, r0, r7
 800226c:	4540      	cmp	r0, r8
 800226e:	d8e2      	bhi.n	8002236 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002270:	6863      	ldr	r3, [r4, #4]
 8002272:	f013 0f0c 	tst.w	r3, #12
 8002276:	d1f6      	bne.n	8002266 <HAL_RCC_ClockConfig+0xfe>
 8002278:	e785      	b.n	8002186 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	6813      	ldr	r3, [r2, #0]
 800227c:	f023 0307 	bic.w	r3, r3, #7
 8002280:	4333      	orrs	r3, r6
 8002282:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	429e      	cmp	r6, r3
 800228c:	d1a9      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x7a>
 800228e:	e780      	b.n	8002192 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	6863      	ldr	r3, [r4, #4]
 8002292:	68e9      	ldr	r1, [r5, #12]
 8002294:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002298:	430b      	orrs	r3, r1
 800229a:	6063      	str	r3, [r4, #4]
 800229c:	e77e      	b.n	800219c <HAL_RCC_ClockConfig+0x34>
 800229e:	bf00      	nop
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	080079eb 	.word	0x080079eb
 80022ac:	2000011c 	.word	0x2000011c

080022b0 <HAL_RCC_GetHCLKFreq>:
}
 80022b0:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	2000011c 	.word	0x2000011c

080022bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022bc:	6803      	ldr	r3, [r0, #0]
{
 80022be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022c2:	07d9      	lsls	r1, r3, #31
{
 80022c4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022c6:	d520      	bpl.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c8:	4c35      	ldr	r4, [pc, #212]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80022ca:	69e3      	ldr	r3, [r4, #28]
 80022cc:	00da      	lsls	r2, r3, #3
 80022ce:	d432      	bmi.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80022d0:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	69e3      	ldr	r3, [r4, #28]
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	61e3      	str	r3, [r4, #28]
 80022da:	69e3      	ldr	r3, [r4, #28]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4e2f      	ldr	r6, [pc, #188]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80022e6:	6833      	ldr	r3, [r6, #0]
 80022e8:	05db      	lsls	r3, r3, #23
 80022ea:	d526      	bpl.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ec:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022f2:	d136      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022f4:	6a23      	ldr	r3, [r4, #32]
 80022f6:	686a      	ldr	r2, [r5, #4]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	4313      	orrs	r3, r2
 80022fe:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002300:	b11f      	cbz	r7, 800230a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	69e3      	ldr	r3, [r4, #28]
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800230a:	6828      	ldr	r0, [r5, #0]
 800230c:	0783      	lsls	r3, r0, #30
 800230e:	d506      	bpl.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002310:	4a23      	ldr	r2, [pc, #140]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002312:	68a9      	ldr	r1, [r5, #8]
 8002314:	6853      	ldr	r3, [r2, #4]
 8002316:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800231a:	430b      	orrs	r3, r1
 800231c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800231e:	f010 0010 	ands.w	r0, r0, #16
 8002322:	d01b      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002324:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002326:	68e9      	ldr	r1, [r5, #12]
 8002328:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800232a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800232c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002330:	430b      	orrs	r3, r1
 8002332:	6053      	str	r3, [r2, #4]
 8002334:	e012      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2700      	movs	r7, #0
 8002338:	e7d4      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	6833      	ldr	r3, [r6, #0]
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002342:	f7fe ffc5 	bl	80012d0 <HAL_GetTick>
 8002346:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	6833      	ldr	r3, [r6, #0]
 800234a:	05d8      	lsls	r0, r3, #23
 800234c:	d4ce      	bmi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7fe ffbf 	bl	80012d0 <HAL_GetTick>
 8002352:	eba0 0008 	sub.w	r0, r0, r8
 8002356:	2864      	cmp	r0, #100	; 0x64
 8002358:	d9f6      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800235a:	2003      	movs	r0, #3
}
 800235c:	b002      	add	sp, #8
 800235e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002362:	686a      	ldr	r2, [r5, #4]
 8002364:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002368:	4293      	cmp	r3, r2
 800236a:	d0c3      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800236c:	2001      	movs	r0, #1
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002370:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002372:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002374:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800237a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800237c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800237e:	07d9      	lsls	r1, r3, #31
 8002380:	d5b8      	bpl.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002382:	f7fe ffa5 	bl	80012d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800238a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	6a23      	ldr	r3, [r4, #32]
 800238e:	079a      	lsls	r2, r3, #30
 8002390:	d4b0      	bmi.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe ff9d 	bl	80012d0 <HAL_GetTick>
 8002396:	1b80      	subs	r0, r0, r6
 8002398:	4540      	cmp	r0, r8
 800239a:	d9f7      	bls.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800239c:	e7dd      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40007000 	.word	0x40007000
 80023a8:	42420440 	.word	0x42420440

080023ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ac:	6a03      	ldr	r3, [r0, #32]
{
 80023ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80023c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80023c6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80023ca:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023cc:	4d0a      	ldr	r5, [pc, #40]	; (80023f8 <TIM_OC1_SetConfig+0x4c>)
 80023ce:	42a8      	cmp	r0, r5
 80023d0:	d10b      	bne.n	80023ea <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80023d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80023d8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023da:	698e      	ldr	r6, [r1, #24]
 80023dc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80023e2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80023e4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80023e8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ee:	684a      	ldr	r2, [r1, #4]
 80023f0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f2:	6203      	str	r3, [r0, #32]
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00

080023fc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023fc:	6a03      	ldr	r3, [r0, #32]
{
 80023fe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002404:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002406:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002408:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800240a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800240c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800240e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002412:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002414:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002416:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800241a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800241e:	4d0b      	ldr	r5, [pc, #44]	; (800244c <TIM_OC3_SetConfig+0x50>)
 8002420:	42a8      	cmp	r0, r5
 8002422:	d10d      	bne.n	8002440 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002424:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800242a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800242e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002430:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002432:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002436:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800243c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002440:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002442:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002444:	684a      	ldr	r2, [r1, #4]
 8002446:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002448:	6203      	str	r3, [r0, #32]
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	40012c00 	.word	0x40012c00

08002450 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002450:	6a03      	ldr	r3, [r0, #32]
{
 8002452:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002458:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800245c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800245e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002460:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002462:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002466:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800246a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800246c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002470:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002474:	4d06      	ldr	r5, [pc, #24]	; (8002490 <TIM_OC4_SetConfig+0x40>)
 8002476:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002478:	bf02      	ittt	eq
 800247a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800247c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002480:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002484:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002486:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002488:	684a      	ldr	r2, [r1, #4]
 800248a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248c:	6203      	str	r3, [r0, #32]
 800248e:	bd30      	pop	{r4, r5, pc}
 8002490:	40012c00 	.word	0x40012c00

08002494 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002494:	6803      	ldr	r3, [r0, #0]
}
 8002496:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
}
 80024a8:	4770      	bx	lr

080024aa <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80024aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80024ae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	f04f 0302 	mov.w	r3, #2
 80024b6:	d01c      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0x48>
 80024b8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80024ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80024be:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80024c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80024c4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80024ca:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80024ce:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80024d0:	680a      	ldr	r2, [r1, #0]
 80024d2:	2a40      	cmp	r2, #64	; 0x40
 80024d4:	d079      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x120>
 80024d6:	d819      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x62>
 80024d8:	2a10      	cmp	r2, #16
 80024da:	f000 8093 	beq.w	8002604 <HAL_TIM_ConfigClockSource+0x15a>
 80024de:	d80a      	bhi.n	80024f6 <HAL_TIM_ConfigClockSource+0x4c>
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	f000 8089 	beq.w	80025f8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80024ec:	2300      	movs	r3, #0
 80024ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80024f2:	4618      	mov	r0, r3
}
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80024f6:	2a20      	cmp	r2, #32
 80024f8:	f000 808a 	beq.w	8002610 <HAL_TIM_ConfigClockSource+0x166>
 80024fc:	2a30      	cmp	r2, #48	; 0x30
 80024fe:	d1f2      	bne.n	80024e6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002500:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002502:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002506:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800250a:	e036      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800250c:	2a70      	cmp	r2, #112	; 0x70
 800250e:	d036      	beq.n	800257e <HAL_TIM_ConfigClockSource+0xd4>
 8002510:	d81b      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0xa0>
 8002512:	2a50      	cmp	r2, #80	; 0x50
 8002514:	d042      	beq.n	800259c <HAL_TIM_ConfigClockSource+0xf2>
 8002516:	2a60      	cmp	r2, #96	; 0x60
 8002518:	d1e5      	bne.n	80024e6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800251c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002522:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002524:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002526:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002528:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800252a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800252e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002532:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002536:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800253a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800253c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800253e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002540:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002544:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002548:	e017      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800254a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800254e:	d011      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0xca>
 8002550:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002554:	d1c7      	bne.n	80024e6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002556:	688a      	ldr	r2, [r1, #8]
 8002558:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800255a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800255c:	68c9      	ldr	r1, [r1, #12]
 800255e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002560:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002564:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002568:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800256a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002572:	e002      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	e7b3      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800257e:	688a      	ldr	r2, [r1, #8]
 8002580:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002582:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002584:	68c9      	ldr	r1, [r1, #12]
 8002586:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002588:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800258c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002590:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002592:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002594:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002596:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800259a:	e7ee      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800259c:	684c      	ldr	r4, [r1, #4]
 800259e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80025a0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a8:	f025 0501 	bic.w	r5, r5, #1
 80025ac:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ae:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80025b0:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80025ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80025be:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80025c4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80025c8:	e7d7      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ca:	684c      	ldr	r4, [r1, #4]
 80025cc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80025ce:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025d0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025d2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025d6:	f025 0501 	bic.w	r5, r5, #1
 80025da:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025dc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80025de:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80025e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ea:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80025ec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80025f2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80025f6:	e7c0      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80025f8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80025fe:	f042 0207 	orr.w	r2, r2, #7
 8002602:	e7ba      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002604:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002606:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800260a:	f042 0217 	orr.w	r2, r2, #23
 800260e:	e7b4      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002610:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002612:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002616:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800261a:	e7ae      	b.n	800257a <HAL_TIM_ConfigClockSource+0xd0>

0800261c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800261e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002620:	4290      	cmp	r0, r2
 8002622:	d00a      	beq.n	800263a <TIM_Base_SetConfig+0x1e>
 8002624:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002628:	d007      	beq.n	800263a <TIM_Base_SetConfig+0x1e>
 800262a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800262e:	4290      	cmp	r0, r2
 8002630:	d003      	beq.n	800263a <TIM_Base_SetConfig+0x1e>
 8002632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002636:	4290      	cmp	r0, r2
 8002638:	d115      	bne.n	8002666 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800263a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800263c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002640:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	4a11      	ldr	r2, [pc, #68]	; (8002688 <TIM_Base_SetConfig+0x6c>)
 8002644:	4290      	cmp	r0, r2
 8002646:	d00a      	beq.n	800265e <TIM_Base_SetConfig+0x42>
 8002648:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800264c:	d007      	beq.n	800265e <TIM_Base_SetConfig+0x42>
 800264e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002652:	4290      	cmp	r0, r2
 8002654:	d003      	beq.n	800265e <TIM_Base_SetConfig+0x42>
 8002656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800265a:	4290      	cmp	r0, r2
 800265c:	d103      	bne.n	8002666 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002664:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002666:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800266c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800266e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002670:	688b      	ldr	r3, [r1, #8]
 8002672:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002674:	680b      	ldr	r3, [r1, #0]
 8002676:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <TIM_Base_SetConfig+0x6c>)
 800267a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800267c:	bf04      	itt	eq
 800267e:	690b      	ldreq	r3, [r1, #16]
 8002680:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002682:	2301      	movs	r3, #1
 8002684:	6143      	str	r3, [r0, #20]
 8002686:	4770      	bx	lr
 8002688:	40012c00 	.word	0x40012c00

0800268c <HAL_TIM_Base_Init>:
{
 800268c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800268e:	4604      	mov	r4, r0
 8002690:	b1a0      	cbz	r0, 80026bc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002692:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002696:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800269a:	b91b      	cbnz	r3, 80026a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800269c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80026a0:	f001 fd50 	bl	8004144 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80026a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80026a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ac:	1d21      	adds	r1, r4, #4
 80026ae:	f7ff ffb5 	bl	800261c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80026b2:	2301      	movs	r3, #1
  return HAL_OK;
 80026b4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80026b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80026ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026bc:	2001      	movs	r0, #1
}
 80026be:	bd10      	pop	{r4, pc}

080026c0 <HAL_TIM_PWM_Init>:
{
 80026c0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80026c2:	4604      	mov	r4, r0
 80026c4:	b1a0      	cbz	r0, 80026f0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80026c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026ce:	b91b      	cbnz	r3, 80026d8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80026d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80026d4:	f001 fd22 	bl	800411c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80026d8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026da:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80026dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e0:	1d21      	adds	r1, r4, #4
 80026e2:	f7ff ff9b 	bl	800261c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80026e6:	2301      	movs	r3, #1
  return HAL_OK;
 80026e8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80026ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80026ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
}
 80026f2:	bd10      	pop	{r4, pc}

080026f4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f4:	6a03      	ldr	r3, [r0, #32]
{
 80026f6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f8:	f023 0310 	bic.w	r3, r3, #16
 80026fc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80026fe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002700:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002702:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002704:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002706:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800270a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800270e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002710:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002714:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002718:	4d0b      	ldr	r5, [pc, #44]	; (8002748 <TIM_OC2_SetConfig+0x54>)
 800271a:	42a8      	cmp	r0, r5
 800271c:	d10d      	bne.n	800273a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800271e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002724:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002728:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800272a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800272c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002730:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002736:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800273a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800273c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800273e:	684a      	ldr	r2, [r1, #4]
 8002740:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002742:	6203      	str	r3, [r0, #32]
 8002744:	bd70      	pop	{r4, r5, r6, pc}
 8002746:	bf00      	nop
 8002748:	40012c00 	.word	0x40012c00

0800274c <HAL_TIM_PWM_ConfigChannel>:
{
 800274c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800274e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002752:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002754:	2b01      	cmp	r3, #1
 8002756:	f04f 0002 	mov.w	r0, #2
 800275a:	d025      	beq.n	80027a8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800275c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800275e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002762:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002766:	2a0c      	cmp	r2, #12
 8002768:	d818      	bhi.n	800279c <HAL_TIM_PWM_ConfigChannel+0x50>
 800276a:	e8df f002 	tbb	[pc, r2]
 800276e:	1707      	.short	0x1707
 8002770:	171e1717 	.word	0x171e1717
 8002774:	172f1717 	.word	0x172f1717
 8002778:	1717      	.short	0x1717
 800277a:	40          	.byte	0x40
 800277b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	f7ff fe15 	bl	80023ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002782:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002784:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	f042 0208 	orr.w	r2, r2, #8
 800278c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	f022 0204 	bic.w	r2, r2, #4
 8002794:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800279a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800279c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800279e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80027a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80027a8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027aa:	6820      	ldr	r0, [r4, #0]
 80027ac:	f7ff ffa2 	bl	80026f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80027b2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027ca:	e7e6      	b.n	800279a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027cc:	6820      	ldr	r0, [r4, #0]
 80027ce:	f7ff fe15 	bl	80023fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027d2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027d4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	f042 0208 	orr.w	r2, r2, #8
 80027dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	f022 0204 	bic.w	r2, r2, #4
 80027e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80027ea:	61da      	str	r2, [r3, #28]
    break;
 80027ec:	e7d6      	b.n	800279c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ee:	6820      	ldr	r0, [r4, #0]
 80027f0:	f7ff fe2e 	bl	8002450 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80027f6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002806:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800280e:	e7ec      	b.n	80027ea <HAL_TIM_PWM_ConfigChannel+0x9e>

08002810 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002810:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002812:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002814:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002816:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002818:	ea23 0304 	bic.w	r3, r3, r4
 800281c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800281e:	6a03      	ldr	r3, [r0, #32]
 8002820:	408a      	lsls	r2, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	6202      	str	r2, [r0, #32]
 8002826:	bd10      	pop	{r4, pc}

08002828 <HAL_TIM_PWM_Start>:
{
 8002828:	b510      	push	{r4, lr}
 800282a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800282c:	2201      	movs	r2, #1
 800282e:	6800      	ldr	r0, [r0, #0]
 8002830:	f7ff ffee 	bl	8002810 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	4a06      	ldr	r2, [pc, #24]	; (8002850 <HAL_TIM_PWM_Start+0x28>)
}
 8002838:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800283a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800283c:	bf02      	ittt	eq
 800283e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002840:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002844:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f042 0201 	orr.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]
}
 800284e:	bd10      	pop	{r4, pc}
 8002850:	40012c00 	.word	0x40012c00

08002854 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002854:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d01f      	beq.n	800289c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800285c:	68cb      	ldr	r3, [r1, #12]
 800285e:	688a      	ldr	r2, [r1, #8]
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002866:	684a      	ldr	r2, [r1, #4]
 8002868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800286c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800286e:	680a      	ldr	r2, [r1, #0]
 8002870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002874:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002876:	690a      	ldr	r2, [r1, #16]
 8002878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800287c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800287e:	694a      	ldr	r2, [r1, #20]
 8002880:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002884:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002886:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002888:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800288c:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800288e:	6802      	ldr	r2, [r0, #0]
 8002890:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002892:	2300      	movs	r3, #0
 8002894:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002898:	4618      	mov	r0, r3
 800289a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800289c:	2002      	movs	r0, #2
}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80028a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80028a4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	f04f 0302 	mov.w	r3, #2
 80028ac:	d018      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80028ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80028b2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80028b4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80028b6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80028b8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80028ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028be:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4322      	orrs	r2, r4
 80028c4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028cc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028da:	2300      	movs	r3, #0
 80028dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80028e0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80028e2:	bd10      	pop	{r4, pc}

080028e4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80028e4:	b084      	sub	sp, #16
 80028e6:	a801      	add	r0, sp, #4
 80028e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80028ec:	b004      	add	sp, #16
 80028ee:	2000      	movs	r0, #0
 80028f0:	4770      	bx	lr

080028f2 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80028f2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80028fc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002900:	2000      	movs	r0, #0
 8002902:	4770      	bx	lr

08002904 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002904:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002908:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800290c:	045b      	lsls	r3, r3, #17
 800290e:	0c5b      	lsrs	r3, r3, #17
 8002910:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002914:	2000      	movs	r0, #0
 8002916:	4770      	bx	lr

08002918 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002918:	2000      	movs	r0, #0
 800291a:	4770      	bx	lr

0800291c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800291c:	b084      	sub	sp, #16
 800291e:	b510      	push	{r4, lr}
 8002920:	ac03      	add	r4, sp, #12
 8002922:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8002926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800292a:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 800292c:	2301      	movs	r3, #1
 800292e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002932:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8002936:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800293a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800293e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8002942:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8002944:	b29b      	uxth	r3, r3
 8002946:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800294a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800294e:	4610      	mov	r0, r2
 8002950:	4770      	bx	lr
	...

08002954 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002954:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8002956:	78cb      	ldrb	r3, [r1, #3]
 8002958:	780a      	ldrb	r2, [r1, #0]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d80f      	bhi.n	800297e <USB_ActivateEndpoint+0x2a>
 800295e:	e8df f003 	tbb	[pc, r3]
 8002962:	6402      	.short	0x6402
 8002964:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002966:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800296a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800297a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800297e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002982:	780c      	ldrb	r4, [r1, #0]
 8002984:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002988:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 800298c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002990:	401a      	ands	r2, r3
 8002992:	432a      	orrs	r2, r5
 8002994:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002998:	7a8a      	ldrb	r2, [r1, #10]
 800299a:	780d      	ldrb	r5, [r1, #0]
 800299c:	2a00      	cmp	r2, #0
 800299e:	f040 8097 	bne.w	8002ad0 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80029a2:	784c      	ldrb	r4, [r1, #1]
 80029a4:	888a      	ldrh	r2, [r1, #4]
 80029a6:	2c00      	cmp	r4, #0
 80029a8:	d04a      	beq.n	8002a40 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80029aa:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80029ae:	0852      	lsrs	r2, r2, #1
 80029b0:	b2a4      	uxth	r4, r4
 80029b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80029b6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80029ba:	0052      	lsls	r2, r2, #1
 80029bc:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029c0:	780c      	ldrb	r4, [r1, #0]
 80029c2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80029c6:	0652      	lsls	r2, r2, #25
 80029c8:	d508      	bpl.n	80029dc <USB_ActivateEndpoint+0x88>
 80029ca:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80029ce:	4013      	ands	r3, r2
 80029d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029d8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80029dc:	780a      	ldrb	r2, [r1, #0]
 80029de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80029fe:	2000      	movs	r0, #0
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002a02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	e7b2      	b.n	800297a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002a14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a18:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002a28:	e7a7      	b.n	800297a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002a2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a2e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3e:	e79c      	b.n	800297a <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a44:	0852      	lsrs	r2, r2, #1
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3304      	adds	r3, #4
 8002a4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002a4e:	0052      	lsls	r2, r2, #1
 8002a50:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8002a54:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002a58:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a5c:	690d      	ldr	r5, [r1, #16]
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	780b      	ldrb	r3, [r1, #0]
 8002a62:	3206      	adds	r2, #6
 8002a64:	2d3e      	cmp	r5, #62	; 0x3e
 8002a66:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002a6a:	d929      	bls.n	8002ac0 <USB_ActivateEndpoint+0x16c>
 8002a6c:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8002a70:	06eb      	lsls	r3, r5, #27
 8002a72:	bf04      	itt	eq
 8002a74:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8002a78:	b29e      	uxtheq	r6, r3
 8002a7a:	4b6e      	ldr	r3, [pc, #440]	; (8002c34 <USB_ActivateEndpoint+0x2e0>)
 8002a7c:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a86:	780a      	ldrb	r2, [r1, #0]
 8002a88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a8c:	045e      	lsls	r6, r3, #17
 8002a8e:	d50b      	bpl.n	8002aa8 <USB_ActivateEndpoint+0x154>
 8002a90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a98:	051b      	lsls	r3, r3, #20
 8002a9a:	0d1b      	lsrs	r3, r3, #20
 8002a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002aa8:	780a      	ldrb	r2, [r1, #0]
 8002aaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002abe:	e798      	b.n	80029f2 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ac0:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002ac4:	07ed      	lsls	r5, r5, #31
 8002ac6:	bf44      	itt	mi
 8002ac8:	3301      	addmi	r3, #1
 8002aca:	b29b      	uxthmi	r3, r3
 8002acc:	029b      	lsls	r3, r3, #10
 8002ace:	e7d7      	b.n	8002a80 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002ad0:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8002ad4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002ad8:	0512      	lsls	r2, r2, #20
 8002ada:	0d12      	lsrs	r2, r2, #20
 8002adc:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002ae0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ae4:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002ae8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002aec:	780c      	ldrb	r4, [r1, #0]
 8002aee:	b292      	uxth	r2, r2
 8002af0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002af4:	88cc      	ldrh	r4, [r1, #6]
 8002af6:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8002afa:	0864      	lsrs	r4, r4, #1
 8002afc:	0064      	lsls	r4, r4, #1
 8002afe:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8002b02:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002b06:	780c      	ldrb	r4, [r1, #0]
 8002b08:	b292      	uxth	r2, r2
 8002b0a:	3204      	adds	r2, #4
 8002b0c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002b10:	890c      	ldrh	r4, [r1, #8]
 8002b12:	0864      	lsrs	r4, r4, #1
 8002b14:	0064      	lsls	r4, r4, #1
 8002b16:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8002b1a:	784a      	ldrb	r2, [r1, #1]
 8002b1c:	780c      	ldrb	r4, [r1, #0]
 8002b1e:	2a00      	cmp	r2, #0
 8002b20:	d147      	bne.n	8002bb2 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b22:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002b26:	0455      	lsls	r5, r2, #17
 8002b28:	d508      	bpl.n	8002b3c <USB_ActivateEndpoint+0x1e8>
 8002b2a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b3c:	780a      	ldrb	r2, [r1, #0]
 8002b3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b42:	065c      	lsls	r4, r3, #25
 8002b44:	d50b      	bpl.n	8002b5e <USB_ActivateEndpoint+0x20a>
 8002b46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4e:	051b      	lsls	r3, r3, #20
 8002b50:	0d1b      	lsrs	r3, r3, #20
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002b5e:	780a      	ldrb	r2, [r1, #0]
 8002b60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b68:	051b      	lsls	r3, r3, #20
 8002b6a:	0d1b      	lsrs	r3, r3, #20
 8002b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b78:	f248 0280 	movw	r2, #32896	; 0x8080
 8002b7c:	780c      	ldrb	r4, [r1, #0]
 8002b7e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b98:	7809      	ldrb	r1, [r1, #0]
 8002b9a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002bb0:	e725      	b.n	80029fe <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bb2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002bb6:	0452      	lsls	r2, r2, #17
 8002bb8:	d508      	bpl.n	8002bcc <USB_ActivateEndpoint+0x278>
 8002bba:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bcc:	780a      	ldrb	r2, [r1, #0]
 8002bce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bd2:	065b      	lsls	r3, r3, #25
 8002bd4:	d50b      	bpl.n	8002bee <USB_ActivateEndpoint+0x29a>
 8002bd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bde:	051b      	lsls	r3, r3, #20
 8002be0:	0d1b      	lsrs	r3, r3, #20
 8002be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002bee:	780a      	ldrb	r2, [r1, #0]
 8002bf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf8:	051b      	lsls	r3, r3, #20
 8002bfa:	0d1b      	lsrs	r3, r3, #20
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c08:	f248 0280 	movw	r2, #32896	; 0x8080
 8002c0c:	780c      	ldrb	r4, [r1, #0]
 8002c0e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c24:	7809      	ldrb	r1, [r1, #0]
 8002c26:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	e7b8      	b.n	8002ba6 <USB_ActivateEndpoint+0x252>
 8002c34:	ffff8000 	.word	0xffff8000

08002c38 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c38:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8002c3a:	7a8c      	ldrb	r4, [r1, #10]
 8002c3c:	784a      	ldrb	r2, [r1, #1]
 8002c3e:	780b      	ldrb	r3, [r1, #0]
 8002c40:	bbcc      	cbnz	r4, 8002cb6 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8002c42:	b302      	cbz	r2, 8002c86 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c44:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c48:	0652      	lsls	r2, r2, #25
 8002c4a:	d50b      	bpl.n	8002c64 <USB_DeactivateEndpoint+0x2c>
 8002c4c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002c54:	0512      	lsls	r2, r2, #20
 8002c56:	0d12      	lsrs	r2, r2, #20
 8002c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002c60:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8002c64:	780a      	ldrb	r2, [r1, #0]
 8002c66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002c82:	2000      	movs	r0, #0
 8002c84:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c8a:	0454      	lsls	r4, r2, #17
 8002c8c:	d50b      	bpl.n	8002ca6 <USB_DeactivateEndpoint+0x6e>
 8002c8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002c96:	0512      	lsls	r2, r2, #20
 8002c98:	0d12      	lsrs	r2, r2, #20
 8002c9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002c9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ca2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ca6:	780a      	ldrb	r2, [r1, #0]
 8002ca8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb4:	e7dd      	b.n	8002c72 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8002cb6:	2a00      	cmp	r2, #0
 8002cb8:	d148      	bne.n	8002d4c <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002cbe:	0452      	lsls	r2, r2, #17
 8002cc0:	d50b      	bpl.n	8002cda <USB_DeactivateEndpoint+0xa2>
 8002cc2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002cc6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002cca:	0512      	lsls	r2, r2, #20
 8002ccc:	0d12      	lsrs	r2, r2, #20
 8002cce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002cd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cd6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cda:	780a      	ldrb	r2, [r1, #0]
 8002cdc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ce0:	065c      	lsls	r4, r3, #25
 8002ce2:	d50b      	bpl.n	8002cfc <USB_DeactivateEndpoint+0xc4>
 8002ce4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ce8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cec:	051b      	lsls	r3, r3, #20
 8002cee:	0d1b      	lsrs	r3, r3, #20
 8002cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cf8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002cfc:	780a      	ldrb	r2, [r1, #0]
 8002cfe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d06:	051b      	lsls	r3, r3, #20
 8002d08:	0d1b      	lsrs	r3, r3, #20
 8002d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d12:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d16:	f248 0280 	movw	r2, #32896	; 0x8080
 8002d1a:	780c      	ldrb	r4, [r1, #0]
 8002d1c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d32:	7809      	ldrb	r1, [r1, #0]
 8002d34:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	0c1b      	lsrs	r3, r3, #16
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002d4a:	e79a      	b.n	8002c82 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d4c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002d50:	0452      	lsls	r2, r2, #17
 8002d52:	d50b      	bpl.n	8002d6c <USB_DeactivateEndpoint+0x134>
 8002d54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002d58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002d5c:	0512      	lsls	r2, r2, #20
 8002d5e:	0d12      	lsrs	r2, r2, #20
 8002d60:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d68:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d6c:	780a      	ldrb	r2, [r1, #0]
 8002d6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d72:	065b      	lsls	r3, r3, #25
 8002d74:	d50b      	bpl.n	8002d8e <USB_DeactivateEndpoint+0x156>
 8002d76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d7e:	051b      	lsls	r3, r3, #20
 8002d80:	0d1b      	lsrs	r3, r3, #20
 8002d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002d8e:	780a      	ldrb	r2, [r1, #0]
 8002d90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	0d1b      	lsrs	r3, r3, #20
 8002d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002da8:	f248 0280 	movw	r2, #32896	; 0x8080
 8002dac:	780c      	ldrb	r4, [r1, #0]
 8002dae:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002dc4:	7809      	ldrb	r1, [r1, #0]
 8002dc6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	e7b5      	b.n	8002d40 <USB_DeactivateEndpoint+0x108>

08002dd4 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002dd4:	780a      	ldrb	r2, [r1, #0]
 8002dd6:	b98a      	cbnz	r2, 8002dfc <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002dd8:	8803      	ldrh	r3, [r0, #0]
 8002dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002dea:	f083 0310 	eor.w	r3, r3, #16
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df6:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002df8:	2000      	movs	r0, #0
 8002dfa:	4770      	bx	lr
    if (ep->is_in)
 8002dfc:	784b      	ldrb	r3, [r1, #1]
 8002dfe:	b183      	cbz	r3, 8002e22 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002e00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002e20:	e7ea      	b.n	8002df8 <USB_EPSetStall+0x24>
 8002e22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e36:	e7ed      	b.n	8002e14 <USB_EPSetStall+0x40>

08002e38 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002e38:	784b      	ldrb	r3, [r1, #1]
 8002e3a:	780a      	ldrb	r2, [r1, #0]
 8002e3c:	b313      	cbz	r3, 8002e84 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e42:	065b      	lsls	r3, r3, #25
 8002e44:	d50b      	bpl.n	8002e5e <USB_EPClearStall+0x26>
 8002e46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4e:	051b      	lsls	r3, r3, #20
 8002e50:	0d1b      	lsrs	r3, r3, #20
 8002e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002e5e:	780a      	ldrb	r2, [r1, #0]
 8002e60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002e80:	2000      	movs	r0, #0
 8002e82:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e88:	045b      	lsls	r3, r3, #17
 8002e8a:	d50b      	bpl.n	8002ea4 <USB_EPClearStall+0x6c>
 8002e8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e94:	051b      	lsls	r3, r3, #20
 8002e96:	0d1b      	lsrs	r3, r3, #20
 8002e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ea4:	780a      	ldrb	r2, [r1, #0]
 8002ea6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002eba:	e7db      	b.n	8002e74 <USB_EPClearStall+0x3c>

08002ebc <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002ebc:	b911      	cbnz	r1, 8002ec4 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	4770      	bx	lr

08002ec8 <USB_DevConnect>:
 8002ec8:	2000      	movs	r0, #0
 8002eca:	4770      	bx	lr

08002ecc <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002ecc:	2000      	movs	r0, #0
 8002ece:	4770      	bx	lr

08002ed0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002ed0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002ed4:	b280      	uxth	r0, r0
 8002ed6:	4770      	bx	lr

08002ed8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002ed8:	2000      	movs	r0, #0
 8002eda:	4770      	bx	lr

08002edc <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002edc:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002ede:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002ee0:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002ee2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002ee6:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002ee8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002eec:	42a3      	cmp	r3, r4
 8002eee:	d100      	bne.n	8002ef2 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8002ef6:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002efa:	3401      	adds	r4, #1
 8002efc:	e7f6      	b.n	8002eec <USB_WritePMA+0x10>
	...

08002f00 <USB_EPStartXfer>:
{
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8002f04:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8002f06:	7849      	ldrb	r1, [r1, #1]
{
 8002f08:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002f0a:	2901      	cmp	r1, #1
 8002f0c:	6933      	ldr	r3, [r6, #16]
 8002f0e:	7ab0      	ldrb	r0, [r6, #10]
 8002f10:	d166      	bne.n	8002fe0 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002f12:	429a      	cmp	r2, r3
 8002f14:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8002f16:	bf9b      	ittet	ls
 8002f18:	2300      	movls	r3, #0
 8002f1a:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002f1c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8002f1e:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002f20:	bf88      	it	hi
 8002f22:	61b2      	strhi	r2, [r6, #24]
 8002f24:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8002f26:	bb10      	cbnz	r0, 8002f6e <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002f28:	88b2      	ldrh	r2, [r6, #4]
 8002f2a:	6971      	ldr	r1, [r6, #20]
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f7ff ffd5 	bl	8002edc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002f32:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002f36:	7832      	ldrb	r2, [r6, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f40:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002f44:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002f48:	7832      	ldrb	r2, [r6, #0]
 8002f4a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f66:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002f6e:	7832      	ldrb	r2, [r6, #0]
 8002f70:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002f74:	00d2      	lsls	r2, r2, #3
 8002f76:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f7a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002f7e:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002f80:	d01a      	beq.n	8002fb8 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f82:	3102      	adds	r1, #2
 8002f84:	440a      	add	r2, r1
 8002f86:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002f8a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8002f8e:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002f90:	6971      	ldr	r1, [r6, #20]
 8002f92:	4628      	mov	r0, r5
 8002f94:	f7ff ffa2 	bl	8002edc <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002f98:	7873      	ldrb	r3, [r6, #1]
 8002f9a:	7832      	ldrb	r2, [r6, #0]
 8002f9c:	b99b      	cbnz	r3, 8002fc6 <USB_EPStartXfer+0xc6>
 8002f9e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa6:	051b      	lsls	r3, r3, #20
 8002fa8:	0d1b      	lsrs	r3, r3, #20
 8002faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fb2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002fb6:	e7c7      	b.n	8002f48 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002fb8:	440a      	add	r2, r1
 8002fba:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002fbe:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8002fc2:	88f2      	ldrh	r2, [r6, #6]
 8002fc4:	e7e4      	b.n	8002f90 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d1be      	bne.n	8002f48 <USB_EPStartXfer+0x48>
 8002fca:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd2:	051b      	lsls	r3, r3, #20
 8002fd4:	0d1b      	lsrs	r3, r3, #20
 8002fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fde:	e7e8      	b.n	8002fb2 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002fe0:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8002fe2:	bf93      	iteet	ls
 8002fe4:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8002fe6:	1ad2      	subhi	r2, r2, r3
 8002fe8:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002fea:	61b3      	strls	r3, [r6, #24]
 8002fec:	bf98      	it	ls
 8002fee:	4613      	movls	r3, r2
 8002ff0:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8002ff2:	bb70      	cbnz	r0, 8003052 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002ff4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8002ffa:	b289      	uxth	r1, r1
 8002ffc:	f101 0106 	add.w	r1, r1, #6
 8003000:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003004:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8003008:	d918      	bls.n	800303c <USB_EPStartXfer+0x13c>
 800300a:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800300e:	06db      	lsls	r3, r3, #27
 8003010:	bf04      	itt	eq
 8003012:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8003016:	b29a      	uxtheq	r2, r3
 8003018:	4b38      	ldr	r3, [pc, #224]	; (80030fc <USB_EPStartXfer+0x1fc>)
 800301a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800301e:	b29b      	uxth	r3, r3
 8003020:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003024:	7832      	ldrb	r2, [r6, #0]
 8003026:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800302a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800303a:	e790      	b.n	8002f5e <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800303c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8003040:	07dc      	lsls	r4, r3, #31
 8003042:	bf44      	itt	mi
 8003044:	3201      	addmi	r2, #1
 8003046:	b292      	uxthmi	r2, r2
 8003048:	0292      	lsls	r2, r2, #10
 800304a:	b292      	uxth	r2, r2
 800304c:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8003050:	e7e8      	b.n	8003024 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003052:	b9b9      	cbnz	r1, 8003084 <USB_EPStartXfer+0x184>
 8003054:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003058:	2b3e      	cmp	r3, #62	; 0x3e
 800305a:	b289      	uxth	r1, r1
 800305c:	f101 0102 	add.w	r1, r1, #2
 8003060:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003064:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8003068:	d928      	bls.n	80030bc <USB_EPStartXfer+0x1bc>
 800306a:	f3c3 104f 	ubfx	r0, r3, #5, #16
 800306e:	06da      	lsls	r2, r3, #27
 8003070:	bf04      	itt	eq
 8003072:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8003076:	b290      	uxtheq	r0, r2
 8003078:	4a20      	ldr	r2, [pc, #128]	; (80030fc <USB_EPStartXfer+0x1fc>)
 800307a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800307e:	b292      	uxth	r2, r2
 8003080:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8003084:	7872      	ldrb	r2, [r6, #1]
 8003086:	7831      	ldrb	r1, [r6, #0]
 8003088:	bb5a      	cbnz	r2, 80030e2 <USB_EPStartXfer+0x1e2>
 800308a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800308e:	2b3e      	cmp	r3, #62	; 0x3e
 8003090:	b292      	uxth	r2, r2
 8003092:	f102 0206 	add.w	r2, r2, #6
 8003096:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800309a:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 800309e:	d915      	bls.n	80030cc <USB_EPStartXfer+0x1cc>
 80030a0:	f3c3 114f 	ubfx	r1, r3, #5, #16
 80030a4:	06dc      	lsls	r4, r3, #27
 80030a6:	bf04      	itt	eq
 80030a8:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80030ac:	b299      	uxtheq	r1, r3
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <USB_EPStartXfer+0x1fc>)
 80030b0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 80030ba:	e7b3      	b.n	8003024 <USB_EPStartXfer+0x124>
 80030bc:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80030c0:	07d8      	lsls	r0, r3, #31
 80030c2:	bf44      	itt	mi
 80030c4:	3201      	addmi	r2, #1
 80030c6:	b292      	uxthmi	r2, r2
 80030c8:	0292      	lsls	r2, r2, #10
 80030ca:	e7d8      	b.n	800307e <USB_EPStartXfer+0x17e>
 80030cc:	f3c3 014f 	ubfx	r1, r3, #1, #16
 80030d0:	07db      	lsls	r3, r3, #31
 80030d2:	bf44      	itt	mi
 80030d4:	3101      	addmi	r1, #1
 80030d6:	b289      	uxthmi	r1, r1
 80030d8:	0289      	lsls	r1, r1, #10
 80030da:	b289      	uxth	r1, r1
 80030dc:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 80030e0:	e7a0      	b.n	8003024 <USB_EPStartXfer+0x124>
 80030e2:	2a01      	cmp	r2, #1
 80030e4:	d19e      	bne.n	8003024 <USB_EPStartXfer+0x124>
 80030e6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80030ea:	b292      	uxth	r2, r2
 80030ec:	3202      	adds	r2, #2
 80030ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80030f2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80030f6:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80030fa:	e793      	b.n	8003024 <USB_EPStartXfer+0x124>
 80030fc:	ffff8000 	.word	0xffff8000

08003100 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003100:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8003102:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003104:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003106:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800310a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800310c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8003110:	42a3      	cmp	r3, r4
 8003112:	d100      	bne.n	8003116 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8003114:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003116:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800311a:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800311e:	3401      	adds	r4, #1
 8003120:	e7f6      	b.n	8003110 <USB_ReadPMA+0x10>

08003122 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003122:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003126:	b11b      	cbz	r3, 8003130 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8003128:	2000      	movs	r0, #0
 800312a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800312e:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8003130:	2002      	movs	r0, #2
  }
}
 8003132:	4770      	bx	lr

08003134 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003134:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8003138:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800313a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800313e:	b15b      	cbz	r3, 8003158 <USBD_CDC_EP0_RxReady+0x24>
 8003140:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003144:	28ff      	cmp	r0, #255	; 0xff
 8003146:	d007      	beq.n	8003158 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800314e:	4621      	mov	r1, r4
 8003150:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8003152:	23ff      	movs	r3, #255	; 0xff
 8003154:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8003158:	2000      	movs	r0, #0
 800315a:	bd10      	pop	{r4, pc}

0800315c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800315c:	2343      	movs	r3, #67	; 0x43
 800315e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003160:	4800      	ldr	r0, [pc, #0]	; (8003164 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003162:	4770      	bx	lr
 8003164:	20000040 	.word	0x20000040

08003168 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003168:	2343      	movs	r3, #67	; 0x43
 800316a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800316c:	4800      	ldr	r0, [pc, #0]	; (8003170 <USBD_CDC_GetHSCfgDesc+0x8>)
 800316e:	4770      	bx	lr
 8003170:	20000084 	.word	0x20000084

08003174 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003174:	2343      	movs	r3, #67	; 0x43
 8003176:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003178:	4800      	ldr	r0, [pc, #0]	; (800317c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800317a:	4770      	bx	lr
 800317c:	200000d4 	.word	0x200000d4

08003180 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003180:	230a      	movs	r3, #10
 8003182:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003184:	4800      	ldr	r0, [pc, #0]	; (8003188 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003186:	4770      	bx	lr
 8003188:	200000c8 	.word	0x200000c8

0800318c <USBD_CDC_DataOut>:
{      
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003190:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003194:	f001 fa52 	bl	800463c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8003198:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800319c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80031a0:	b14b      	cbz	r3, 80031b6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80031a2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80031a6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80031b0:	4798      	blx	r3
    return USBD_OK;
 80031b2:	2000      	movs	r0, #0
 80031b4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80031b6:	2002      	movs	r0, #2
}
 80031b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080031bc <USBD_CDC_Setup>:
{
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031be:	780f      	ldrb	r7, [r1, #0]
{
 80031c0:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031c2:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80031c6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031c8:	d023      	beq.n	8003212 <USBD_CDC_Setup+0x56>
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d119      	bne.n	8003202 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80031ce:	88ca      	ldrh	r2, [r1, #6]
 80031d0:	784b      	ldrb	r3, [r1, #1]
 80031d2:	b1c2      	cbz	r2, 8003206 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80031d4:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80031d6:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80031da:	d50b      	bpl.n	80031f4 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80031dc:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80031e0:	4618      	mov	r0, r3
 80031e2:	688f      	ldr	r7, [r1, #8]
 80031e4:	4629      	mov	r1, r5
 80031e6:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80031e8:	4629      	mov	r1, r5
 80031ea:	4630      	mov	r0, r6
 80031ec:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 80031ee:	f000 fb8a 	bl	8003906 <USBD_CtlSendData>
      break;
 80031f2:	e006      	b.n	8003202 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80031f4:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80031f8:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80031fc:	4629      	mov	r1, r5
 80031fe:	f000 fb97 	bl	8003930 <USBD_CtlPrepareRx>
}
 8003202:	2000      	movs	r0, #0
 8003204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003206:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800320a:	6884      	ldr	r4, [r0, #8]
 800320c:	4618      	mov	r0, r3
 800320e:	47a0      	blx	r4
 8003210:	e7f7      	b.n	8003202 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8003212:	784b      	ldrb	r3, [r1, #1]
 8003214:	2b0a      	cmp	r3, #10
 8003216:	d1f4      	bne.n	8003202 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003218:	2201      	movs	r2, #1
 800321a:	4901      	ldr	r1, [pc, #4]	; (8003220 <USBD_CDC_Setup+0x64>)
 800321c:	e7e7      	b.n	80031ee <USBD_CDC_Setup+0x32>
 800321e:	bf00      	nop
 8003220:	200007f0 	.word	0x200007f0

08003224 <USBD_CDC_DeInit>:
{
 8003224:	b510      	push	{r4, lr}
 8003226:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003228:	2181      	movs	r1, #129	; 0x81
 800322a:	f001 f9a3 	bl	8004574 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800322e:	2101      	movs	r1, #1
 8003230:	4620      	mov	r0, r4
 8003232:	f001 f99f 	bl	8004574 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003236:	2182      	movs	r1, #130	; 0x82
 8003238:	4620      	mov	r0, r4
 800323a:	f001 f99b 	bl	8004574 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800323e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003242:	b153      	cbz	r3, 800325a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003244:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800324c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003250:	f001 f9fe 	bl	8004650 <USBD_static_free>
    pdev->pClassData = NULL;
 8003254:	2300      	movs	r3, #0
 8003256:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800325a:	2000      	movs	r0, #0
 800325c:	bd10      	pop	{r4, pc}

0800325e <USBD_CDC_Init>:
{
 800325e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003260:	7c03      	ldrb	r3, [r0, #16]
{
 8003262:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003264:	bb7b      	cbnz	r3, 80032c6 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8003266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326a:	2202      	movs	r2, #2
 800326c:	2181      	movs	r1, #129	; 0x81
 800326e:	f001 f971 	bl	8004554 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003272:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8003276:	2202      	movs	r2, #2
 8003278:	2101      	movs	r1, #1
 800327a:	4620      	mov	r0, r4
 800327c:	f001 f96a 	bl	8004554 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003280:	2308      	movs	r3, #8
 8003282:	2203      	movs	r2, #3
 8003284:	2182      	movs	r1, #130	; 0x82
 8003286:	4620      	mov	r0, r4
 8003288:	f001 f964 	bl	8004554 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800328c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003290:	f001 f9da 	bl	8004648 <USBD_static_malloc>
 8003294:	4606      	mov	r6, r0
 8003296:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800329a:	b320      	cbz	r0, 80032e6 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 800329c:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800329e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80032a6:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80032a8:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80032ac:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80032b0:	b987      	cbnz	r7, 80032d4 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80032b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80032ba:	2101      	movs	r1, #1
 80032bc:	4620      	mov	r0, r4
 80032be:	f001 f9af 	bl	8004620 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80032c2:	4638      	mov	r0, r7
 80032c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80032c6:	2340      	movs	r3, #64	; 0x40
 80032c8:	2202      	movs	r2, #2
 80032ca:	2181      	movs	r1, #129	; 0x81
 80032cc:	f001 f942 	bl	8004554 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80032d0:	2340      	movs	r3, #64	; 0x40
 80032d2:	e7d0      	b.n	8003276 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80032da:	2101      	movs	r1, #1
 80032dc:	4620      	mov	r0, r4
 80032de:	f001 f99f 	bl	8004620 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80032e2:	4628      	mov	r0, r5
 80032e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80032e6:	2001      	movs	r0, #1
}
 80032e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032ea <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80032ea:	b119      	cbz	r1, 80032f4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80032ec:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80032f0:	2000      	movs	r0, #0
 80032f2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80032f4:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80032f6:	4770      	bx	lr

080032f8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80032f8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80032fc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80032fe:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8003302:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003306:	4770      	bx	lr

08003308 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8003308:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800330c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800330e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003312:	4770      	bx	lr

08003314 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003314:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003318:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 800331a:	b172      	cbz	r2, 800333a <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800331c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003320:	2301      	movs	r3, #1
 8003322:	b964      	cbnz	r4, 800333e <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8003324:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003328:	2181      	movs	r1, #129	; 0x81
 800332a:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800332e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003332:	f001 f967 	bl	8004604 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8003336:	4620      	mov	r0, r4
 8003338:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800333a:	2002      	movs	r0, #2
 800333c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 800333e:	4618      	mov	r0, r3
  }
}
 8003340:	bd10      	pop	{r4, pc}

08003342 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003342:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003346:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003348:	b162      	cbz	r2, 8003364 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800334a:	7c04      	ldrb	r4, [r0, #16]
 800334c:	b944      	cbnz	r4, 8003360 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800334e:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003352:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003356:	2101      	movs	r1, #1
 8003358:	f001 f962 	bl	8004620 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800335c:	2000      	movs	r0, #0
 800335e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003360:	2340      	movs	r3, #64	; 0x40
 8003362:	e7f6      	b.n	8003352 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003364:	2002      	movs	r0, #2
  }
}
 8003366:	bd10      	pop	{r4, pc}

08003368 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003368:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800336a:	b180      	cbz	r0, 800338e <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800336c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003370:	b113      	cbz	r3, 8003378 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003378:	b109      	cbz	r1, 800337e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800337a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800337e:	2301      	movs	r3, #1
  pdev->id = id;
 8003380:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003382:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003386:	f001 f88f 	bl	80044a8 <USBD_LL_Init>
  
  return USBD_OK; 
 800338a:	2000      	movs	r0, #0
 800338c:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800338e:	2002      	movs	r0, #2
}
 8003390:	bd08      	pop	{r3, pc}

08003392 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003392:	b119      	cbz	r1, 800339c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003394:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003398:	2000      	movs	r0, #0
 800339a:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800339c:	2002      	movs	r0, #2
  }
  
  return status;
}
 800339e:	4770      	bx	lr

080033a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80033a0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80033a2:	f001 f8c9 	bl	8004538 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	bd08      	pop	{r3, pc}

080033aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80033aa:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80033ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033b0:	b90b      	cbnz	r3, 80033b6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80033b2:	2002      	movs	r0, #2
 80033b4:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4798      	blx	r3
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d1f9      	bne.n	80033b2 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80033be:	bd08      	pop	{r3, pc}

080033c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80033c0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80033c2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4798      	blx	r3
  return USBD_OK;
}
 80033ca:	2000      	movs	r0, #0
 80033cc:	bd08      	pop	{r3, pc}

080033ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80033ce:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80033d0:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80033d4:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80033d6:	4628      	mov	r0, r5
 80033d8:	f000 fa65 	bl	80038a6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80033dc:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80033de:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80033e2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80033e6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80033ea:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80033ee:	f001 031f 	and.w	r3, r1, #31
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d00e      	beq.n	8003414 <USBD_LL_SetupStage+0x46>
 80033f6:	d307      	bcc.n	8003408 <USBD_LL_SetupStage+0x3a>
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d010      	beq.n	800341e <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80033fc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003400:	4620      	mov	r0, r4
 8003402:	f001 f8c5 	bl	8004590 <USBD_LL_StallEP>
    break;
 8003406:	e003      	b.n	8003410 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003408:	4629      	mov	r1, r5
 800340a:	4620      	mov	r0, r4
 800340c:	f000 f8d6 	bl	80035bc <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003410:	2000      	movs	r0, #0
 8003412:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003414:	4629      	mov	r1, r5
 8003416:	4620      	mov	r0, r4
 8003418:	f000 f9ca 	bl	80037b0 <USBD_StdItfReq>
    break;
 800341c:	e7f8      	b.n	8003410 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800341e:	4629      	mov	r1, r5
 8003420:	4620      	mov	r0, r4
 8003422:	f000 f9dd 	bl	80037e0 <USBD_StdEPReq>
    break;
 8003426:	e7f3      	b.n	8003410 <USBD_LL_SetupStage+0x42>

08003428 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800342e:	bb11      	cbnz	r1, 8003476 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003430:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003434:	2b03      	cmp	r3, #3
 8003436:	d10f      	bne.n	8003458 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003438:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800343c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003440:	4293      	cmp	r3, r2
 8003442:	d90b      	bls.n	800345c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003444:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003446:	429a      	cmp	r2, r3
 8003448:	bf28      	it	cs
 800344a:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800344c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003450:	b292      	uxth	r2, r2
 8003452:	4629      	mov	r1, r5
 8003454:	f000 fa7b 	bl	800394e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003458:	2000      	movs	r0, #0
 800345a:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800345c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	b123      	cbz	r3, 800346e <USBD_LL_DataOutStage+0x46>
 8003464:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003468:	2a03      	cmp	r2, #3
 800346a:	d100      	bne.n	800346e <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800346c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800346e:	4620      	mov	r0, r4
 8003470:	f000 fa75 	bl	800395e <USBD_CtlSendStatus>
 8003474:	e7f0      	b.n	8003458 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003476:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0eb      	beq.n	8003458 <USBD_LL_DataOutStage+0x30>
 8003480:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003484:	2a03      	cmp	r2, #3
 8003486:	d1e7      	bne.n	8003458 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003488:	4798      	blx	r3
 800348a:	e7e5      	b.n	8003458 <USBD_LL_DataOutStage+0x30>

0800348c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	4613      	mov	r3, r2
 8003490:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003492:	460e      	mov	r6, r1
 8003494:	2900      	cmp	r1, #0
 8003496:	d13d      	bne.n	8003514 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003498:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800349c:	2a02      	cmp	r2, #2
 800349e:	d10f      	bne.n	80034c0 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80034a0:	69c5      	ldr	r5, [r0, #28]
 80034a2:	6a02      	ldr	r2, [r0, #32]
 80034a4:	4295      	cmp	r5, r2
 80034a6:	d914      	bls.n	80034d2 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80034a8:	1aaa      	subs	r2, r5, r2
 80034aa:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80034ac:	4619      	mov	r1, r3
 80034ae:	b292      	uxth	r2, r2
 80034b0:	f000 fa36 	bl	8003920 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80034b4:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80034b6:	461a      	mov	r2, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	4620      	mov	r0, r4
 80034bc:	f001 f8b0 	bl	8004620 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80034c0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d102      	bne.n	80034ce <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80034ce:	2000      	movs	r0, #0
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80034d2:	6983      	ldr	r3, [r0, #24]
 80034d4:	fbb3 f5f2 	udiv	r5, r3, r2
 80034d8:	fb02 3515 	mls	r5, r2, r5, r3
 80034dc:	b965      	cbnz	r5, 80034f8 <USBD_LL_DataInStage+0x6c>
 80034de:	429a      	cmp	r2, r3
 80034e0:	d80a      	bhi.n	80034f8 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80034e2:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d206      	bcs.n	80034f8 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80034ea:	462a      	mov	r2, r5
 80034ec:	f000 fa18 	bl	8003920 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80034f0:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80034f4:	462b      	mov	r3, r5
 80034f6:	e7de      	b.n	80034b6 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80034f8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	b12b      	cbz	r3, 800350c <USBD_LL_DataInStage+0x80>
 8003500:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003504:	2a03      	cmp	r2, #3
 8003506:	d101      	bne.n	800350c <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003508:	4620      	mov	r0, r4
 800350a:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800350c:	4620      	mov	r0, r4
 800350e:	f000 fa31 	bl	8003974 <USBD_CtlReceiveStatus>
 8003512:	e7d5      	b.n	80034c0 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003514:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0d7      	beq.n	80034ce <USBD_LL_DataInStage+0x42>
 800351e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003522:	2a03      	cmp	r2, #3
 8003524:	d1d3      	bne.n	80034ce <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8003526:	4798      	blx	r3
 8003528:	e7d1      	b.n	80034ce <USBD_LL_DataInStage+0x42>

0800352a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800352a:	2200      	movs	r2, #0
{
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003530:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8003532:	4611      	mov	r1, r2
 8003534:	2340      	movs	r3, #64	; 0x40
 8003536:	f001 f80d 	bl	8004554 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800353a:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800353c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	4620      	mov	r0, r4
 8003546:	f001 f805 	bl	8004554 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800354a:	2301      	movs	r3, #1
 800354c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003550:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003554:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8003556:	b12b      	cbz	r3, 8003564 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003558:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800355c:	7921      	ldrb	r1, [r4, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4620      	mov	r0, r4
 8003562:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003564:	2000      	movs	r0, #0
 8003566:	bd38      	pop	{r3, r4, r5, pc}

08003568 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003568:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800356a:	2000      	movs	r0, #0
 800356c:	4770      	bx	lr

0800356e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800356e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003572:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003576:	2304      	movs	r3, #4
 8003578:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800357c:	2000      	movs	r0, #0
 800357e:	4770      	bx	lr

08003580 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003580:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003584:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003588:	2000      	movs	r0, #0
 800358a:	4770      	bx	lr

0800358c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800358c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800358e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003592:	2a03      	cmp	r2, #3
 8003594:	d104      	bne.n	80035a0 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003596:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	b103      	cbz	r3, 80035a0 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800359e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80035a0:	2000      	movs	r0, #0
 80035a2:	bd08      	pop	{r3, pc}

080035a4 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80035a4:	b510      	push	{r4, lr}
 80035a6:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	f000 fff1 	bl	8004590 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80035ae:	4620      	mov	r0, r4
}
 80035b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80035b4:	2100      	movs	r1, #0
 80035b6:	f000 bfeb 	b.w	8004590 <USBD_LL_StallEP>
	...

080035bc <USBD_StdDevReq>:
{
 80035bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80035be:	784b      	ldrb	r3, [r1, #1]
{
 80035c0:	4604      	mov	r4, r0
 80035c2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80035c4:	2b09      	cmp	r3, #9
 80035c6:	d879      	bhi.n	80036bc <USBD_StdDevReq+0x100>
 80035c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035cc:	00e500c9 	.word	0x00e500c9
 80035d0:	00d90078 	.word	0x00d90078
 80035d4:	006d0078 	.word	0x006d0078
 80035d8:	0078000a 	.word	0x0078000a
 80035dc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80035e0:	884b      	ldrh	r3, [r1, #2]
 80035e2:	0a1a      	lsrs	r2, r3, #8
 80035e4:	3a01      	subs	r2, #1
 80035e6:	2a06      	cmp	r2, #6
 80035e8:	d868      	bhi.n	80036bc <USBD_StdDevReq+0x100>
 80035ea:	e8df f002 	tbb	[pc, r2]
 80035ee:	1c04      	.short	0x1c04
 80035f0:	49676729 	.word	0x49676729
 80035f4:	52          	.byte	0x52
 80035f5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80035f6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80035fa:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80035fc:	f10d 0106 	add.w	r1, sp, #6
 8003600:	7c20      	ldrb	r0, [r4, #16]
 8003602:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003604:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003608:	2a00      	cmp	r2, #0
 800360a:	d067      	beq.n	80036dc <USBD_StdDevReq+0x120>
 800360c:	88eb      	ldrh	r3, [r5, #6]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d064      	beq.n	80036dc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8003612:	429a      	cmp	r2, r3
 8003614:	bf28      	it	cs
 8003616:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8003618:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 800361a:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800361e:	4620      	mov	r0, r4
 8003620:	f000 f971 	bl	8003906 <USBD_CtlSendData>
 8003624:	e05a      	b.n	80036dc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003626:	7c02      	ldrb	r2, [r0, #16]
 8003628:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800362c:	b932      	cbnz	r2, 800363c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003630:	f10d 0006 	add.w	r0, sp, #6
 8003634:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003636:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003638:	7043      	strb	r3, [r0, #1]
 800363a:	e7e3      	b.n	8003604 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	e7f7      	b.n	8003630 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b05      	cmp	r3, #5
 8003644:	d83a      	bhi.n	80036bc <USBD_StdDevReq+0x100>
 8003646:	e8df f003 	tbb	[pc, r3]
 800364a:	0703      	.short	0x0703
 800364c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003650:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	e7d1      	b.n	80035fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003658:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	e7cd      	b.n	80035fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003660:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	e7c9      	b.n	80035fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003668:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	e7c5      	b.n	80035fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003670:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	e7c1      	b.n	80035fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003678:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	e7bd      	b.n	80035fc <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003680:	7c03      	ldrb	r3, [r0, #16]
 8003682:	b9db      	cbnz	r3, 80036bc <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003684:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003688:	f10d 0006 	add.w	r0, sp, #6
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	4798      	blx	r3
 8003690:	e7b8      	b.n	8003604 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003692:	7c03      	ldrb	r3, [r0, #16]
 8003694:	b993      	cbnz	r3, 80036bc <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003696:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800369a:	f10d 0006 	add.w	r0, sp, #6
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80036a2:	2307      	movs	r3, #7
 80036a4:	e7c8      	b.n	8003638 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80036a6:	888b      	ldrh	r3, [r1, #4]
 80036a8:	b943      	cbnz	r3, 80036bc <USBD_StdDevReq+0x100>
 80036aa:	88cb      	ldrh	r3, [r1, #6]
 80036ac:	b933      	cbnz	r3, 80036bc <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80036ae:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80036b2:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80036b4:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80036b6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80036ba:	d103      	bne.n	80036c4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff ff71 	bl	80035a4 <USBD_CtlError.constprop.0>
    break;
 80036c2:	e00b      	b.n	80036dc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80036c4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80036c8:	4629      	mov	r1, r5
 80036ca:	f000 ff8d 	bl	80045e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80036ce:	4620      	mov	r0, r4
 80036d0:	f000 f945 	bl	800395e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80036d4:	b12d      	cbz	r5, 80036e2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80036d6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80036d8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80036dc:	2000      	movs	r0, #0
 80036de:	b003      	add	sp, #12
 80036e0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80036e2:	2301      	movs	r3, #1
 80036e4:	e7f8      	b.n	80036d8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80036e6:	7889      	ldrb	r1, [r1, #2]
 80036e8:	4d30      	ldr	r5, [pc, #192]	; (80037ac <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80036ea:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80036ec:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80036ee:	d8e5      	bhi.n	80036bc <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80036f0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d00c      	beq.n	8003712 <USBD_StdDevReq+0x156>
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d1df      	bne.n	80036bc <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80036fc:	b9b1      	cbnz	r1, 800372c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80036fe:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8003700:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003702:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8003706:	f7ff fe5b 	bl	80033c0 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800370a:	4620      	mov	r0, r4
 800370c:	f000 f927 	bl	800395e <USBD_CtlSendStatus>
 8003710:	e7e4      	b.n	80036dc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8003712:	2900      	cmp	r1, #0
 8003714:	d0f9      	beq.n	800370a <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8003716:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003718:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800371a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800371c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003720:	4620      	mov	r0, r4
 8003722:	f7ff fe42 	bl	80033aa <USBD_SetClassConfig>
 8003726:	2802      	cmp	r0, #2
 8003728:	d1ef      	bne.n	800370a <USBD_StdDevReq+0x14e>
 800372a:	e7c7      	b.n	80036bc <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 800372c:	6841      	ldr	r1, [r0, #4]
 800372e:	2901      	cmp	r1, #1
 8003730:	d0eb      	beq.n	800370a <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003732:	b2c9      	uxtb	r1, r1
 8003734:	f7ff fe44 	bl	80033c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003738:	7829      	ldrb	r1, [r5, #0]
 800373a:	6061      	str	r1, [r4, #4]
 800373c:	e7f0      	b.n	8003720 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800373e:	88ca      	ldrh	r2, [r1, #6]
 8003740:	2a01      	cmp	r2, #1
 8003742:	d1bb      	bne.n	80036bc <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8003744:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003748:	2b02      	cmp	r3, #2
 800374a:	d003      	beq.n	8003754 <USBD_StdDevReq+0x198>
 800374c:	2b03      	cmp	r3, #3
 800374e:	d1b5      	bne.n	80036bc <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8003750:	1d01      	adds	r1, r0, #4
 8003752:	e764      	b.n	800361e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8003754:	4601      	mov	r1, r0
 8003756:	2300      	movs	r3, #0
 8003758:	f841 3f08 	str.w	r3, [r1, #8]!
 800375c:	e75f      	b.n	800361e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800375e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003762:	3b02      	subs	r3, #2
 8003764:	2b01      	cmp	r3, #1
 8003766:	d8a9      	bhi.n	80036bc <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003768:	2301      	movs	r3, #1
 800376a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800376c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003770:	b10b      	cbz	r3, 8003776 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003772:	2303      	movs	r3, #3
 8003774:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8003776:	2202      	movs	r2, #2
 8003778:	f104 010c 	add.w	r1, r4, #12
 800377c:	e74f      	b.n	800361e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800377e:	884b      	ldrh	r3, [r1, #2]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d1ab      	bne.n	80036dc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003784:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003788:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800378c:	4629      	mov	r1, r5
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4620      	mov	r0, r4
 8003792:	4798      	blx	r3
 8003794:	e7b9      	b.n	800370a <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8003796:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800379a:	3b02      	subs	r3, #2
 800379c:	2b01      	cmp	r3, #1
 800379e:	d88d      	bhi.n	80036bc <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80037a0:	884b      	ldrh	r3, [r1, #2]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d19a      	bne.n	80036dc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80037a6:	2300      	movs	r3, #0
 80037a8:	e7ec      	b.n	8003784 <USBD_StdDevReq+0x1c8>
 80037aa:	bf00      	nop
 80037ac:	200007f1 	.word	0x200007f1

080037b0 <USBD_StdItfReq>:
{
 80037b0:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80037b2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 80037b6:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 80037b8:	2b03      	cmp	r3, #3
{
 80037ba:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80037bc:	d10d      	bne.n	80037da <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80037be:	790b      	ldrb	r3, [r1, #4]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d80a      	bhi.n	80037da <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80037c4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80037cc:	88eb      	ldrh	r3, [r5, #6]
 80037ce:	b913      	cbnz	r3, 80037d6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80037d0:	4620      	mov	r0, r4
 80037d2:	f000 f8c4 	bl	800395e <USBD_CtlSendStatus>
}
 80037d6:	2000      	movs	r0, #0
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80037da:	f7ff fee3 	bl	80035a4 <USBD_CtlError.constprop.0>
    break;
 80037de:	e7fa      	b.n	80037d6 <USBD_StdItfReq+0x26>

080037e0 <USBD_StdEPReq>:
{
 80037e0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80037e2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80037e4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80037e6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80037ea:	2a20      	cmp	r2, #32
{
 80037ec:	4604      	mov	r4, r0
 80037ee:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80037f0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80037f2:	d105      	bne.n	8003800 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80037f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4798      	blx	r3
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003800:	784a      	ldrb	r2, [r1, #1]
 8003802:	2a01      	cmp	r2, #1
 8003804:	d01c      	beq.n	8003840 <USBD_StdEPReq+0x60>
 8003806:	d32a      	bcc.n	800385e <USBD_StdEPReq+0x7e>
 8003808:	2a03      	cmp	r2, #3
 800380a:	d1f7      	bne.n	80037fc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800380c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003810:	2a02      	cmp	r2, #2
 8003812:	d040      	beq.n	8003896 <USBD_StdEPReq+0xb6>
 8003814:	2a03      	cmp	r2, #3
 8003816:	d002      	beq.n	800381e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003818:	f7ff fec4 	bl	80035a4 <USBD_CtlError.constprop.0>
      break;
 800381c:	e7ee      	b.n	80037fc <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800381e:	884a      	ldrh	r2, [r1, #2]
 8003820:	b922      	cbnz	r2, 800382c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003822:	065e      	lsls	r6, r3, #25
 8003824:	d002      	beq.n	800382c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8003826:	4619      	mov	r1, r3
 8003828:	f000 feb2 	bl	8004590 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800382c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003830:	4629      	mov	r1, r5
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4620      	mov	r0, r4
 8003836:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003838:	4620      	mov	r0, r4
 800383a:	f000 f890 	bl	800395e <USBD_CtlSendStatus>
 800383e:	e7dd      	b.n	80037fc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003840:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003844:	2a02      	cmp	r2, #2
 8003846:	d026      	beq.n	8003896 <USBD_StdEPReq+0xb6>
 8003848:	2a03      	cmp	r2, #3
 800384a:	d1e5      	bne.n	8003818 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800384c:	884a      	ldrh	r2, [r1, #2]
 800384e:	2a00      	cmp	r2, #0
 8003850:	d1d4      	bne.n	80037fc <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8003852:	0659      	lsls	r1, r3, #25
 8003854:	d0f0      	beq.n	8003838 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003856:	4619      	mov	r1, r3
 8003858:	f000 fea8 	bl	80045ac <USBD_LL_ClearStallEP>
 800385c:	e7e6      	b.n	800382c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800385e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003862:	2a02      	cmp	r2, #2
 8003864:	d017      	beq.n	8003896 <USBD_StdEPReq+0xb6>
 8003866:	2a03      	cmp	r2, #3
 8003868:	d1d6      	bne.n	8003818 <USBD_StdEPReq+0x38>
 800386a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800386e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003872:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003876:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003878:	bf14      	ite	ne
 800387a:	3514      	addne	r5, #20
 800387c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003880:	f000 fea2 	bl	80045c8 <USBD_LL_IsStallEP>
 8003884:	b168      	cbz	r0, 80038a2 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8003886:	2301      	movs	r3, #1
 8003888:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800388a:	2202      	movs	r2, #2
 800388c:	4629      	mov	r1, r5
 800388e:	4620      	mov	r0, r4
 8003890:	f000 f839 	bl	8003906 <USBD_CtlSendData>
      break;
 8003894:	e7b2      	b.n	80037fc <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8003896:	065a      	lsls	r2, r3, #25
 8003898:	d0b0      	beq.n	80037fc <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800389a:	4619      	mov	r1, r3
 800389c:	f000 fe78 	bl	8004590 <USBD_LL_StallEP>
 80038a0:	e7ac      	b.n	80037fc <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80038a2:	6028      	str	r0, [r5, #0]
 80038a4:	e7f1      	b.n	800388a <USBD_StdEPReq+0xaa>

080038a6 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80038a6:	780b      	ldrb	r3, [r1, #0]
 80038a8:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80038aa:	784b      	ldrb	r3, [r1, #1]
 80038ac:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80038ae:	78ca      	ldrb	r2, [r1, #3]
 80038b0:	788b      	ldrb	r3, [r1, #2]
 80038b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038b6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80038b8:	794a      	ldrb	r2, [r1, #5]
 80038ba:	790b      	ldrb	r3, [r1, #4]
 80038bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038c0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80038c2:	79ca      	ldrb	r2, [r1, #7]
 80038c4:	798b      	ldrb	r3, [r1, #6]
 80038c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038ca:	80c3      	strh	r3, [r0, #6]
 80038cc:	4770      	bx	lr

080038ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80038ce:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80038d0:	b188      	cbz	r0, 80038f6 <USBD_GetString+0x28>
 80038d2:	4605      	mov	r5, r0
 80038d4:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80038d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2c00      	cmp	r4, #0
 80038de:	d1f9      	bne.n	80038d4 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	3302      	adds	r3, #2
 80038e4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80038e6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80038e8:	2303      	movs	r3, #3
 80038ea:	704b      	strb	r3, [r1, #1]
 80038ec:	2302      	movs	r3, #2
 80038ee:	3801      	subs	r0, #1
    while (*desc != '\0') 
 80038f0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80038f4:	b905      	cbnz	r5, 80038f8 <USBD_GetString+0x2a>
 80038f6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	54cd      	strb	r5, [r1, r3]
 80038fc:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80038fe:	3302      	adds	r3, #2
 8003900:	b2db      	uxtb	r3, r3
 8003902:	548c      	strb	r4, [r1, r2]
 8003904:	e7f4      	b.n	80038f0 <USBD_GetString+0x22>

08003906 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003906:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003908:	2202      	movs	r2, #2
{
 800390a:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800390c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003910:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003912:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003914:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003916:	2100      	movs	r1, #0
 8003918:	f000 fe74 	bl	8004604 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800391c:	2000      	movs	r0, #0
 800391e:	bd10      	pop	{r4, pc}

08003920 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003920:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003922:	4613      	mov	r3, r2
 8003924:	460a      	mov	r2, r1
 8003926:	2100      	movs	r1, #0
 8003928:	f000 fe6c 	bl	8004604 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800392c:	2000      	movs	r0, #0
 800392e:	bd08      	pop	{r3, pc}

08003930 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003930:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003932:	2203      	movs	r2, #3
{
 8003934:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003936:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800393a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800393e:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003940:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8003944:	2100      	movs	r1, #0
 8003946:	f000 fe6b 	bl	8004620 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800394a:	2000      	movs	r0, #0
 800394c:	bd10      	pop	{r4, pc}

0800394e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800394e:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003950:	4613      	mov	r3, r2
 8003952:	460a      	mov	r2, r1
 8003954:	2100      	movs	r1, #0
 8003956:	f000 fe63 	bl	8004620 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800395a:	2000      	movs	r0, #0
 800395c:	bd08      	pop	{r3, pc}

0800395e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800395e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003960:	2304      	movs	r3, #4
 8003962:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003966:	2300      	movs	r3, #0
 8003968:	461a      	mov	r2, r3
 800396a:	4619      	mov	r1, r3
 800396c:	f000 fe4a 	bl	8004604 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003970:	2000      	movs	r0, #0
 8003972:	bd08      	pop	{r3, pc}

08003974 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003974:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003976:	2305      	movs	r3, #5
 8003978:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800397c:	2300      	movs	r3, #0
 800397e:	461a      	mov	r2, r3
 8003980:	4619      	mov	r1, r3
 8003982:	f000 fe4d 	bl	8004620 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003986:	2000      	movs	r0, #0
 8003988:	bd08      	pop	{r3, pc}
	...

0800398c <TIM2_IRQHandler>:
	inputPWM
}current_mode;

void TIM2_IRQHandler(void)
{
  if (current_mode == inputfrequency)
 800398c:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <TIM2_IRQHandler+0x74>)
{
 800398e:	b510      	push	{r4, lr}
  if (current_mode == inputfrequency)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d12a      	bne.n	80039ec <TIM2_IRQHandler+0x60>
    {
      TIM4->CR1 &= ~ TIM_CR1_CEN; //Disable timers
      TIM2->CR1 &= ~ TIM_CR1_CEN;
 8003996:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      TIM4->CR1 &= ~ TIM_CR1_CEN; //Disable timers
 800399a:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <TIM2_IRQHandler+0x78>)

      if (TIM4->SR & (uint16_t) 0x0001) //if timers reached TOP at the same time
	{
	  k++;
	}
      freq = (k * 0xffff + (TIM4->CNT)) * timprescaler;
 800399c:	481a      	ldr	r0, [pc, #104]	; (8003a08 <TIM2_IRQHandler+0x7c>)
      TIM4->CR1 &= ~ TIM_CR1_CEN; //Disable timers
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
      TIM2->CR1 &= ~ TIM_CR1_CEN;
 80039a6:	680a      	ldr	r2, [r1, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	600a      	str	r2, [r1, #0]
      if (TIM4->SR & (uint16_t) 0x0001) //if timers reached TOP at the same time
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	4916      	ldr	r1, [pc, #88]	; (8003a0c <TIM2_IRQHandler+0x80>)
 80039b2:	f012 0f01 	tst.w	r2, #1
	  k++;
 80039b6:	bf1e      	ittt	ne
 80039b8:	680a      	ldrne	r2, [r1, #0]
 80039ba:	3201      	addne	r2, #1
 80039bc:	600a      	strne	r2, [r1, #0]
      freq = (k * 0xffff + (TIM4->CNT)) * timprescaler;
 80039be:	680a      	ldr	r2, [r1, #0]
 80039c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80039c2:	ebc2 4202 	rsb	r2, r2, r2, lsl #16
 80039c6:	6800      	ldr	r0, [r0, #0]
 80039c8:	4422      	add	r2, r4
 80039ca:	4342      	muls	r2, r0
 80039cc:	4810      	ldr	r0, [pc, #64]	; (8003a10 <TIM2_IRQHandler+0x84>)
 80039ce:	6002      	str	r2, [r0, #0]
      TIM2->CNT = 0;
 80039d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039d4:	2000      	movs	r0, #0
 80039d6:	6250      	str	r0, [r2, #36]	; 0x24
      TIM4->CNT = 0;
 80039d8:	6258      	str	r0, [r3, #36]	; 0x24
      k = 0;
 80039da:	6008      	str	r0, [r1, #0]

      TIM2->CR1 |= TIM_CR1_CEN;
 80039dc:	6811      	ldr	r1, [r2, #0]
 80039de:	f041 0101 	orr.w	r1, r1, #1
 80039e2:	6011      	str	r1, [r2, #0]
      TIM4->CR1 |= TIM_CR1_CEN;
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
    }
  tim_interrupt = 1;
 80039ec:	2201      	movs	r2, #1
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <TIM2_IRQHandler+0x88>)
 80039f0:	601a      	str	r2, [r3, #0]
  TIM2->SR &= ~(uint16_t) 0x0001; //clear interrupt flag
 80039f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039f6:	6913      	ldr	r3, [r2, #16]
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6113      	str	r3, [r2, #16]
 80039fe:	bd10      	pop	{r4, pc}
 8003a00:	20000aac 	.word	0x20000aac
 8003a04:	40000800 	.word	0x40000800
 8003a08:	20000118 	.word	0x20000118
 8003a0c:	20000804 	.word	0x20000804
 8003a10:	20000800 	.word	0x20000800
 8003a14:	20000808 	.word	0x20000808

08003a18 <TIM4_IRQHandler>:
}

void TIM4_IRQHandler(void)
{
  TIM4->SR &= ~(uint16_t) 0x0001; //clear interrupt flag
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <TIM4_IRQHandler+0x14>)
 8003a1a:	6913      	ldr	r3, [r2, #16]
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	6113      	str	r3, [r2, #16]
  k++;
 8003a22:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <TIM4_IRQHandler+0x18>)
 8003a24:	6813      	ldr	r3, [r2, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4770      	bx	lr
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	20000804 	.word	0x20000804

08003a34 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  EXTI->PR = EXTI_PR_PIF0; //clear interrupt
 8003a34:	2301      	movs	r3, #1
 8003a36:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <EXTI0_IRQHandler+0xc>)
 8003a38:	6153      	str	r3, [r2, #20]
  USBpacketreceived = 1;
 8003a3a:	4a02      	ldr	r2, [pc, #8]	; (8003a44 <EXTI0_IRQHandler+0x10>)
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4770      	bx	lr
 8003a40:	40010400 	.word	0x40010400
 8003a44:	200007fc 	.word	0x200007fc

08003a48 <tim_init_PWM>:
}

void tim_init_PWM(void)
{
  current_mode=inputPWM;
 8003a48:	2101      	movs	r1, #1
  /*clean registers*/
  TIM4->SMCR =0;
 8003a4a:	2200      	movs	r2, #0
  current_mode=inputPWM;
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <tim_init_PWM+0x54>)
 8003a4e:	7019      	strb	r1, [r3, #0]
  TIM4->SMCR =0;
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <tim_init_PWM+0x58>)
 8003a52:	609a      	str	r2, [r3, #8]
  TIM4->CCMR1 =0;
 8003a54:	619a      	str	r2, [r3, #24]
  TIM4->CCER =0;
 8003a56:	621a      	str	r2, [r3, #32]

  TIM4->PSC=timprescaler-1;
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <tim_init_PWM+0x5c>)
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->CCMR1 |=TIM_CCMR1_CC2S_0;//IC2 mapped on TI2
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a66:	619a      	str	r2, [r3, #24]
  TIM4->CCMR1 |=TIM_CCMR1_CC1S_1;//IC1 mapped on TI2
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	f042 0202 	orr.w	r2, r2, #2
 8003a6e:	619a      	str	r2, [r3, #24]
  TIM4->CCER  |=TIM_CCER_CC2P;//falling edge IC2
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	f042 0220 	orr.w	r2, r2, #32
 8003a76:	621a      	str	r2, [r3, #32]
  TIM4->CCER  &=~TIM_CCER_CC1P;//rising edge IC1
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	f022 0202 	bic.w	r2, r2, #2
 8003a7e:	621a      	str	r2, [r3, #32]
  TIM4->SMCR |=TIM_SMCR_TS_1 | TIM_SMCR_TS_2 | TIM_SMCR_SMS_2;//slave mode-rest,Filtered Timer Input 2
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8003a86:	609a      	str	r2, [r3, #8]
  TIM4->CCER |=TIM_CCER_CC1E | TIM_CCER_CC2E;//Enable capture
 8003a88:	6a1a      	ldr	r2, [r3, #32]
 8003a8a:	f042 0211 	orr.w	r2, r2, #17
 8003a8e:	621a      	str	r2, [r3, #32]
  /*disable interrupt*/
  TIM4->DIER &=~TIM_DIER_UIE;
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	60da      	str	r2, [r3, #12]
  TIM4->EGR = TIM_EGR_UG;//Generate an update event to reload the Prescaler
 8003a98:	6159      	str	r1, [r3, #20]
 8003a9a:	4770      	bx	lr
 8003a9c:	20000aac 	.word	0x20000aac
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	20000118 	.word	0x20000118

08003aa8 <tim_init_freq>:
}

void tim_init_freq(void)
{
  current_mode=inputfrequency;
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <tim_init_freq+0x3c>)
 8003aac:	701a      	strb	r2, [r3, #0]
  /*clean registers*/
  TIM4->SMCR =0;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <tim_init_freq+0x40>)
 8003ab0:	609a      	str	r2, [r3, #8]
  TIM4->CCMR1 =0;
 8003ab2:	619a      	str	r2, [r3, #24]
  TIM4->CCER =0;
 8003ab4:	621a      	str	r2, [r3, #32]

  TIM4->PSC=timprescaler-1;
 8003ab6:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <tim_init_freq+0x44>)
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	3a01      	subs	r2, #1
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->CCMR1 |=TIM_CCMR1_CC2S_0;//IC2 mapped on TI2
 8003abe:	699a      	ldr	r2, [r3, #24]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac4:	619a      	str	r2, [r3, #24]
  TIM4->SMCR |=TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;//external clock mode 1
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	f042 0207 	orr.w	r2, r2, #7
 8003acc:	609a      	str	r2, [r3, #8]
  TIM4->SMCR |=TIM_SMCR_TS_2 | TIM_SMCR_TS_1;//Filtered input 2
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003ad4:	609a      	str	r2, [r3, #8]
  /*enable interrupt*/
  TIM4->DIER |=TIM_DIER_UIE;
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	60da      	str	r2, [r3, #12]
  TIM4->EGR = TIM_EGR_UG;//Generate an update event to reload the Prescaler
 8003ade:	2201      	movs	r2, #1
 8003ae0:	615a      	str	r2, [r3, #20]
 8003ae2:	4770      	bx	lr
 8003ae4:	20000aac 	.word	0x20000aac
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	20000118 	.word	0x20000118

08003af0 <ProcessCmd>:
}

void ProcessCmd (void)
{
 8003af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t buf_len;
  uint8_t *buff = NULL; //pointer to received data
  uint8_t temp_buf[50]; //temporary buffer of received data
  int8_t index = 0;

  USBpacketreceived = 0;
 8003af4:	2400      	movs	r4, #0
 8003af6:	4d4f      	ldr	r5, [pc, #316]	; (8003c34 <ProcessCmd+0x144>)
{
 8003af8:	b08e      	sub	sp, #56	; 0x38
  USBsend ("\n\n\r----Entered Settings mode----\n\r"
 8003afa:	484f      	ldr	r0, [pc, #316]	; (8003c38 <ProcessCmd+0x148>)
  USBpacketreceived = 0;
 8003afc:	602c      	str	r4, [r5, #0]
  USBsend ("\n\n\r----Entered Settings mode----\n\r"
 8003afe:	f000 fc3b 	bl	8004378 <USBsend>
	   "Syntax: \r\n"
	   "command=value;\n\r"
	   "Type help, for available commands or exit to return.\n\r");
  USBsend ("\n\rwaiting for command>>");
 8003b02:	484e      	ldr	r0, [pc, #312]	; (8003c3c <ProcessCmd+0x14c>)
 8003b04:	f000 fc38 	bl	8004378 <USBsend>
	  temp_buf[index] = *buff;
	  CDC_Transmit_FS (buff, buf_len);
	  if (temp_buf[index] == '\r' || temp_buf[index] == '\n') //pressed enter
	    {

	      if (strncmp (temp_buf, "exit", 4) == 0) //typed exit
 8003b08:	4f4d      	ldr	r7, [pc, #308]	; (8003c40 <ProcessCmd+0x150>)
		{
		  return;
		}
	      else if (strncmp (temp_buf, "help", 4) == 0) //typed exit
 8003b0a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8003c64 <ProcessCmd+0x174>
		}
		  for (; index >= 0; index--) //clear buffer and set index=0
		    {
		      temp_buf[index] = 0;
		    }
	      USBsend ("\n\rwaiting for command>>");
 8003b0e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003c3c <ProcessCmd+0x14c>
      if (USBpacketreceived == 1)
 8003b12:	682b      	ldr	r3, [r5, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d1fc      	bne.n	8003b12 <ProcessCmd+0x22>
	  USBpacketreceived = 0;
 8003b18:	2300      	movs	r3, #0
	  buff = USBgetdata (&buf_len);
 8003b1a:	4668      	mov	r0, sp
	  USBpacketreceived = 0;
 8003b1c:	602b      	str	r3, [r5, #0]
	  buff = USBgetdata (&buf_len);
 8003b1e:	f000 fc0d 	bl	800433c <USBgetdata>
	  temp_buf[index] = *buff;
 8003b22:	aa0e      	add	r2, sp, #56	; 0x38
 8003b24:	7803      	ldrb	r3, [r0, #0]
 8003b26:	1916      	adds	r6, r2, r4
	  CDC_Transmit_FS (buff, buf_len);
 8003b28:	f8bd 1000 	ldrh.w	r1, [sp]
	  temp_buf[index] = *buff;
 8003b2c:	f806 3c34 	strb.w	r3, [r6, #-52]
	  CDC_Transmit_FS (buff, buf_len);
 8003b30:	f000 fc0e 	bl	8004350 <CDC_Transmit_FS>
	  if (temp_buf[index] == '\r' || temp_buf[index] == '\n') //pressed enter
 8003b34:	f816 3c34 	ldrb.w	r3, [r6, #-52]
 8003b38:	2b0d      	cmp	r3, #13
 8003b3a:	d001      	beq.n	8003b40 <ProcessCmd+0x50>
 8003b3c:	2b0a      	cmp	r3, #10
 8003b3e:	d12e      	bne.n	8003b9e <ProcessCmd+0xae>
	      if (strncmp (temp_buf, "exit", 4) == 0) //typed exit
 8003b40:	ae01      	add	r6, sp, #4
 8003b42:	2204      	movs	r2, #4
 8003b44:	4639      	mov	r1, r7
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 fe50 	bl	80047ec <strncmp>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d06e      	beq.n	8003c2e <ProcessCmd+0x13e>
	      else if (strncmp (temp_buf, "help", 4) == 0) //typed exit
 8003b50:	2204      	movs	r2, #4
 8003b52:	4641      	mov	r1, r8
 8003b54:	4630      	mov	r0, r6
 8003b56:	f000 fe49 	bl	80047ec <strncmp>
 8003b5a:	b918      	cbnz	r0, 8003b64 <ProcessCmd+0x74>
		  USBsend("\r\n---Possible commands---"
 8003b5c:	4839      	ldr	r0, [pc, #228]	; (8003c44 <ProcessCmd+0x154>)
		  USBsend ("\r\n\n***wrong command!!!***\r\nTry again");
 8003b5e:	f000 fc0b 	bl	8004378 <USBsend>
 8003b62:	e014      	b.n	8003b8e <ProcessCmd+0x9e>
	      else if (strncmp (temp_buf, "PWM=", 4) == 0) //typed exit
 8003b64:	2204      	movs	r2, #4
 8003b66:	4938      	ldr	r1, [pc, #224]	; (8003c48 <ProcessCmd+0x158>)
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f000 fe3f 	bl	80047ec <strncmp>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d145      	bne.n	8003bfe <ProcessCmd+0x10e>
		  timprescaler=atoi(&temp_buf[4]);
 8003b72:	a802      	add	r0, sp, #8
 8003b74:	f000 fde5 	bl	8004742 <atoi>
 8003b78:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <ProcessCmd+0x15c>)
 8003b7a:	6018      	str	r0, [r3, #0]
		  switch (timprescaler)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	2a02      	cmp	r2, #2
 8003b80:	d032      	beq.n	8003be8 <ProcessCmd+0xf8>
 8003b82:	2a03      	cmp	r2, #3
 8003b84:	d033      	beq.n	8003bee <ProcessCmd+0xfe>
 8003b86:	2a01      	cmp	r2, #1
 8003b88:	d133      	bne.n	8003bf2 <ProcessCmd+0x102>
		  tim_init_PWM();
 8003b8a:	f7ff ff5d 	bl	8003a48 <tim_init_PWM>
 8003b8e:	4623      	mov	r3, r4
		      temp_buf[index] = 0;
 8003b90:	2200      	movs	r2, #0
 8003b92:	b25c      	sxtb	r4, r3
		  for (; index >= 0; index--) //clear buffer and set index=0
 8003b94:	2c00      	cmp	r4, #0
 8003b96:	da43      	bge.n	8003c20 <ProcessCmd+0x130>
	      USBsend ("\n\rwaiting for command>>");
 8003b98:	4648      	mov	r0, r9
 8003b9a:	f000 fbed 	bl	8004378 <USBsend>
	    }
	  if(temp_buf[index]==8)//backspace pressed
 8003b9e:	ab0e      	add	r3, sp, #56	; 0x38
 8003ba0:	4423      	add	r3, r4
 8003ba2:	f813 ac34 	ldrb.w	sl, [r3, #-52]
 8003ba6:	f1ba 0f08 	cmp.w	sl, #8
 8003baa:	d112      	bne.n	8003bd2 <ProcessCmd+0xe2>
	    {
	      temp_buf[index]=0;
 8003bac:	2600      	movs	r6, #0
 8003bae:	f803 6c34 	strb.w	r6, [r3, #-52]
	      if(index!=0)
 8003bb2:	2c00      	cmp	r4, #0
 8003bb4:	d037      	beq.n	8003c26 <ProcessCmd+0x136>
		{
		  USBsend(" ");
 8003bb6:	4826      	ldr	r0, [pc, #152]	; (8003c50 <ProcessCmd+0x160>)
 8003bb8:	f000 fbde 	bl	8004378 <USBsend>
		  USBsend_raw(8);
		  index--;
 8003bbc:	3c01      	subs	r4, #1
		  USBsend_raw(8);
 8003bbe:	4650      	mov	r0, sl
 8003bc0:	f000 fc06 	bl	80043d0 <USBsend_raw>
		  index--;
 8003bc4:	b264      	sxtb	r4, r4
		  temp_buf[index]=0;
 8003bc6:	ab0e      	add	r3, sp, #56	; 0x38
 8003bc8:	4423      	add	r3, r4
 8003bca:	f803 6c34 	strb.w	r6, [r3, #-52]
		}
	      else
		{
		  USBsend("\033[1C");//move cursor forward
		}
	      index--;//because in next step index is increased whenever new character arrived or just backspaced.
 8003bce:	3c01      	subs	r4, #1
 8003bd0:	b264      	sxtb	r4, r4
	    }
	  index++;
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	b264      	sxtb	r4, r4
	  if(index>45)//safety feature
 8003bd6:	2c2d      	cmp	r4, #45	; 0x2d
 8003bd8:	dd9b      	ble.n	8003b12 <ProcessCmd+0x22>
	    {
	      temp_buf[index]=0;
 8003bda:	ab0e      	add	r3, sp, #56	; 0x38
 8003bdc:	441c      	add	r4, r3
 8003bde:	2300      	movs	r3, #0
 8003be0:	f804 3c34 	strb.w	r3, [r4, #-52]
	      index=45;
 8003be4:	242d      	movs	r4, #45	; 0x2d
 8003be6:	e794      	b.n	8003b12 <ProcessCmd+0x22>
		      timprescaler=30;
 8003be8:	221e      	movs	r2, #30
		      timprescaler=50;
 8003bea:	601a      	str	r2, [r3, #0]
		      break;
 8003bec:	e7cd      	b.n	8003b8a <ProcessCmd+0x9a>
		      timprescaler=50;
 8003bee:	2232      	movs	r2, #50	; 0x32
 8003bf0:	e7fb      	b.n	8003bea <ProcessCmd+0xfa>
		      timprescaler=1;
 8003bf2:	2201      	movs	r2, #1
		      USBsend("\r\nWrong value!");
 8003bf4:	4817      	ldr	r0, [pc, #92]	; (8003c54 <ProcessCmd+0x164>)
		      timprescaler=1;
 8003bf6:	601a      	str	r2, [r3, #0]
		      USBsend("\r\nWrong value!");
 8003bf8:	f000 fbbe 	bl	8004378 <USBsend>
		      break;
 8003bfc:	e7c5      	b.n	8003b8a <ProcessCmd+0x9a>
	      else if (strncmp (temp_buf, "freq=", 5) == 0) //typed exit
 8003bfe:	2205      	movs	r2, #5
 8003c00:	4915      	ldr	r1, [pc, #84]	; (8003c58 <ProcessCmd+0x168>)
 8003c02:	4630      	mov	r0, r6
 8003c04:	f000 fdf2 	bl	80047ec <strncmp>
 8003c08:	b940      	cbnz	r0, 8003c1c <ProcessCmd+0x12c>
		  timprescaler=atoi(&temp_buf[5]);
 8003c0a:	f10d 0009 	add.w	r0, sp, #9
 8003c0e:	f000 fd98 	bl	8004742 <atoi>
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <ProcessCmd+0x15c>)
 8003c14:	6018      	str	r0, [r3, #0]
		  tim_init_freq();
 8003c16:	f7ff ff47 	bl	8003aa8 <tim_init_freq>
 8003c1a:	e7b8      	b.n	8003b8e <ProcessCmd+0x9e>
		  USBsend ("\r\n\n***wrong command!!!***\r\nTry again");
 8003c1c:	480f      	ldr	r0, [pc, #60]	; (8003c5c <ProcessCmd+0x16c>)
 8003c1e:	e79e      	b.n	8003b5e <ProcessCmd+0x6e>
		      temp_buf[index] = 0;
 8003c20:	54f2      	strb	r2, [r6, r3]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	e7b5      	b.n	8003b92 <ProcessCmd+0xa2>
		  USBsend("\033[1C");//move cursor forward
 8003c26:	480e      	ldr	r0, [pc, #56]	; (8003c60 <ProcessCmd+0x170>)
 8003c28:	f000 fba6 	bl	8004378 <USBsend>
 8003c2c:	e7cf      	b.n	8003bce <ProcessCmd+0xde>
	    }
	}
    }
}
 8003c2e:	b00e      	add	sp, #56	; 0x38
 8003c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c34:	200007fc 	.word	0x200007fc
 8003c38:	08007730 	.word	0x08007730
 8003c3c:	080077a3 	.word	0x080077a3
 8003c40:	080077bb 	.word	0x080077bb
 8003c44:	080077c5 	.word	0x080077c5
 8003c48:	08007913 	.word	0x08007913
 8003c4c:	20000118 	.word	0x20000118
 8003c50:	08007952 	.word	0x08007952
 8003c54:	08007918 	.word	0x08007918
 8003c58:	08007927 	.word	0x08007927
 8003c5c:	0800792d 	.word	0x0800792d
 8003c60:	08007954 	.word	0x08007954
 8003c64:	080077c0 	.word	0x080077c0

08003c68 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c68:	2301      	movs	r3, #1
{
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c6e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = 8;
 8003c74:	2208      	movs	r2, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c76:	930b      	str	r3, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c78:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c7a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c80:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = 8;
 8003c82:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c84:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c86:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c88:	f7fe f87e 	bl	8001d88 <HAL_RCC_OscConfig>
 8003c8c:	b100      	cbz	r0, 8003c90 <SystemClock_Config+0x28>
 8003c8e:	e7fe      	b.n	8003c8e <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c90:	230f      	movs	r3, #15
 8003c92:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c98:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c9a:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ca0:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ca2:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ca4:	f7fe fa60 	bl	8002168 <HAL_RCC_ClockConfig>
 8003ca8:	b100      	cbz	r0, 8003cac <SystemClock_Config+0x44>
 8003caa:	e7fe      	b.n	8003caa <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003cac:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003cae:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb0:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003cb2:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb4:	f7fe fb02 	bl	80022bc <HAL_RCCEx_PeriphCLKConfig>
 8003cb8:	4604      	mov	r4, r0
 8003cba:	b100      	cbz	r0, 8003cbe <SystemClock_Config+0x56>
 8003cbc:	e7fe      	b.n	8003cbc <SystemClock_Config+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8003cc4:	f7fe f9ec 	bl	80020a0 <HAL_RCC_MCOConfig>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003cc8:	f7fe faf2 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 8003ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cd4:	f7fd fb66 	bl	80013a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003cd8:	2004      	movs	r0, #4
 8003cda:	f7fd fb79 	bl	80013d0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8003cde:	4622      	mov	r2, r4
 8003ce0:	2103      	movs	r1, #3
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce6:	f7fd fb1d 	bl	8001324 <HAL_NVIC_SetPriority>
}
 8003cea:	b014      	add	sp, #80	; 0x50
 8003cec:	bd10      	pop	{r4, pc}
	...

08003cf0 <main>:
{
 8003cf0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf4:	4d6a      	ldr	r5, [pc, #424]	; (8003ea0 <main+0x1b0>)
{
 8003cf6:	b097      	sub	sp, #92	; 0x5c
  HAL_Init ();
 8003cf8:	f7fd facc 	bl	8001294 <HAL_Init>
  SystemClock_Config ();
 8003cfc:	f7ff ffb4 	bl	8003c68 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d00:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d02:	2703      	movs	r7, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	61ab      	str	r3, [r5, #24]
 8003d0a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0c:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d18:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_7;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 8003d1a:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	61ab      	str	r3, [r5, #24]
 8003d24:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d26:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d30:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d34:	a90f      	add	r1, sp, #60	; 0x3c
 8003d36:	485b      	ldr	r0, [pc, #364]	; (8003ea4 <main+0x1b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d38:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d3e:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d40:	f7fd fb58 	bl	80013f4 <HAL_GPIO_Init>
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d44:	4858      	ldr	r0, [pc, #352]	; (8003ea8 <main+0x1b8>)
 8003d46:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d48:	960f      	str	r6, [sp, #60]	; 0x3c
   GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 8003d4a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d4e:	9712      	str	r7, [sp, #72]	; 0x48
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d50:	f7fd fb50 	bl	80013f4 <HAL_GPIO_Init>
  htim2.Init.Prescaler = 48000-1;
 8003d54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d58:	f64b 337f 	movw	r3, #47999	; 0xbb7f
  htim2.Instance = TIM2;
 8003d5c:	4c53      	ldr	r4, [pc, #332]	; (8003eac <main+0x1bc>)
  htim2.Init.Prescaler = 48000-1;
 8003d5e:	e884 0009 	stmia.w	r4, {r0, r3}
  htim2.Init.Period = 1500-1;
 8003d62:	f240 53db 	movw	r3, #1499	; 0x5db
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d66:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d68:	f8c4 9008 	str.w	r9, [r4, #8]
  htim2.Init.Period = 1500-1;
 8003d6c:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d6e:	f8c4 9010 	str.w	r9, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d72:	f8c4 9018 	str.w	r9, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d76:	f7fe fc89 	bl	800268c <HAL_TIM_Base_Init>
 8003d7a:	b100      	cbz	r0, 8003d7e <main+0x8e>
 8003d7c:	e7fe      	b.n	8003d7c <main+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d7e:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d82:	a90f      	add	r1, sp, #60	; 0x3c
 8003d84:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d86:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d8a:	f7fe fb8e 	bl	80024aa <HAL_TIM_ConfigClockSource>
 8003d8e:	b100      	cbz	r0, 8003d92 <main+0xa2>
 8003d90:	e7fe      	b.n	8003d90 <main+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d92:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d94:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d96:	a908      	add	r1, sp, #32
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7fe fd81 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d9e:	4681      	mov	r9, r0
 8003da0:	b100      	cbz	r0, 8003da4 <main+0xb4>
 8003da2:	e7fe      	b.n	8003da2 <main+0xb2>
  MX_USB_DEVICE_Init ();
 8003da4:	f000 fa74 	bl	8004290 <MX_USB_DEVICE_Init>
	  htim3.Init.Prescaler = 72-1;
 8003da8:	2347      	movs	r3, #71	; 0x47
	  htim3.Instance = TIM3;
 8003daa:	4c41      	ldr	r4, [pc, #260]	; (8003eb0 <main+0x1c0>)
	  htim3.Init.Prescaler = 72-1;
 8003dac:	4941      	ldr	r1, [pc, #260]	; (8003eb4 <main+0x1c4>)
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dae:	4620      	mov	r0, r4
	  htim3.Init.Prescaler = 72-1;
 8003db0:	e884 000a 	stmia.w	r4, {r1, r3}
	  htim3.Init.Period = 1000-1;
 8003db4:	f240 33e7 	movw	r3, #999	; 0x3e7
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003db8:	f8c4 9008 	str.w	r9, [r4, #8]
	  htim3.Init.Period = 1000-1;
 8003dbc:	60e3      	str	r3, [r4, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dbe:	f8c4 9010 	str.w	r9, [r4, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dc2:	61a6      	str	r6, [r4, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dc4:	f7fe fc62 	bl	800268c <HAL_TIM_Base_Init>
 8003dc8:	b100      	cbz	r0, 8003dcc <main+0xdc>
 8003dca:	e7fe      	b.n	8003dca <main+0xda>
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dcc:	a908      	add	r1, sp, #32
 8003dce:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dd0:	f8cd a020 	str.w	sl, [sp, #32]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dd4:	f7fe fb69 	bl	80024aa <HAL_TIM_ConfigClockSource>
 8003dd8:	b100      	cbz	r0, 8003ddc <main+0xec>
 8003dda:	e7fe      	b.n	8003dda <main+0xea>
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7fe fc6f 	bl	80026c0 <HAL_TIM_PWM_Init>
 8003de2:	b100      	cbz	r0, 8003de6 <main+0xf6>
 8003de4:	e7fe      	b.n	8003de4 <main+0xf4>
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003de6:	f04f 0904 	mov.w	r9, #4
	  sConfigOC.Pulse = 500;
 8003dea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dee:	f04f 0a60 	mov.w	sl, #96	; 0x60
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003df2:	9011      	str	r0, [sp, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003df4:	464a      	mov	r2, r9
 8003df6:	a90f      	add	r1, sp, #60	; 0x3c
 8003df8:	4620      	mov	r0, r4
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dfa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	  sConfigOC.Pulse = 500;
 8003dfe:	9310      	str	r3, [sp, #64]	; 0x40
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003e00:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e04:	f7fe fca2 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
 8003e08:	4683      	mov	fp, r0
 8003e0a:	b100      	cbz	r0, 8003e0e <main+0x11e>
 8003e0c:	e7fe      	b.n	8003e0c <main+0x11c>
	  HAL_TIM_MspPostInit(&htim3);
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f000 f9e2 	bl	80041d8 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003e14:	4620      	mov	r0, r4
 8003e16:	4649      	mov	r1, r9
 8003e18:	f7fe fd06 	bl	8002828 <HAL_TIM_PWM_Start>
  htim1.Init.Prescaler = 18-1;
 8003e1c:	2311      	movs	r3, #17
  htim1.Instance = TIM1;
 8003e1e:	4c26      	ldr	r4, [pc, #152]	; (8003eb8 <main+0x1c8>)
  htim1.Init.Prescaler = 18-1;
 8003e20:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <main+0x1cc>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e22:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 18-1;
 8003e24:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e28:	f8c4 b008 	str.w	fp, [r4, #8]
  htim1.Init.Period = 4-1;
 8003e2c:	60e7      	str	r7, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e2e:	f8c4 b010 	str.w	fp, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e32:	f8c4 b014 	str.w	fp, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e36:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e38:	f7fe fc42 	bl	80026c0 <HAL_TIM_PWM_Init>
 8003e3c:	b100      	cbz	r0, 8003e40 <main+0x150>
 8003e3e:	e7fe      	b.n	8003e3e <main+0x14e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e40:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e42:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e44:	a902      	add	r1, sp, #8
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7fe fd2a 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4c:	b100      	cbz	r0, 8003e50 <main+0x160>
 8003e4e:	e7fe      	b.n	8003e4e <main+0x15e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e50:	464a      	mov	r2, r9
 8003e52:	a908      	add	r1, sp, #32
 8003e54:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e56:	f8cd a020 	str.w	sl, [sp, #32]
  sConfigOC.Pulse = 3-1;
 8003e5a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003e5e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e62:	f7fe fc73 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
 8003e66:	b100      	cbz	r0, 8003e6a <main+0x17a>
 8003e68:	e7fe      	b.n	8003e68 <main+0x178>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e6e:	a916      	add	r1, sp, #88	; 0x58
 8003e70:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e74:	4810      	ldr	r0, [pc, #64]	; (8003eb8 <main+0x1c8>)
 8003e76:	f7fe fb18 	bl	80024aa <HAL_TIM_ConfigClockSource>
 8003e7a:	b100      	cbz	r0, 8003e7e <main+0x18e>
 8003e7c:	e7fe      	b.n	8003e7c <main+0x18c>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e82:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e84:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e86:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e88:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e8a:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e8c:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e8e:	a90f      	add	r1, sp, #60	; 0x3c
 8003e90:	4809      	ldr	r0, [pc, #36]	; (8003eb8 <main+0x1c8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e92:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e94:	f7fe fcde 	bl	8002854 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e98:	4604      	mov	r4, r0
 8003e9a:	b188      	cbz	r0, 8003ec0 <main+0x1d0>
 8003e9c:	e7fe      	b.n	8003e9c <main+0x1ac>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40010800 	.word	0x40010800
 8003ea8:	40010c00 	.word	0x40010c00
 8003eac:	20000b30 	.word	0x20000b30
 8003eb0:	20000ab0 	.word	0x20000ab0
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	20000af0 	.word	0x20000af0
 8003ebc:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 8003ec0:	485e      	ldr	r0, [pc, #376]	; (800403c <main+0x34c>)
 8003ec2:	f000 f989 	bl	80041d8 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	485c      	ldr	r0, [pc, #368]	; (800403c <main+0x34c>)
 8003eca:	f7fe fcad 	bl	8002828 <HAL_TIM_PWM_Start>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ece:	4622      	mov	r2, r4
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	201c      	movs	r0, #28
 8003ed4:	f7fd fa26 	bl	8001324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ed8:	201c      	movs	r0, #28
 8003eda:	f7fd fa57 	bl	800138c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003ede:	4622      	mov	r2, r4
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	201e      	movs	r0, #30
 8003ee4:	f7fd fa1e 	bl	8001324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ee8:	201e      	movs	r0, #30
 8003eea:	f7fd fa4f 	bl	800138c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	2006      	movs	r0, #6
 8003ef4:	f7fd fa16 	bl	8001324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ef8:	2006      	movs	r0, #6
 8003efa:	f7fd fa47 	bl	800138c <HAL_NVIC_EnableIRQ>
  EXTI->IMR=EXTI_IMR_IM0;
 8003efe:	2201      	movs	r2, #1
 8003f00:	4b4f      	ldr	r3, [pc, #316]	; (8004040 <main+0x350>)
  TIM4->CR1 |= TIM_CR1_CEN;
 8003f02:	4c50      	ldr	r4, [pc, #320]	; (8004044 <main+0x354>)
  EXTI->IMR=EXTI_IMR_IM0;
 8003f04:	601a      	str	r2, [r3, #0]
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003f06:	69eb      	ldr	r3, [r5, #28]
	      PWM_duty = (PWM_freq - PWM_duty) * 100 / PWM_freq;
 8003f08:	4f4f      	ldr	r7, [pc, #316]	; (8004048 <main+0x358>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003f0a:	f043 0304 	orr.w	r3, r3, #4
 8003f0e:	61eb      	str	r3, [r5, #28]
 8003f10:	69eb      	ldr	r3, [r5, #28]
	      PWM_freq = 72000000 / timprescaler / PWM_freq;
 8003f12:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8004084 <main+0x394>
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  tim_init_freq();
 8003f1e:	f7ff fdc3 	bl	8003aa8 <tim_init_freq>
  HAL_TIM_Base_Start_IT (&htim2);
 8003f22:	484a      	ldr	r0, [pc, #296]	; (800404c <main+0x35c>)
 8003f24:	f7fe fab6 	bl	8002494 <HAL_TIM_Base_Start_IT>
  TIM2->CR1 |= TIM_CR1_CEN;
 8003f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM4->CR1 |= TIM_CR1_CEN;
 8003f2c:	6823      	ldr	r3, [r4, #0]
  HAL_Delay (500);
 8003f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  TIM4->CR1 |= TIM_CR1_CEN;
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6023      	str	r3, [r4, #0]
  TIM2->CR1 |= TIM_CR1_CEN;
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6013      	str	r3, [r2, #0]
  TIM4->DIER |=TIM_DIER_UIE;
 8003f40:	68e3      	ldr	r3, [r4, #12]
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	60e3      	str	r3, [r4, #12]
  HAL_Delay (500);
 8003f48:	f7fd f9c8 	bl	80012dc <HAL_Delay>
  USBsend ("\r\n\nThis device displays frequency of signal from PB7 Pin.\r\n"
 8003f4c:	4840      	ldr	r0, [pc, #256]	; (8004050 <main+0x360>)
 8003f4e:	f000 fa13 	bl	8004378 <USBsend>
  HAL_Delay (500);
 8003f52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f56:	f7fd f9c1 	bl	80012dc <HAL_Delay>
      if (tim_interrupt == 1)
 8003f5a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004088 <main+0x398>
 8003f5e:	f8d9 3000 	ldr.w	r3, [r9]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d141      	bne.n	8003fea <main+0x2fa>
	  tim_interrupt = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c9 3000 	str.w	r3, [r9]
	  switch (current_mode)
 8003f6c:	4b39      	ldr	r3, [pc, #228]	; (8004054 <main+0x364>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d057      	beq.n	8004028 <main+0x338>
 8003f78:	2a01      	cmp	r2, #1
 8003f7a:	d136      	bne.n	8003fea <main+0x2fa>
	      PWM_freq = TIM4->CCR2 + 1; //temporary
 8003f7c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f7e:	4d36      	ldr	r5, [pc, #216]	; (8004058 <main+0x368>)
 8003f80:	3001      	adds	r0, #1
 8003f82:	f7fc fe33 	bl	8000bec <__aeabi_ui2f>
 8003f86:	6028      	str	r0, [r5, #0]
	      PWM_duty = TIM4->CCR1 + 1;
 8003f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f8a:	4e34      	ldr	r6, [pc, #208]	; (800405c <main+0x36c>)
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	f7fc fe2d 	bl	8000bec <__aeabi_ui2f>
 8003f92:	6030      	str	r0, [r6, #0]
	      PWM_duty = (PWM_freq - PWM_duty) * 100 / PWM_freq;
 8003f94:	6828      	ldr	r0, [r5, #0]
 8003f96:	6831      	ldr	r1, [r6, #0]
 8003f98:	f8d5 a000 	ldr.w	sl, [r5]
 8003f9c:	f7fc fd74 	bl	8000a88 <__aeabi_fsub>
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	f7fc fe7b 	bl	8000c9c <__aeabi_fmul>
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	f7fc ff2c 	bl	8000e04 <__aeabi_fdiv>
	      PWM_freq = 72000000 / timprescaler / PWM_freq;
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <main+0x370>)
	      PWM_duty = (PWM_freq - PWM_duty) * 100 / PWM_freq;
 8003fae:	6030      	str	r0, [r6, #0]
	      PWM_freq = 72000000 / timprescaler / PWM_freq;
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	f8d5 a000 	ldr.w	sl, [r5]
 8003fb6:	fbb8 f0f0 	udiv	r0, r8, r0
 8003fba:	f7fc fe17 	bl	8000bec <__aeabi_ui2f>
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	f7fc ff20 	bl	8000e04 <__aeabi_fdiv>
 8003fc4:	6028      	str	r0, [r5, #0]
	      USBsend ("\n\rFrequency=");
 8003fc6:	4827      	ldr	r0, [pc, #156]	; (8004064 <main+0x374>)
 8003fc8:	f000 f9d6 	bl	8004378 <USBsend>
	      USBsend_Float (PWM_freq);
 8003fcc:	6828      	ldr	r0, [r5, #0]
 8003fce:	f000 f9ed 	bl	80043ac <USBsend_Float>
	      USBsend ("Hz");
 8003fd2:	4825      	ldr	r0, [pc, #148]	; (8004068 <main+0x378>)
 8003fd4:	f000 f9d0 	bl	8004378 <USBsend>
	      USBsend ("\n\rDuty=");
 8003fd8:	4824      	ldr	r0, [pc, #144]	; (800406c <main+0x37c>)
 8003fda:	f000 f9cd 	bl	8004378 <USBsend>
	      USBsend_Float(PWM_duty);
 8003fde:	6830      	ldr	r0, [r6, #0]
 8003fe0:	f000 f9e4 	bl	80043ac <USBsend_Float>
	      USBsend ("%");
 8003fe4:	4822      	ldr	r0, [pc, #136]	; (8004070 <main+0x380>)
	      USBsend ("Hz");
 8003fe6:	f000 f9c7 	bl	8004378 <USBsend>
      if (USBpacketreceived == 1)
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <main+0x384>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	2a01      	cmp	r2, #1
 8003ff0:	d1b5      	bne.n	8003f5e <main+0x26e>
	  USBpacketreceived = 0;
 8003ff2:	2600      	movs	r6, #0
	  TIM2->CR1 &= ~ TIM_CR1_CEN;
 8003ff4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
	  USBpacketreceived = 0;
 8003ff8:	601e      	str	r6, [r3, #0]
	  TIM4->CR1 &= ~ TIM_CR1_CEN; //Disable timers
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6023      	str	r3, [r4, #0]
	  TIM2->CR1 &= ~ TIM_CR1_CEN;
 8004002:	682b      	ldr	r3, [r5, #0]
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	602b      	str	r3, [r5, #0]
	  ProcessCmd ();
 800400a:	f7ff fd71 	bl	8003af0 <ProcessCmd>
	  k = 0;
 800400e:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <main+0x388>)
 8004010:	601e      	str	r6, [r3, #0]
	  TIM4->CNT = 0;
 8004012:	6266      	str	r6, [r4, #36]	; 0x24
	  TIM2->CNT = 0;
 8004014:	626e      	str	r6, [r5, #36]	; 0x24
	  TIM2->CR1 |= TIM_CR1_CEN;
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	602b      	str	r3, [r5, #0]
	  TIM4->CR1 |= TIM_CR1_CEN;
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	e798      	b.n	8003f5a <main+0x26a>
	      USBsend ("\n\rfrequency=");
 8004028:	4814      	ldr	r0, [pc, #80]	; (800407c <main+0x38c>)
 800402a:	f000 f9a5 	bl	8004378 <USBsend>
	      USBsend_Int (freq);
 800402e:	4b14      	ldr	r3, [pc, #80]	; (8004080 <main+0x390>)
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	f000 f9ab 	bl	800438c <USBsend_Int>
	      USBsend ("Hz");
 8004036:	480c      	ldr	r0, [pc, #48]	; (8004068 <main+0x378>)
 8004038:	e7d5      	b.n	8003fe6 <main+0x2f6>
 800403a:	bf00      	nop
 800403c:	20000af0 	.word	0x20000af0
 8004040:	40010400 	.word	0x40010400
 8004044:	40000800 	.word	0x40000800
 8004048:	42c80000 	.word	0x42c80000
 800404c:	20000b30 	.word	0x20000b30
 8004050:	08007959 	.word	0x08007959
 8004054:	20000aac 	.word	0x20000aac
 8004058:	200007f8 	.word	0x200007f8
 800405c:	200007f4 	.word	0x200007f4
 8004060:	20000118 	.word	0x20000118
 8004064:	080079c7 	.word	0x080079c7
 8004068:	080079c4 	.word	0x080079c4
 800406c:	080079d4 	.word	0x080079d4
 8004070:	080079dc 	.word	0x080079dc
 8004074:	200007fc 	.word	0x200007fc
 8004078:	20000804 	.word	0x20000804
 800407c:	080079de 	.word	0x080079de
 8004080:	20000800 	.word	0x20000800
 8004084:	044aa200 	.word	0x044aa200
 8004088:	20000808 	.word	0x20000808

0800408c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800408c:	e7fe      	b.n	800408c <_Error_Handler>
	...

08004090 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004090:	4b20      	ldr	r3, [pc, #128]	; (8004114 <HAL_MspInit+0x84>)
{
 8004092:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004094:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004096:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	619a      	str	r2, [r3, #24]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040a8:	f7fd f92a 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80040ac:	2200      	movs	r2, #0
 80040ae:	f06f 000b 	mvn.w	r0, #11
 80040b2:	4611      	mov	r1, r2
 80040b4:	f7fd f936 	bl	8001324 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80040b8:	2200      	movs	r2, #0
 80040ba:	f06f 000a 	mvn.w	r0, #10
 80040be:	4611      	mov	r1, r2
 80040c0:	f7fd f930 	bl	8001324 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80040c4:	2200      	movs	r2, #0
 80040c6:	f06f 0009 	mvn.w	r0, #9
 80040ca:	4611      	mov	r1, r2
 80040cc:	f7fd f92a 	bl	8001324 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80040d0:	2200      	movs	r2, #0
 80040d2:	f06f 0004 	mvn.w	r0, #4
 80040d6:	4611      	mov	r1, r2
 80040d8:	f7fd f924 	bl	8001324 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80040dc:	2200      	movs	r2, #0
 80040de:	f06f 0003 	mvn.w	r0, #3
 80040e2:	4611      	mov	r1, r2
 80040e4:	f7fd f91e 	bl	8001324 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80040e8:	2200      	movs	r2, #0
 80040ea:	f06f 0001 	mvn.w	r0, #1
 80040ee:	4611      	mov	r1, r2
 80040f0:	f7fd f918 	bl	8001324 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80040f4:	2200      	movs	r2, #0
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	4611      	mov	r1, r2
 80040fc:	f7fd f912 	bl	8001324 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Enabled
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004100:	4a05      	ldr	r2, [pc, #20]	; (8004118 <HAL_MspInit+0x88>)
 8004102:	6853      	ldr	r3, [r2, #4]
 8004104:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800410c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800410e:	b003      	add	sp, #12
 8004110:	f85d fb04 	ldr.w	pc, [sp], #4
 8004114:	40021000 	.word	0x40021000
 8004118:	40010000 	.word	0x40010000

0800411c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 800411c:	6802      	ldr	r2, [r0, #0]
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_TIM_PWM_MspInit+0x24>)
{
 8004120:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8004122:	429a      	cmp	r2, r3
 8004124:	d10a      	bne.n	800413c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004126:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004130:	619a      	str	r2, [r3, #24]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800413c:	b002      	add	sp, #8
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00

08004144 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8004146:	6803      	ldr	r3, [r0, #0]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d10d      	bne.n	800416a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800414e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	61da      	str	r2, [r3, #28]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	9302      	str	r3, [sp, #8]
 8004162:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004164:	b007      	add	sp, #28
 8004166:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 800416a:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_TIM_Base_MspInit+0x80>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d114      	bne.n	800419a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_TIM_Base_MspInit+0x84>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004172:	4816      	ldr	r0, [pc, #88]	; (80041cc <HAL_TIM_Base_MspInit+0x88>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004174:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004176:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004178:	f042 0202 	orr.w	r2, r2, #2
 800417c:	61da      	str	r2, [r3, #28]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004194:	f7fd f92e 	bl	80013f4 <HAL_GPIO_Init>
}
 8004198:	e7e4      	b.n	8004164 <HAL_TIM_Base_MspInit+0x20>
  else if(htim_base->Instance==TIM4)
 800419a:	4a0d      	ldr	r2, [pc, #52]	; (80041d0 <HAL_TIM_Base_MspInit+0x8c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d1e1      	bne.n	8004164 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_TIM_Base_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a2:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041a4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a6:	480b      	ldr	r0, [pc, #44]	; (80041d4 <HAL_TIM_Base_MspInit+0x90>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041a8:	f042 0204 	orr.w	r2, r2, #4
 80041ac:	61da      	str	r2, [r3, #28]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041bc:	2300      	movs	r3, #0
 80041be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	9304      	str	r3, [sp, #16]
 80041c2:	e7e7      	b.n	8004194 <HAL_TIM_Base_MspInit+0x50>
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40010800 	.word	0x40010800
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40010c00 	.word	0x40010c00

080041d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80041da:	6803      	ldr	r3, [r0, #0]
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_TIM_MspPostInit+0x30>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d10d      	bne.n	80041fe <HAL_TIM_MspPostInit+0x26>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041e2:	f44f 7300 	mov.w	r3, #512	; 0x200
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041e6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e8:	2302      	movs	r3, #2
 80041ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ec:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ee:	4669      	mov	r1, sp
 80041f0:	4806      	ldr	r0, [pc, #24]	; (800420c <HAL_TIM_MspPostInit+0x34>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041f2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f4:	f7fd f8fe 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80041f8:	b005      	add	sp, #20
 80041fa:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM4)
 80041fe:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_TIM_MspPostInit+0x38>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d1f9      	bne.n	80041f8 <HAL_TIM_MspPostInit+0x20>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	e7ee      	b.n	80041e6 <HAL_TIM_MspPostInit+0xe>
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40010800 	.word	0x40010800
 8004210:	40000800 	.word	0x40000800

08004214 <NMI_Handler>:
 8004214:	4770      	bx	lr

08004216 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004216:	e7fe      	b.n	8004216 <HardFault_Handler>

08004218 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004218:	e7fe      	b.n	8004218 <MemManage_Handler>

0800421a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800421a:	e7fe      	b.n	800421a <BusFault_Handler>

0800421c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800421c:	e7fe      	b.n	800421c <UsageFault_Handler>

0800421e <SVC_Handler>:
 800421e:	4770      	bx	lr

08004220 <DebugMon_Handler>:
 8004220:	4770      	bx	lr

08004222 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004222:	4770      	bx	lr

08004224 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004224:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004226:	f7fd f847 	bl	80012b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800422a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800422e:	f7fd b8dc 	b.w	80013ea <HAL_SYSTICK_IRQHandler>
	...

08004234 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004234:	4801      	ldr	r0, [pc, #4]	; (800423c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8004236:	f7fd bacb 	b.w	80017d0 <HAL_PCD_IRQHandler>
 800423a:	bf00      	nop
 800423c:	2000194c 	.word	0x2000194c

08004240 <USB_HP_CAN1_TX_IRQHandler>:
 8004240:	f7ff bff8 	b.w	8004234 <USB_LP_CAN1_RX0_IRQHandler>

08004244 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <SystemInit+0x40>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	4a0d      	ldr	r2, [pc, #52]	; (8004288 <SystemInit+0x44>)
 8004252:	400a      	ands	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800425c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004260:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004268:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004270:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004272:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004276:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004278:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <SystemInit+0x48>)
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	f8ff0000 	.word	0xf8ff0000
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004290:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004292:	4c09      	ldr	r4, [pc, #36]	; (80042b8 <MX_USB_DEVICE_Init+0x28>)
 8004294:	2200      	movs	r2, #0
 8004296:	4909      	ldr	r1, [pc, #36]	; (80042bc <MX_USB_DEVICE_Init+0x2c>)
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff f865 	bl	8003368 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800429e:	4908      	ldr	r1, [pc, #32]	; (80042c0 <MX_USB_DEVICE_Init+0x30>)
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff f876 	bl	8003392 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80042a6:	4620      	mov	r0, r4
 80042a8:	4906      	ldr	r1, [pc, #24]	; (80042c4 <MX_USB_DEVICE_Init+0x34>)
 80042aa:	f7ff f81e 	bl	80032ea <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80042ae:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80042b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80042b4:	f7ff b874 	b.w	80033a0 <USBD_Start>
 80042b8:	20000b70 	.word	0x20000b70
 80042bc:	20000130 	.word	0x20000130
 80042c0:	20000008 	.word	0x20000008
 80042c4:	20000120 	.word	0x20000120

080042c8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80042c8:	2000      	movs	r0, #0
 80042ca:	4770      	bx	lr

080042cc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80042cc:	2000      	movs	r0, #0
 80042ce:	4770      	bx	lr

080042d0 <CDC_Receive_FS>:
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
	uint32_t j=0;
  /* USER CODE BEGIN 6 */
	USBdatalenght=(*Len);
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <CDC_Receive_FS+0x34>)
 80042d2:	680a      	ldr	r2, [r1, #0]
{
 80042d4:	b510      	push	{r4, lr}
	USBdatalenght=(*Len);
 80042d6:	601a      	str	r2, [r3, #0]
	for(j=0;j<(*Len);j++)
 80042d8:	2300      	movs	r3, #0
	{
		receivedata[j]=Buf[j];
 80042da:	4c0b      	ldr	r4, [pc, #44]	; (8004308 <CDC_Receive_FS+0x38>)
	for(j=0;j<(*Len);j++)
 80042dc:	680a      	ldr	r2, [r1, #0]
 80042de:	4293      	cmp	r3, r2
 80042e0:	d30b      	bcc.n	80042fa <CDC_Receive_FS+0x2a>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80042e2:	4601      	mov	r1, r0
 80042e4:	4809      	ldr	r0, [pc, #36]	; (800430c <CDC_Receive_FS+0x3c>)
 80042e6:	f7ff f80f 	bl	8003308 <USBD_CDC_SetRxBuffer>
  /*set soft interrupt to inform upper layer of incoming packet*/
  EXTI->SWIER=EXTI_SWIER_SWI0;
 80042ea:	2201      	movs	r2, #1
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <CDC_Receive_FS+0x40>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80042ee:	4807      	ldr	r0, [pc, #28]	; (800430c <CDC_Receive_FS+0x3c>)
  EXTI->SWIER=EXTI_SWIER_SWI0;
 80042f0:	611a      	str	r2, [r3, #16]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80042f2:	f7ff f826 	bl	8003342 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80042f6:	2000      	movs	r0, #0
 80042f8:	bd10      	pop	{r4, pc}
		receivedata[j]=Buf[j];
 80042fa:	5cc2      	ldrb	r2, [r0, r3]
 80042fc:	551a      	strb	r2, [r3, r4]
	for(j=0;j<(*Len);j++)
 80042fe:	3301      	adds	r3, #1
 8004300:	e7ec      	b.n	80042dc <CDC_Receive_FS+0xc>
 8004302:	bf00      	nop
 8004304:	2000080c 	.word	0x2000080c
 8004308:	20001564 	.word	0x20001564
 800430c:	20000b70 	.word	0x20000b70
 8004310:	40010400 	.word	0x40010400

08004314 <CDC_Init_FS>:
{
 8004314:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004316:	4c06      	ldr	r4, [pc, #24]	; (8004330 <CDC_Init_FS+0x1c>)
 8004318:	2200      	movs	r2, #0
 800431a:	4906      	ldr	r1, [pc, #24]	; (8004334 <CDC_Init_FS+0x20>)
 800431c:	4620      	mov	r0, r4
 800431e:	f7fe ffeb 	bl	80032f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004322:	4905      	ldr	r1, [pc, #20]	; (8004338 <CDC_Init_FS+0x24>)
 8004324:	4620      	mov	r0, r4
 8004326:	f7fe ffef 	bl	8003308 <USBD_CDC_SetRxBuffer>
}
 800432a:	2000      	movs	r0, #0
 800432c:	bd10      	pop	{r4, pc}
 800432e:	bf00      	nop
 8004330:	20000b70 	.word	0x20000b70
 8004334:	2000117c 	.word	0x2000117c
 8004338:	20000d94 	.word	0x20000d94

0800433c <USBgetdata>:
	*lenght=USBdatalenght;
 800433c:	4b02      	ldr	r3, [pc, #8]	; (8004348 <USBgetdata+0xc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6003      	str	r3, [r0, #0]
}
 8004342:	4802      	ldr	r0, [pc, #8]	; (800434c <USBgetdata+0x10>)
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	2000080c 	.word	0x2000080c
 800434c:	20001564 	.word	0x20001564

08004350 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004350:	b508      	push	{r3, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <CDC_Transmit_FS+0x24>)
{
 8004354:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004356:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
  while (hcdc->TxState != 0)
 800435a:	f8d1 3214 	ldr.w	r3, [r1, #532]	; 0x214
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1fb      	bne.n	800435a <CDC_Transmit_FS+0xa>
  {
	  hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004362:	4601      	mov	r1, r0
 8004364:	4803      	ldr	r0, [pc, #12]	; (8004374 <CDC_Transmit_FS+0x24>)
 8004366:	f7fe ffc7 	bl	80032f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800436a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800436e:	4801      	ldr	r0, [pc, #4]	; (8004374 <CDC_Transmit_FS+0x24>)
 8004370:	f7fe bfd0 	b.w	8003314 <USBD_CDC_TransmitPacket>
 8004374:	20000b70 	.word	0x20000b70

08004378 <USBsend>:

void USBsend (char *str)
{
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	1a19      	subs	r1, r3, r0
    uint32_t ptr=0;
    for(ptr=1;str[ptr]!=0;ptr++)
 800437c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004380:	2a00      	cmp	r2, #0
 8004382:	d1fa      	bne.n	800437a <USBsend+0x2>
    {
    }
    CDC_Transmit_FS(str,ptr);
 8004384:	b289      	uxth	r1, r1
 8004386:	f7ff bfe3 	b.w	8004350 <CDC_Transmit_FS>
	...

0800438c <USBsend_Int>:
}

void USBsend_Int(int i)
{
 800438c:	b500      	push	{lr}
 800438e:	b089      	sub	sp, #36	; 0x24
    char temp[32];
    sprintf(temp,"%d",i);
 8004390:	4602      	mov	r2, r0
 8004392:	4905      	ldr	r1, [pc, #20]	; (80043a8 <USBsend_Int+0x1c>)
 8004394:	4668      	mov	r0, sp
 8004396:	f000 fa05 	bl	80047a4 <sprintf>
	USBsend(temp);
 800439a:	4668      	mov	r0, sp
 800439c:	f7ff ffec 	bl	8004378 <USBsend>
}
 80043a0:	b009      	add	sp, #36	; 0x24
 80043a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80043a6:	bf00      	nop
 80043a8:	08007a00 	.word	0x08007a00

080043ac <USBsend_Float>:

void USBsend_Float(float i)
{
 80043ac:	b500      	push	{lr}
 80043ae:	b089      	sub	sp, #36	; 0x24
    char temp[32];
    //Change it if your device does not support floats.
   //sprintf(temp,"%d",(int)i);
    sprintf(temp,"%.2f",i);
 80043b0:	f7fc f83a 	bl	8000428 <__aeabi_f2d>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4668      	mov	r0, sp
 80043ba:	4904      	ldr	r1, [pc, #16]	; (80043cc <USBsend_Float+0x20>)
 80043bc:	f000 f9f2 	bl	80047a4 <sprintf>
	USBsend(temp);
 80043c0:	4668      	mov	r0, sp
 80043c2:	f7ff ffd9 	bl	8004378 <USBsend>
}
 80043c6:	b009      	add	sp, #36	; 0x24
 80043c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80043cc:	080079fb 	.word	0x080079fb

080043d0 <USBsend_raw>:

void USBsend_raw(uint8_t data)
{
 80043d0:	b507      	push	{r0, r1, r2, lr}
 80043d2:	ab02      	add	r3, sp, #8
 80043d4:	f803 0d01 	strb.w	r0, [r3, #-1]!
  CDC_Transmit_FS(&data,1);
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff ffb8 	bl	8004350 <CDC_Transmit_FS>
}
 80043e0:	b003      	add	sp, #12
 80043e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080043e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80043e8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80043ea:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_PCD_MspInit+0x48>)
 80043ec:	6802      	ldr	r2, [r0, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d11a      	bne.n	8004428 <HAL_PCD_MspInit+0x40>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80043f2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80043f6:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 80043f8:	2102      	movs	r1, #2
    __HAL_RCC_USB_CLK_ENABLE();
 80043fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043fe:	61da      	str	r2, [r3, #28]
 8004400:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8004402:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004408:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 800440a:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 800440c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 800440e:	f7fc ff89 	bl	8001324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8004412:	2013      	movs	r0, #19
 8004414:	f7fc ffba 	bl	800138c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 8004418:	2014      	movs	r0, #20
 800441a:	2200      	movs	r2, #0
 800441c:	2102      	movs	r1, #2
 800441e:	f7fc ff81 	bl	8001324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004422:	2014      	movs	r0, #20
 8004424:	f7fc ffb2 	bl	800138c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004428:	b003      	add	sp, #12
 800442a:	f85d fb04 	ldr.w	pc, [sp], #4
 800442e:	bf00      	nop
 8004430:	40005c00 	.word	0x40005c00

08004434 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004434:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8004438:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800443c:	f7fe bfc7 	b.w	80033ce <USBD_LL_SetupStage>

08004440 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004440:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004444:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8004448:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800444c:	f7fe bfec 	b.w	8003428 <USBD_LL_DataOutStage>

08004450 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004450:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004456:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800445a:	f7ff b817 	b.w	800348c <USBD_LL_DataInStage>

0800445e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800445e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004462:	f7ff b893 	b.w	800358c <USBD_LL_SOF>

08004466 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004466:	b510      	push	{r4, lr}
 8004468:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800446a:	2101      	movs	r1, #1
 800446c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004470:	f7ff f87a 	bl	8003568 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004474:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8004478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800447c:	f7ff b855 	b.w	800352a <USBD_LL_Reset>

08004480 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004480:	b510      	push	{r4, lr}
 8004482:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004484:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004488:	f7ff f871 	bl	800356e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800448c:	69a3      	ldr	r3, [r4, #24]
 800448e:	b123      	cbz	r3, 800449a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004490:	4a02      	ldr	r2, [pc, #8]	; (800449c <HAL_PCD_SuspendCallback+0x1c>)
 8004492:	6913      	ldr	r3, [r2, #16]
 8004494:	f043 0306 	orr.w	r3, r3, #6
 8004498:	6113      	str	r3, [r2, #16]
 800449a:	bd10      	pop	{r4, pc}
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80044a0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80044a4:	f7ff b86c 	b.w	8003580 <USBD_LL_Resume>

080044a8 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80044a8:	2308      	movs	r3, #8
 80044aa:	f04f 0c02 	mov.w	ip, #2
{
 80044ae:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80044b0:	4a1e      	ldr	r2, [pc, #120]	; (800452c <USBD_LL_Init+0x84>)
{
 80044b2:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80044b4:	481e      	ldr	r0, [pc, #120]	; (8004530 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80044b6:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80044ba:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80044bc:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 80044c0:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80044c4:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80044c6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80044c8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80044ca:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80044cc:	f7fd f872 	bl	80015b4 <HAL_PCD_Init>
 80044d0:	b120      	cbz	r0, 80044dc <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80044d2:	f44f 7199 	mov.w	r1, #306	; 0x132
 80044d6:	4817      	ldr	r0, [pc, #92]	; (8004534 <USBD_LL_Init+0x8c>)
 80044d8:	f7ff fdd8 	bl	800408c <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80044dc:	2200      	movs	r2, #0
 80044de:	2318      	movs	r3, #24
 80044e0:	4611      	mov	r1, r2
 80044e2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80044e6:	f7fd fc37 	bl	8001d58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80044ea:	2358      	movs	r3, #88	; 0x58
 80044ec:	2200      	movs	r2, #0
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80044f4:	f7fd fc30 	bl	8001d58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80044f8:	23c0      	movs	r3, #192	; 0xc0
 80044fa:	2200      	movs	r2, #0
 80044fc:	2181      	movs	r1, #129	; 0x81
 80044fe:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004502:	f7fd fc29 	bl	8001d58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004506:	f44f 7388 	mov.w	r3, #272	; 0x110
 800450a:	2200      	movs	r2, #0
 800450c:	2101      	movs	r1, #1
 800450e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004512:	f7fd fc21 	bl	8001d58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800451a:	2200      	movs	r2, #0
 800451c:	2182      	movs	r1, #130	; 0x82
 800451e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004522:	f7fd fc19 	bl	8001d58 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8004526:	2000      	movs	r0, #0
 8004528:	bd10      	pop	{r4, pc}
 800452a:	bf00      	nop
 800452c:	40005c00 	.word	0x40005c00
 8004530:	2000194c 	.word	0x2000194c
 8004534:	08007a07 	.word	0x08007a07

08004538 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004538:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800453a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800453e:	f7fd f8a2 	bl	8001686 <HAL_PCD_Start>
 8004542:	2803      	cmp	r0, #3
 8004544:	bf9a      	itte	ls
 8004546:	4b02      	ldrls	r3, [pc, #8]	; (8004550 <USBD_LL_Start+0x18>)
 8004548:	5c18      	ldrbls	r0, [r3, r0]
 800454a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800454c:	bd08      	pop	{r3, pc}
 800454e:	bf00      	nop
 8004550:	08007a03 	.word	0x08007a03

08004554 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004554:	b510      	push	{r4, lr}
 8004556:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004558:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800455c:	4613      	mov	r3, r2
 800455e:	4622      	mov	r2, r4
 8004560:	f7fd f8bc 	bl	80016dc <HAL_PCD_EP_Open>
 8004564:	2803      	cmp	r0, #3
 8004566:	bf9a      	itte	ls
 8004568:	4b01      	ldrls	r3, [pc, #4]	; (8004570 <USBD_LL_OpenEP+0x1c>)
 800456a:	5c18      	ldrbls	r0, [r3, r0]
 800456c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800456e:	bd10      	pop	{r4, pc}
 8004570:	08007a03 	.word	0x08007a03

08004574 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004574:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004576:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800457a:	f7fd f8d2 	bl	8001722 <HAL_PCD_EP_Close>
 800457e:	2803      	cmp	r0, #3
 8004580:	bf9a      	itte	ls
 8004582:	4b02      	ldrls	r3, [pc, #8]	; (800458c <USBD_LL_CloseEP+0x18>)
 8004584:	5c18      	ldrbls	r0, [r3, r0]
 8004586:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004588:	bd08      	pop	{r3, pc}
 800458a:	bf00      	nop
 800458c:	08007a03 	.word	0x08007a03

08004590 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004590:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004592:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004596:	f7fd fb93 	bl	8001cc0 <HAL_PCD_EP_SetStall>
 800459a:	2803      	cmp	r0, #3
 800459c:	bf9a      	itte	ls
 800459e:	4b02      	ldrls	r3, [pc, #8]	; (80045a8 <USBD_LL_StallEP+0x18>)
 80045a0:	5c18      	ldrbls	r0, [r3, r0]
 80045a2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80045a4:	bd08      	pop	{r3, pc}
 80045a6:	bf00      	nop
 80045a8:	08007a03 	.word	0x08007a03

080045ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045ac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80045ae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045b2:	f7fd fbae 	bl	8001d12 <HAL_PCD_EP_ClrStall>
 80045b6:	2803      	cmp	r0, #3
 80045b8:	bf9a      	itte	ls
 80045ba:	4b02      	ldrls	r3, [pc, #8]	; (80045c4 <USBD_LL_ClearStallEP+0x18>)
 80045bc:	5c18      	ldrbls	r0, [r3, r0]
 80045be:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80045c0:	bd08      	pop	{r3, pc}
 80045c2:	bf00      	nop
 80045c4:	08007a03 	.word	0x08007a03

080045c8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80045c8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80045ca:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80045ce:	bf45      	ittet	mi
 80045d0:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 80045d4:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80045d8:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80045dc:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80045e0:	bf58      	it	pl
 80045e2:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 80045e6:	4770      	bx	lr

080045e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80045e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80045ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045ee:	f7fd f861 	bl	80016b4 <HAL_PCD_SetAddress>
 80045f2:	2803      	cmp	r0, #3
 80045f4:	bf9a      	itte	ls
 80045f6:	4b02      	ldrls	r3, [pc, #8]	; (8004600 <USBD_LL_SetUSBAddress+0x18>)
 80045f8:	5c18      	ldrbls	r0, [r3, r0]
 80045fa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80045fc:	bd08      	pop	{r3, pc}
 80045fe:	bf00      	nop
 8004600:	08007a03 	.word	0x08007a03

08004604 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004604:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004606:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800460a:	f7fd f8ca 	bl	80017a2 <HAL_PCD_EP_Transmit>
 800460e:	2803      	cmp	r0, #3
 8004610:	bf9a      	itte	ls
 8004612:	4b02      	ldrls	r3, [pc, #8]	; (800461c <USBD_LL_Transmit+0x18>)
 8004614:	5c18      	ldrbls	r0, [r3, r0]
 8004616:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004618:	bd08      	pop	{r3, pc}
 800461a:	bf00      	nop
 800461c:	08007a03 	.word	0x08007a03

08004620 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004620:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004622:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004626:	f7fd f89d 	bl	8001764 <HAL_PCD_EP_Receive>
 800462a:	2803      	cmp	r0, #3
 800462c:	bf9a      	itte	ls
 800462e:	4b02      	ldrls	r3, [pc, #8]	; (8004638 <USBD_LL_PrepareReceive+0x18>)
 8004630:	5c18      	ldrbls	r0, [r3, r0]
 8004632:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004634:	bd08      	pop	{r3, pc}
 8004636:	bf00      	nop
 8004638:	08007a03 	.word	0x08007a03

0800463c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800463c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800463e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004642:	f7fd f8a7 	bl	8001794 <HAL_PCD_EP_GetRxCount>
}
 8004646:	bd08      	pop	{r3, pc}

08004648 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004648:	4800      	ldr	r0, [pc, #0]	; (800464c <USBD_static_malloc+0x4>)
 800464a:	4770      	bx	lr
 800464c:	20000810 	.word	0x20000810

08004650 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004650:	4770      	bx	lr

08004652 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004652:	4770      	bx	lr

08004654 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004654:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004656:	4801      	ldr	r0, [pc, #4]	; (800465c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004658:	800b      	strh	r3, [r1, #0]
}
 800465a:	4770      	bx	lr
 800465c:	2000014c 	.word	0x2000014c

08004660 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004660:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004662:	4801      	ldr	r0, [pc, #4]	; (8004668 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004664:	800b      	strh	r3, [r1, #0]
}
 8004666:	4770      	bx	lr
 8004668:	20000160 	.word	0x20000160

0800466c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800466c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800466e:	4c04      	ldr	r4, [pc, #16]	; (8004680 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004670:	460a      	mov	r2, r1
 8004672:	4804      	ldr	r0, [pc, #16]	; (8004684 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004674:	4621      	mov	r1, r4
 8004676:	f7ff f92a 	bl	80038ce <USBD_GetString>
  return USBD_StrDesc;
}
 800467a:	4620      	mov	r0, r4
 800467c:	bd10      	pop	{r4, pc}
 800467e:	bf00      	nop
 8004680:	20001dac 	.word	0x20001dac
 8004684:	08007a33 	.word	0x08007a33

08004688 <USBD_FS_ProductStrDescriptor>:
{
 8004688:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800468a:	4c04      	ldr	r4, [pc, #16]	; (800469c <USBD_FS_ProductStrDescriptor+0x14>)
 800468c:	460a      	mov	r2, r1
 800468e:	4804      	ldr	r0, [pc, #16]	; (80046a0 <USBD_FS_ProductStrDescriptor+0x18>)
 8004690:	4621      	mov	r1, r4
 8004692:	f7ff f91c 	bl	80038ce <USBD_GetString>
}
 8004696:	4620      	mov	r0, r4
 8004698:	bd10      	pop	{r4, pc}
 800469a:	bf00      	nop
 800469c:	20001dac 	.word	0x20001dac
 80046a0:	08007a46 	.word	0x08007a46

080046a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046a4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80046a6:	4c04      	ldr	r4, [pc, #16]	; (80046b8 <USBD_FS_SerialStrDescriptor+0x14>)
 80046a8:	460a      	mov	r2, r1
 80046aa:	4804      	ldr	r0, [pc, #16]	; (80046bc <USBD_FS_SerialStrDescriptor+0x18>)
 80046ac:	4621      	mov	r1, r4
 80046ae:	f7ff f90e 	bl	80038ce <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80046b2:	4620      	mov	r0, r4
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	bf00      	nop
 80046b8:	20001dac 	.word	0x20001dac
 80046bc:	08007a5c 	.word	0x08007a5c

080046c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046c0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80046c2:	4c04      	ldr	r4, [pc, #16]	; (80046d4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80046c4:	460a      	mov	r2, r1
 80046c6:	4804      	ldr	r0, [pc, #16]	; (80046d8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80046c8:	4621      	mov	r1, r4
 80046ca:	f7ff f900 	bl	80038ce <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80046ce:	4620      	mov	r0, r4
 80046d0:	bd10      	pop	{r4, pc}
 80046d2:	bf00      	nop
 80046d4:	20001dac 	.word	0x20001dac
 80046d8:	08007a1a 	.word	0x08007a1a

080046dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046dc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80046de:	4c04      	ldr	r4, [pc, #16]	; (80046f0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80046e0:	460a      	mov	r2, r1
 80046e2:	4804      	ldr	r0, [pc, #16]	; (80046f4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80046e4:	4621      	mov	r1, r4
 80046e6:	f7ff f8f2 	bl	80038ce <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80046ea:	4620      	mov	r0, r4
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	bf00      	nop
 80046f0:	20001dac 	.word	0x20001dac
 80046f4:	08007a25 	.word	0x08007a25

080046f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80046f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80046fa:	e003      	b.n	8004704 <LoopCopyDataInit>

080046fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80046fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004700:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004702:	3104      	adds	r1, #4

08004704 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004704:	480a      	ldr	r0, [pc, #40]	; (8004730 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004708:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800470a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800470c:	d3f6      	bcc.n	80046fc <CopyDataInit>
  ldr r2, =_sbss
 800470e:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004710:	e002      	b.n	8004718 <LoopFillZerobss>

08004712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004712:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004714:	f842 3b04 	str.w	r3, [r2], #4

08004718 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800471a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800471c:	d3f9      	bcc.n	8004712 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800471e:	f7ff fd91 	bl	8004244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004722:	f000 f813 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004726:	f7ff fae3 	bl	8003cf0 <main>
  bx lr
 800472a:	4770      	bx	lr
  ldr r3, =_sidata
 800472c:	08007ce8 	.word	0x08007ce8
  ldr r0, =_sdata
 8004730:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004734:	200007d4 	.word	0x200007d4
  ldr r2, =_sbss
 8004738:	200007d4 	.word	0x200007d4
  ldr r3, = _ebss
 800473c:	20001fbc 	.word	0x20001fbc

08004740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004740:	e7fe      	b.n	8004740 <ADC1_2_IRQHandler>

08004742 <atoi>:
 8004742:	220a      	movs	r2, #10
 8004744:	2100      	movs	r1, #0
 8004746:	f000 b8e3 	b.w	8004910 <strtol>
	...

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	2500      	movs	r5, #0
 8004750:	4e0c      	ldr	r6, [pc, #48]	; (8004784 <__libc_init_array+0x38>)
 8004752:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004754:	1ba4      	subs	r4, r4, r6
 8004756:	10a4      	asrs	r4, r4, #2
 8004758:	42a5      	cmp	r5, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	f002 ffd2 	bl	8007704 <_init>
 8004760:	2500      	movs	r5, #0
 8004762:	4e0a      	ldr	r6, [pc, #40]	; (800478c <__libc_init_array+0x40>)
 8004764:	4c0a      	ldr	r4, [pc, #40]	; (8004790 <__libc_init_array+0x44>)
 8004766:	1ba4      	subs	r4, r4, r6
 8004768:	10a4      	asrs	r4, r4, #2
 800476a:	42a5      	cmp	r5, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004774:	4798      	blx	r3
 8004776:	3501      	adds	r5, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800477e:	4798      	blx	r3
 8004780:	3501      	adds	r5, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	08007ce0 	.word	0x08007ce0
 8004788:	08007ce0 	.word	0x08007ce0
 800478c:	08007ce0 	.word	0x08007ce0
 8004790:	08007ce4 	.word	0x08007ce4

08004794 <memset>:
 8004794:	4603      	mov	r3, r0
 8004796:	4402      	add	r2, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <memset+0xa>
 800479c:	4770      	bx	lr
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <memset+0x4>

080047a4 <sprintf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80047aa:	b500      	push	{lr}
 80047ac:	b09c      	sub	sp, #112	; 0x70
 80047ae:	f8ad 1014 	strh.w	r1, [sp, #20]
 80047b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047b6:	9104      	str	r1, [sp, #16]
 80047b8:	9107      	str	r1, [sp, #28]
 80047ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047be:	ab1d      	add	r3, sp, #116	; 0x74
 80047c0:	9002      	str	r0, [sp, #8]
 80047c2:	9006      	str	r0, [sp, #24]
 80047c4:	4808      	ldr	r0, [pc, #32]	; (80047e8 <sprintf+0x44>)
 80047c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ca:	f8ad 1016 	strh.w	r1, [sp, #22]
 80047ce:	6800      	ldr	r0, [r0, #0]
 80047d0:	a902      	add	r1, sp, #8
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	f000 f8b2 	bl	800493c <_svfprintf_r>
 80047d8:	2200      	movs	r2, #0
 80047da:	9b02      	ldr	r3, [sp, #8]
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	b01c      	add	sp, #112	; 0x70
 80047e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e4:	b003      	add	sp, #12
 80047e6:	4770      	bx	lr
 80047e8:	20000164 	.word	0x20000164

080047ec <strncmp>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	b16a      	cbz	r2, 800480c <strncmp+0x20>
 80047f0:	3901      	subs	r1, #1
 80047f2:	1884      	adds	r4, r0, r2
 80047f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80047f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d103      	bne.n	8004808 <strncmp+0x1c>
 8004800:	42a0      	cmp	r0, r4
 8004802:	d001      	beq.n	8004808 <strncmp+0x1c>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f5      	bne.n	80047f4 <strncmp+0x8>
 8004808:	1a98      	subs	r0, r3, r2
 800480a:	bd10      	pop	{r4, pc}
 800480c:	4610      	mov	r0, r2
 800480e:	bd10      	pop	{r4, pc}

08004810 <_strtol_l.isra.0>:
 8004810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	4680      	mov	r8, r0
 8004816:	4689      	mov	r9, r1
 8004818:	4692      	mov	sl, r2
 800481a:	461f      	mov	r7, r3
 800481c:	468b      	mov	fp, r1
 800481e:	465d      	mov	r5, fp
 8004820:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004822:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004826:	f001 febb 	bl	80065a0 <__locale_ctype_ptr_l>
 800482a:	4420      	add	r0, r4
 800482c:	7846      	ldrb	r6, [r0, #1]
 800482e:	f016 0608 	ands.w	r6, r6, #8
 8004832:	d10b      	bne.n	800484c <_strtol_l.isra.0+0x3c>
 8004834:	2c2d      	cmp	r4, #45	; 0x2d
 8004836:	d10b      	bne.n	8004850 <_strtol_l.isra.0+0x40>
 8004838:	2601      	movs	r6, #1
 800483a:	782c      	ldrb	r4, [r5, #0]
 800483c:	f10b 0502 	add.w	r5, fp, #2
 8004840:	b167      	cbz	r7, 800485c <_strtol_l.isra.0+0x4c>
 8004842:	2f10      	cmp	r7, #16
 8004844:	d114      	bne.n	8004870 <_strtol_l.isra.0+0x60>
 8004846:	2c30      	cmp	r4, #48	; 0x30
 8004848:	d00a      	beq.n	8004860 <_strtol_l.isra.0+0x50>
 800484a:	e011      	b.n	8004870 <_strtol_l.isra.0+0x60>
 800484c:	46ab      	mov	fp, r5
 800484e:	e7e6      	b.n	800481e <_strtol_l.isra.0+0xe>
 8004850:	2c2b      	cmp	r4, #43	; 0x2b
 8004852:	bf04      	itt	eq
 8004854:	782c      	ldrbeq	r4, [r5, #0]
 8004856:	f10b 0502 	addeq.w	r5, fp, #2
 800485a:	e7f1      	b.n	8004840 <_strtol_l.isra.0+0x30>
 800485c:	2c30      	cmp	r4, #48	; 0x30
 800485e:	d127      	bne.n	80048b0 <_strtol_l.isra.0+0xa0>
 8004860:	782b      	ldrb	r3, [r5, #0]
 8004862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004866:	2b58      	cmp	r3, #88	; 0x58
 8004868:	d14b      	bne.n	8004902 <_strtol_l.isra.0+0xf2>
 800486a:	2710      	movs	r7, #16
 800486c:	786c      	ldrb	r4, [r5, #1]
 800486e:	3502      	adds	r5, #2
 8004870:	2e00      	cmp	r6, #0
 8004872:	bf0c      	ite	eq
 8004874:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004878:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800487c:	2200      	movs	r2, #0
 800487e:	fbb1 fef7 	udiv	lr, r1, r7
 8004882:	4610      	mov	r0, r2
 8004884:	fb07 1c1e 	mls	ip, r7, lr, r1
 8004888:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800488c:	2b09      	cmp	r3, #9
 800488e:	d811      	bhi.n	80048b4 <_strtol_l.isra.0+0xa4>
 8004890:	461c      	mov	r4, r3
 8004892:	42a7      	cmp	r7, r4
 8004894:	dd1d      	ble.n	80048d2 <_strtol_l.isra.0+0xc2>
 8004896:	1c53      	adds	r3, r2, #1
 8004898:	d007      	beq.n	80048aa <_strtol_l.isra.0+0x9a>
 800489a:	4586      	cmp	lr, r0
 800489c:	d316      	bcc.n	80048cc <_strtol_l.isra.0+0xbc>
 800489e:	d101      	bne.n	80048a4 <_strtol_l.isra.0+0x94>
 80048a0:	45a4      	cmp	ip, r4
 80048a2:	db13      	blt.n	80048cc <_strtol_l.isra.0+0xbc>
 80048a4:	2201      	movs	r2, #1
 80048a6:	fb00 4007 	mla	r0, r0, r7, r4
 80048aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048ae:	e7eb      	b.n	8004888 <_strtol_l.isra.0+0x78>
 80048b0:	270a      	movs	r7, #10
 80048b2:	e7dd      	b.n	8004870 <_strtol_l.isra.0+0x60>
 80048b4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80048b8:	2b19      	cmp	r3, #25
 80048ba:	d801      	bhi.n	80048c0 <_strtol_l.isra.0+0xb0>
 80048bc:	3c37      	subs	r4, #55	; 0x37
 80048be:	e7e8      	b.n	8004892 <_strtol_l.isra.0+0x82>
 80048c0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80048c4:	2b19      	cmp	r3, #25
 80048c6:	d804      	bhi.n	80048d2 <_strtol_l.isra.0+0xc2>
 80048c8:	3c57      	subs	r4, #87	; 0x57
 80048ca:	e7e2      	b.n	8004892 <_strtol_l.isra.0+0x82>
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295
 80048d0:	e7eb      	b.n	80048aa <_strtol_l.isra.0+0x9a>
 80048d2:	1c53      	adds	r3, r2, #1
 80048d4:	d108      	bne.n	80048e8 <_strtol_l.isra.0+0xd8>
 80048d6:	2322      	movs	r3, #34	; 0x22
 80048d8:	4608      	mov	r0, r1
 80048da:	f8c8 3000 	str.w	r3, [r8]
 80048de:	f1ba 0f00 	cmp.w	sl, #0
 80048e2:	d107      	bne.n	80048f4 <_strtol_l.isra.0+0xe4>
 80048e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e8:	b106      	cbz	r6, 80048ec <_strtol_l.isra.0+0xdc>
 80048ea:	4240      	negs	r0, r0
 80048ec:	f1ba 0f00 	cmp.w	sl, #0
 80048f0:	d00c      	beq.n	800490c <_strtol_l.isra.0+0xfc>
 80048f2:	b122      	cbz	r2, 80048fe <_strtol_l.isra.0+0xee>
 80048f4:	3d01      	subs	r5, #1
 80048f6:	f8ca 5000 	str.w	r5, [sl]
 80048fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fe:	464d      	mov	r5, r9
 8004900:	e7f9      	b.n	80048f6 <_strtol_l.isra.0+0xe6>
 8004902:	2430      	movs	r4, #48	; 0x30
 8004904:	2f00      	cmp	r7, #0
 8004906:	d1b3      	bne.n	8004870 <_strtol_l.isra.0+0x60>
 8004908:	2708      	movs	r7, #8
 800490a:	e7b1      	b.n	8004870 <_strtol_l.isra.0+0x60>
 800490c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004910 <strtol>:
 8004910:	4b08      	ldr	r3, [pc, #32]	; (8004934 <strtol+0x24>)
 8004912:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004914:	681c      	ldr	r4, [r3, #0]
 8004916:	4d08      	ldr	r5, [pc, #32]	; (8004938 <strtol+0x28>)
 8004918:	6a23      	ldr	r3, [r4, #32]
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf08      	it	eq
 800491e:	462b      	moveq	r3, r5
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	4613      	mov	r3, r2
 8004924:	460a      	mov	r2, r1
 8004926:	4601      	mov	r1, r0
 8004928:	4620      	mov	r0, r4
 800492a:	f7ff ff71 	bl	8004810 <_strtol_l.isra.0>
 800492e:	b003      	add	sp, #12
 8004930:	bd30      	pop	{r4, r5, pc}
 8004932:	bf00      	nop
 8004934:	20000164 	.word	0x20000164
 8004938:	20000258 	.word	0x20000258

0800493c <_svfprintf_r>:
 800493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004940:	b0bf      	sub	sp, #252	; 0xfc
 8004942:	4689      	mov	r9, r1
 8004944:	4615      	mov	r5, r2
 8004946:	461f      	mov	r7, r3
 8004948:	4682      	mov	sl, r0
 800494a:	f001 fe2d 	bl	80065a8 <_localeconv_r>
 800494e:	6803      	ldr	r3, [r0, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	9311      	str	r3, [sp, #68]	; 0x44
 8004954:	f7fb fbfc 	bl	8000150 <strlen>
 8004958:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800495c:	900a      	str	r0, [sp, #40]	; 0x28
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	d518      	bpl.n	8004994 <_svfprintf_r+0x58>
 8004962:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004966:	b9ab      	cbnz	r3, 8004994 <_svfprintf_r+0x58>
 8004968:	2140      	movs	r1, #64	; 0x40
 800496a:	4650      	mov	r0, sl
 800496c:	f001 fe32 	bl	80065d4 <_malloc_r>
 8004970:	f8c9 0000 	str.w	r0, [r9]
 8004974:	f8c9 0010 	str.w	r0, [r9, #16]
 8004978:	b948      	cbnz	r0, 800498e <_svfprintf_r+0x52>
 800497a:	230c      	movs	r3, #12
 800497c:	f8ca 3000 	str.w	r3, [sl]
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	930b      	str	r3, [sp, #44]	; 0x2c
 8004986:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004988:	b03f      	add	sp, #252	; 0xfc
 800498a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800498e:	2340      	movs	r3, #64	; 0x40
 8004990:	f8c9 3014 	str.w	r3, [r9, #20]
 8004994:	2300      	movs	r3, #0
 8004996:	ac2e      	add	r4, sp, #184	; 0xb8
 8004998:	9421      	str	r4, [sp, #132]	; 0x84
 800499a:	9323      	str	r3, [sp, #140]	; 0x8c
 800499c:	9322      	str	r3, [sp, #136]	; 0x88
 800499e:	9509      	str	r5, [sp, #36]	; 0x24
 80049a0:	9307      	str	r3, [sp, #28]
 80049a2:	930d      	str	r3, [sp, #52]	; 0x34
 80049a4:	930e      	str	r3, [sp, #56]	; 0x38
 80049a6:	9315      	str	r3, [sp, #84]	; 0x54
 80049a8:	9314      	str	r3, [sp, #80]	; 0x50
 80049aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80049ac:	9312      	str	r3, [sp, #72]	; 0x48
 80049ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80049b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80049b2:	462b      	mov	r3, r5
 80049b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b8:	b112      	cbz	r2, 80049c0 <_svfprintf_r+0x84>
 80049ba:	2a25      	cmp	r2, #37	; 0x25
 80049bc:	f040 8083 	bne.w	8004ac6 <_svfprintf_r+0x18a>
 80049c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c2:	1aee      	subs	r6, r5, r3
 80049c4:	d00d      	beq.n	80049e2 <_svfprintf_r+0xa6>
 80049c6:	e884 0048 	stmia.w	r4, {r3, r6}
 80049ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049cc:	4433      	add	r3, r6
 80049ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80049d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049d2:	3301      	adds	r3, #1
 80049d4:	2b07      	cmp	r3, #7
 80049d6:	9322      	str	r3, [sp, #136]	; 0x88
 80049d8:	dc77      	bgt.n	8004aca <_svfprintf_r+0x18e>
 80049da:	3408      	adds	r4, #8
 80049dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049de:	4433      	add	r3, r6
 80049e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e2:	782b      	ldrb	r3, [r5, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8725 	beq.w	8005834 <_svfprintf_r+0xef8>
 80049ea:	2300      	movs	r3, #0
 80049ec:	1c69      	adds	r1, r5, #1
 80049ee:	461a      	mov	r2, r3
 80049f0:	f04f 3bff 	mov.w	fp, #4294967295
 80049f4:	461d      	mov	r5, r3
 80049f6:	200a      	movs	r0, #10
 80049f8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80049fc:	930c      	str	r3, [sp, #48]	; 0x30
 80049fe:	1c4e      	adds	r6, r1, #1
 8004a00:	7809      	ldrb	r1, [r1, #0]
 8004a02:	9609      	str	r6, [sp, #36]	; 0x24
 8004a04:	9106      	str	r1, [sp, #24]
 8004a06:	9906      	ldr	r1, [sp, #24]
 8004a08:	3920      	subs	r1, #32
 8004a0a:	2958      	cmp	r1, #88	; 0x58
 8004a0c:	f200 8414 	bhi.w	8005238 <_svfprintf_r+0x8fc>
 8004a10:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a14:	041200a5 	.word	0x041200a5
 8004a18:	00aa0412 	.word	0x00aa0412
 8004a1c:	04120412 	.word	0x04120412
 8004a20:	04120412 	.word	0x04120412
 8004a24:	04120412 	.word	0x04120412
 8004a28:	006500ad 	.word	0x006500ad
 8004a2c:	00b50412 	.word	0x00b50412
 8004a30:	041200b8 	.word	0x041200b8
 8004a34:	00d800d5 	.word	0x00d800d5
 8004a38:	00d800d8 	.word	0x00d800d8
 8004a3c:	00d800d8 	.word	0x00d800d8
 8004a40:	00d800d8 	.word	0x00d800d8
 8004a44:	00d800d8 	.word	0x00d800d8
 8004a48:	04120412 	.word	0x04120412
 8004a4c:	04120412 	.word	0x04120412
 8004a50:	04120412 	.word	0x04120412
 8004a54:	04120412 	.word	0x04120412
 8004a58:	04120412 	.word	0x04120412
 8004a5c:	0122010c 	.word	0x0122010c
 8004a60:	01220412 	.word	0x01220412
 8004a64:	04120412 	.word	0x04120412
 8004a68:	04120412 	.word	0x04120412
 8004a6c:	041200eb 	.word	0x041200eb
 8004a70:	033c0412 	.word	0x033c0412
 8004a74:	04120412 	.word	0x04120412
 8004a78:	04120412 	.word	0x04120412
 8004a7c:	03a40412 	.word	0x03a40412
 8004a80:	04120412 	.word	0x04120412
 8004a84:	04120085 	.word	0x04120085
 8004a88:	04120412 	.word	0x04120412
 8004a8c:	04120412 	.word	0x04120412
 8004a90:	04120412 	.word	0x04120412
 8004a94:	04120412 	.word	0x04120412
 8004a98:	00fe0412 	.word	0x00fe0412
 8004a9c:	0122006b 	.word	0x0122006b
 8004aa0:	01220122 	.word	0x01220122
 8004aa4:	006b00ee 	.word	0x006b00ee
 8004aa8:	04120412 	.word	0x04120412
 8004aac:	041200f1 	.word	0x041200f1
 8004ab0:	033e031e 	.word	0x033e031e
 8004ab4:	00f80372 	.word	0x00f80372
 8004ab8:	03830412 	.word	0x03830412
 8004abc:	03a60412 	.word	0x03a60412
 8004ac0:	04120412 	.word	0x04120412
 8004ac4:	03be      	.short	0x03be
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	e773      	b.n	80049b2 <_svfprintf_r+0x76>
 8004aca:	aa21      	add	r2, sp, #132	; 0x84
 8004acc:	4649      	mov	r1, r9
 8004ace:	4650      	mov	r0, sl
 8004ad0:	f002 faa6 	bl	8007020 <__ssprint_r>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	f040 868e 	bne.w	80057f6 <_svfprintf_r+0xeba>
 8004ada:	ac2e      	add	r4, sp, #184	; 0xb8
 8004adc:	e77e      	b.n	80049dc <_svfprintf_r+0xa0>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	222b      	movs	r2, #43	; 0x2b
 8004ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ae4:	e78b      	b.n	80049fe <_svfprintf_r+0xc2>
 8004ae6:	460f      	mov	r7, r1
 8004ae8:	e7fb      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004aea:	b10b      	cbz	r3, 8004af0 <_svfprintf_r+0x1b4>
 8004aec:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004af0:	06ae      	lsls	r6, r5, #26
 8004af2:	f140 80a1 	bpl.w	8004c38 <_svfprintf_r+0x2fc>
 8004af6:	3707      	adds	r7, #7
 8004af8:	f027 0707 	bic.w	r7, r7, #7
 8004afc:	f107 0308 	add.w	r3, r7, #8
 8004b00:	9308      	str	r3, [sp, #32]
 8004b02:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	f177 0300 	sbcs.w	r3, r7, #0
 8004b0c:	da05      	bge.n	8004b1a <_svfprintf_r+0x1de>
 8004b0e:	232d      	movs	r3, #45	; 0x2d
 8004b10:	4276      	negs	r6, r6
 8004b12:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004b16:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e2c7      	b.n	80050ae <_svfprintf_r+0x772>
 8004b1e:	b10b      	cbz	r3, 8004b24 <_svfprintf_r+0x1e8>
 8004b20:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004b24:	4ba0      	ldr	r3, [pc, #640]	; (8004da8 <_svfprintf_r+0x46c>)
 8004b26:	9315      	str	r3, [sp, #84]	; 0x54
 8004b28:	06ab      	lsls	r3, r5, #26
 8004b2a:	f140 8336 	bpl.w	800519a <_svfprintf_r+0x85e>
 8004b2e:	3707      	adds	r7, #7
 8004b30:	f027 0707 	bic.w	r7, r7, #7
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	9308      	str	r3, [sp, #32]
 8004b3a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004b3e:	07e8      	lsls	r0, r5, #31
 8004b40:	d50b      	bpl.n	8004b5a <_svfprintf_r+0x21e>
 8004b42:	ea56 0307 	orrs.w	r3, r6, r7
 8004b46:	d008      	beq.n	8004b5a <_svfprintf_r+0x21e>
 8004b48:	2330      	movs	r3, #48	; 0x30
 8004b4a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8004b4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004b52:	f045 0502 	orr.w	r5, r5, #2
 8004b56:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e2a4      	b.n	80050a8 <_svfprintf_r+0x76c>
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	d1bf      	bne.n	8004ae2 <_svfprintf_r+0x1a6>
 8004b62:	2301      	movs	r3, #1
 8004b64:	2220      	movs	r2, #32
 8004b66:	e7bc      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004b68:	f045 0501 	orr.w	r5, r5, #1
 8004b6c:	e7b9      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004b6e:	683e      	ldr	r6, [r7, #0]
 8004b70:	1d39      	adds	r1, r7, #4
 8004b72:	2e00      	cmp	r6, #0
 8004b74:	960c      	str	r6, [sp, #48]	; 0x30
 8004b76:	dab6      	bge.n	8004ae6 <_svfprintf_r+0x1aa>
 8004b78:	460f      	mov	r7, r1
 8004b7a:	4276      	negs	r6, r6
 8004b7c:	960c      	str	r6, [sp, #48]	; 0x30
 8004b7e:	f045 0504 	orr.w	r5, r5, #4
 8004b82:	e7ae      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b86:	1c4e      	adds	r6, r1, #1
 8004b88:	7809      	ldrb	r1, [r1, #0]
 8004b8a:	292a      	cmp	r1, #42	; 0x2a
 8004b8c:	9106      	str	r1, [sp, #24]
 8004b8e:	d010      	beq.n	8004bb2 <_svfprintf_r+0x276>
 8004b90:	f04f 0b00 	mov.w	fp, #0
 8004b94:	9609      	str	r6, [sp, #36]	; 0x24
 8004b96:	9906      	ldr	r1, [sp, #24]
 8004b98:	3930      	subs	r1, #48	; 0x30
 8004b9a:	2909      	cmp	r1, #9
 8004b9c:	f63f af33 	bhi.w	8004a06 <_svfprintf_r+0xca>
 8004ba0:	fb00 1b0b 	mla	fp, r0, fp, r1
 8004ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ba6:	460e      	mov	r6, r1
 8004ba8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004bac:	9106      	str	r1, [sp, #24]
 8004bae:	9609      	str	r6, [sp, #36]	; 0x24
 8004bb0:	e7f1      	b.n	8004b96 <_svfprintf_r+0x25a>
 8004bb2:	6839      	ldr	r1, [r7, #0]
 8004bb4:	9609      	str	r6, [sp, #36]	; 0x24
 8004bb6:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8004bba:	3704      	adds	r7, #4
 8004bbc:	e791      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004bbe:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004bc2:	e78e      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	910c      	str	r1, [sp, #48]	; 0x30
 8004bc8:	9906      	ldr	r1, [sp, #24]
 8004bca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004bcc:	3930      	subs	r1, #48	; 0x30
 8004bce:	fb00 1106 	mla	r1, r0, r6, r1
 8004bd2:	910c      	str	r1, [sp, #48]	; 0x30
 8004bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bd6:	460e      	mov	r6, r1
 8004bd8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004bdc:	9106      	str	r1, [sp, #24]
 8004bde:	9906      	ldr	r1, [sp, #24]
 8004be0:	9609      	str	r6, [sp, #36]	; 0x24
 8004be2:	3930      	subs	r1, #48	; 0x30
 8004be4:	2909      	cmp	r1, #9
 8004be6:	d9ef      	bls.n	8004bc8 <_svfprintf_r+0x28c>
 8004be8:	e70d      	b.n	8004a06 <_svfprintf_r+0xca>
 8004bea:	f045 0508 	orr.w	r5, r5, #8
 8004bee:	e778      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004bf0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004bf4:	e775      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bf8:	7809      	ldrb	r1, [r1, #0]
 8004bfa:	296c      	cmp	r1, #108	; 0x6c
 8004bfc:	d105      	bne.n	8004c0a <_svfprintf_r+0x2ce>
 8004bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c00:	3101      	adds	r1, #1
 8004c02:	9109      	str	r1, [sp, #36]	; 0x24
 8004c04:	f045 0520 	orr.w	r5, r5, #32
 8004c08:	e76b      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004c0a:	f045 0510 	orr.w	r5, r5, #16
 8004c0e:	e768      	b.n	8004ae2 <_svfprintf_r+0x1a6>
 8004c10:	2600      	movs	r6, #0
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	9308      	str	r3, [sp, #32]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8004c1c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8004c20:	f04f 0b01 	mov.w	fp, #1
 8004c24:	4637      	mov	r7, r6
 8004c26:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8004c2a:	e11c      	b.n	8004e66 <_svfprintf_r+0x52a>
 8004c2c:	b10b      	cbz	r3, 8004c32 <_svfprintf_r+0x2f6>
 8004c2e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004c32:	f045 0510 	orr.w	r5, r5, #16
 8004c36:	e75b      	b.n	8004af0 <_svfprintf_r+0x1b4>
 8004c38:	f015 0f10 	tst.w	r5, #16
 8004c3c:	f107 0304 	add.w	r3, r7, #4
 8004c40:	d003      	beq.n	8004c4a <_svfprintf_r+0x30e>
 8004c42:	683e      	ldr	r6, [r7, #0]
 8004c44:	9308      	str	r3, [sp, #32]
 8004c46:	17f7      	asrs	r7, r6, #31
 8004c48:	e75d      	b.n	8004b06 <_svfprintf_r+0x1ca>
 8004c4a:	683e      	ldr	r6, [r7, #0]
 8004c4c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c50:	9308      	str	r3, [sp, #32]
 8004c52:	bf18      	it	ne
 8004c54:	b236      	sxthne	r6, r6
 8004c56:	e7f6      	b.n	8004c46 <_svfprintf_r+0x30a>
 8004c58:	b10b      	cbz	r3, 8004c5e <_svfprintf_r+0x322>
 8004c5a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004c5e:	3707      	adds	r7, #7
 8004c60:	f027 0707 	bic.w	r7, r7, #7
 8004c64:	f107 0308 	add.w	r3, r7, #8
 8004c68:	9308      	str	r3, [sp, #32]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	930d      	str	r3, [sp, #52]	; 0x34
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004c76:	930e      	str	r3, [sp, #56]	; 0x38
 8004c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8004c80:	4631      	mov	r1, r6
 8004c82:	4b4a      	ldr	r3, [pc, #296]	; (8004dac <_svfprintf_r+0x470>)
 8004c84:	f7fb febe 	bl	8000a04 <__aeabi_dcmpun>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	f040 85dc 	bne.w	8005846 <_svfprintf_r+0xf0a>
 8004c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c92:	4b46      	ldr	r3, [pc, #280]	; (8004dac <_svfprintf_r+0x470>)
 8004c94:	4638      	mov	r0, r7
 8004c96:	4631      	mov	r1, r6
 8004c98:	f7fb fe96 	bl	80009c8 <__aeabi_dcmple>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f040 85d2 	bne.w	8005846 <_svfprintf_r+0xf0a>
 8004ca2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ca6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ca8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004caa:	f7fb fe83 	bl	80009b4 <__aeabi_dcmplt>
 8004cae:	b110      	cbz	r0, 8004cb6 <_svfprintf_r+0x37a>
 8004cb0:	232d      	movs	r3, #45	; 0x2d
 8004cb2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <_svfprintf_r+0x474>)
 8004cb8:	4a3e      	ldr	r2, [pc, #248]	; (8004db4 <_svfprintf_r+0x478>)
 8004cba:	9906      	ldr	r1, [sp, #24]
 8004cbc:	f04f 0b03 	mov.w	fp, #3
 8004cc0:	2947      	cmp	r1, #71	; 0x47
 8004cc2:	bfcc      	ite	gt
 8004cc4:	4690      	movgt	r8, r2
 8004cc6:	4698      	movle	r8, r3
 8004cc8:	2600      	movs	r6, #0
 8004cca:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004cce:	4637      	mov	r7, r6
 8004cd0:	e0c9      	b.n	8004e66 <_svfprintf_r+0x52a>
 8004cd2:	f1bb 3fff 	cmp.w	fp, #4294967295
 8004cd6:	d026      	beq.n	8004d26 <_svfprintf_r+0x3ea>
 8004cd8:	9b06      	ldr	r3, [sp, #24]
 8004cda:	f023 0320 	bic.w	r3, r3, #32
 8004cde:	2b47      	cmp	r3, #71	; 0x47
 8004ce0:	d104      	bne.n	8004cec <_svfprintf_r+0x3b0>
 8004ce2:	f1bb 0f00 	cmp.w	fp, #0
 8004ce6:	bf08      	it	eq
 8004ce8:	f04f 0b01 	moveq.w	fp, #1
 8004cec:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004cf0:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf4:	1e1f      	subs	r7, r3, #0
 8004cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf8:	bfa8      	it	ge
 8004cfa:	9710      	strge	r7, [sp, #64]	; 0x40
 8004cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cfe:	bfbd      	ittte	lt
 8004d00:	463b      	movlt	r3, r7
 8004d02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d06:	9310      	strlt	r3, [sp, #64]	; 0x40
 8004d08:	2300      	movge	r3, #0
 8004d0a:	bfb8      	it	lt
 8004d0c:	232d      	movlt	r3, #45	; 0x2d
 8004d0e:	9316      	str	r3, [sp, #88]	; 0x58
 8004d10:	9b06      	ldr	r3, [sp, #24]
 8004d12:	f023 0720 	bic.w	r7, r3, #32
 8004d16:	2f46      	cmp	r7, #70	; 0x46
 8004d18:	d008      	beq.n	8004d2c <_svfprintf_r+0x3f0>
 8004d1a:	2f45      	cmp	r7, #69	; 0x45
 8004d1c:	d142      	bne.n	8004da4 <_svfprintf_r+0x468>
 8004d1e:	f10b 0601 	add.w	r6, fp, #1
 8004d22:	2302      	movs	r3, #2
 8004d24:	e004      	b.n	8004d30 <_svfprintf_r+0x3f4>
 8004d26:	f04f 0b06 	mov.w	fp, #6
 8004d2a:	e7df      	b.n	8004cec <_svfprintf_r+0x3b0>
 8004d2c:	465e      	mov	r6, fp
 8004d2e:	2303      	movs	r3, #3
 8004d30:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d32:	9204      	str	r2, [sp, #16]
 8004d34:	aa1c      	add	r2, sp, #112	; 0x70
 8004d36:	9203      	str	r2, [sp, #12]
 8004d38:	aa1b      	add	r2, sp, #108	; 0x6c
 8004d3a:	9202      	str	r2, [sp, #8]
 8004d3c:	e88d 0048 	stmia.w	sp, {r3, r6}
 8004d40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d44:	4650      	mov	r0, sl
 8004d46:	f000 fe57 	bl	80059f8 <_dtoa_r>
 8004d4a:	2f47      	cmp	r7, #71	; 0x47
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	d102      	bne.n	8004d56 <_svfprintf_r+0x41a>
 8004d50:	07e8      	lsls	r0, r5, #31
 8004d52:	f140 8585 	bpl.w	8005860 <_svfprintf_r+0xf24>
 8004d56:	eb08 0306 	add.w	r3, r8, r6
 8004d5a:	2f46      	cmp	r7, #70	; 0x46
 8004d5c:	9307      	str	r3, [sp, #28]
 8004d5e:	d111      	bne.n	8004d84 <_svfprintf_r+0x448>
 8004d60:	f898 3000 	ldrb.w	r3, [r8]
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d109      	bne.n	8004d7c <_svfprintf_r+0x440>
 8004d68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d6e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004d70:	f7fb fe16 	bl	80009a0 <__aeabi_dcmpeq>
 8004d74:	b910      	cbnz	r0, 8004d7c <_svfprintf_r+0x440>
 8004d76:	f1c6 0601 	rsb	r6, r6, #1
 8004d7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8004d7c:	9a07      	ldr	r2, [sp, #28]
 8004d7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d80:	441a      	add	r2, r3
 8004d82:	9207      	str	r2, [sp, #28]
 8004d84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d88:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d8a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004d8c:	f7fb fe08 	bl	80009a0 <__aeabi_dcmpeq>
 8004d90:	b990      	cbnz	r0, 8004db8 <_svfprintf_r+0x47c>
 8004d92:	2230      	movs	r2, #48	; 0x30
 8004d94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d96:	9907      	ldr	r1, [sp, #28]
 8004d98:	4299      	cmp	r1, r3
 8004d9a:	d90f      	bls.n	8004dbc <_svfprintf_r+0x480>
 8004d9c:	1c59      	adds	r1, r3, #1
 8004d9e:	911f      	str	r1, [sp, #124]	; 0x7c
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e7f7      	b.n	8004d94 <_svfprintf_r+0x458>
 8004da4:	465e      	mov	r6, fp
 8004da6:	e7bc      	b.n	8004d22 <_svfprintf_r+0x3e6>
 8004da8:	08007a79 	.word	0x08007a79
 8004dac:	7fefffff 	.word	0x7fefffff
 8004db0:	08007a69 	.word	0x08007a69
 8004db4:	08007a6d 	.word	0x08007a6d
 8004db8:	9b07      	ldr	r3, [sp, #28]
 8004dba:	931f      	str	r3, [sp, #124]	; 0x7c
 8004dbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004dbe:	2f47      	cmp	r7, #71	; 0x47
 8004dc0:	eba3 0308 	sub.w	r3, r3, r8
 8004dc4:	9307      	str	r3, [sp, #28]
 8004dc6:	f040 8100 	bne.w	8004fca <_svfprintf_r+0x68e>
 8004dca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dcc:	1cd9      	adds	r1, r3, #3
 8004dce:	db02      	blt.n	8004dd6 <_svfprintf_r+0x49a>
 8004dd0:	459b      	cmp	fp, r3
 8004dd2:	f280 8126 	bge.w	8005022 <_svfprintf_r+0x6e6>
 8004dd6:	9b06      	ldr	r3, [sp, #24]
 8004dd8:	3b02      	subs	r3, #2
 8004dda:	9306      	str	r3, [sp, #24]
 8004ddc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004dde:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8004de2:	1e53      	subs	r3, r2, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bfa8      	it	ge
 8004de8:	222b      	movge	r2, #43	; 0x2b
 8004dea:	931b      	str	r3, [sp, #108]	; 0x6c
 8004dec:	bfbc      	itt	lt
 8004dee:	f1c2 0301 	rsblt	r3, r2, #1
 8004df2:	222d      	movlt	r2, #45	; 0x2d
 8004df4:	2b09      	cmp	r3, #9
 8004df6:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8004dfa:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8004dfe:	f340 8100 	ble.w	8005002 <_svfprintf_r+0x6c6>
 8004e02:	260a      	movs	r6, #10
 8004e04:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8004e08:	fb93 f0f6 	sdiv	r0, r3, r6
 8004e0c:	fb06 3310 	mls	r3, r6, r0, r3
 8004e10:	2809      	cmp	r0, #9
 8004e12:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8004e16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e1a:	f102 31ff 	add.w	r1, r2, #4294967295
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f300 80e8 	bgt.w	8004ff4 <_svfprintf_r+0x6b8>
 8004e24:	3330      	adds	r3, #48	; 0x30
 8004e26:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004e2a:	3a02      	subs	r2, #2
 8004e2c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8004e30:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8004e34:	4282      	cmp	r2, r0
 8004e36:	4619      	mov	r1, r3
 8004e38:	f0c0 80de 	bcc.w	8004ff8 <_svfprintf_r+0x6bc>
 8004e3c:	9a07      	ldr	r2, [sp, #28]
 8004e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e40:	1acb      	subs	r3, r1, r3
 8004e42:	2a01      	cmp	r2, #1
 8004e44:	9314      	str	r3, [sp, #80]	; 0x50
 8004e46:	eb03 0b02 	add.w	fp, r3, r2
 8004e4a:	dc02      	bgt.n	8004e52 <_svfprintf_r+0x516>
 8004e4c:	f015 0701 	ands.w	r7, r5, #1
 8004e50:	d002      	beq.n	8004e58 <_svfprintf_r+0x51c>
 8004e52:	2700      	movs	r7, #0
 8004e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e56:	449b      	add	fp, r3
 8004e58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e5a:	b113      	cbz	r3, 8004e62 <_svfprintf_r+0x526>
 8004e5c:	232d      	movs	r3, #45	; 0x2d
 8004e5e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004e62:	2600      	movs	r6, #0
 8004e64:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004e66:	455e      	cmp	r6, fp
 8004e68:	4633      	mov	r3, r6
 8004e6a:	bfb8      	it	lt
 8004e6c:	465b      	movlt	r3, fp
 8004e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e70:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004e74:	b113      	cbz	r3, 8004e7c <_svfprintf_r+0x540>
 8004e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e78:	3301      	adds	r3, #1
 8004e7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e7c:	f015 0302 	ands.w	r3, r5, #2
 8004e80:	9316      	str	r3, [sp, #88]	; 0x58
 8004e82:	bf1e      	ittt	ne
 8004e84:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8004e86:	3302      	addne	r3, #2
 8004e88:	930f      	strne	r3, [sp, #60]	; 0x3c
 8004e8a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8004e8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004e90:	d118      	bne.n	8004ec4 <_svfprintf_r+0x588>
 8004e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	9310      	str	r3, [sp, #64]	; 0x40
 8004e9c:	dd12      	ble.n	8004ec4 <_svfprintf_r+0x588>
 8004e9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	4bab      	ldr	r3, [pc, #684]	; (8005150 <_svfprintf_r+0x814>)
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	f300 81d9 	bgt.w	800525c <_svfprintf_r+0x920>
 8004eaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004eae:	6063      	str	r3, [r4, #4]
 8004eb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004eb2:	4413      	add	r3, r2
 8004eb4:	9323      	str	r3, [sp, #140]	; 0x8c
 8004eb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eb8:	3301      	adds	r3, #1
 8004eba:	2b07      	cmp	r3, #7
 8004ebc:	9322      	str	r3, [sp, #136]	; 0x88
 8004ebe:	f300 81e6 	bgt.w	800528e <_svfprintf_r+0x952>
 8004ec2:	3408      	adds	r4, #8
 8004ec4:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004ec8:	b173      	cbz	r3, 8004ee8 <_svfprintf_r+0x5ac>
 8004eca:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	6063      	str	r3, [r4, #4]
 8004ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	9323      	str	r3, [sp, #140]	; 0x8c
 8004eda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004edc:	3301      	adds	r3, #1
 8004ede:	2b07      	cmp	r3, #7
 8004ee0:	9322      	str	r3, [sp, #136]	; 0x88
 8004ee2:	f300 81de 	bgt.w	80052a2 <_svfprintf_r+0x966>
 8004ee6:	3408      	adds	r4, #8
 8004ee8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004eea:	b16b      	cbz	r3, 8004f08 <_svfprintf_r+0x5cc>
 8004eec:	ab1a      	add	r3, sp, #104	; 0x68
 8004eee:	6023      	str	r3, [r4, #0]
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ef6:	3302      	adds	r3, #2
 8004ef8:	9323      	str	r3, [sp, #140]	; 0x8c
 8004efa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004efc:	3301      	adds	r3, #1
 8004efe:	2b07      	cmp	r3, #7
 8004f00:	9322      	str	r3, [sp, #136]	; 0x88
 8004f02:	f300 81d8 	bgt.w	80052b6 <_svfprintf_r+0x97a>
 8004f06:	3408      	adds	r4, #8
 8004f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f0a:	2b80      	cmp	r3, #128	; 0x80
 8004f0c:	d118      	bne.n	8004f40 <_svfprintf_r+0x604>
 8004f0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	9310      	str	r3, [sp, #64]	; 0x40
 8004f18:	dd12      	ble.n	8004f40 <_svfprintf_r+0x604>
 8004f1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	4b8d      	ldr	r3, [pc, #564]	; (8005154 <_svfprintf_r+0x818>)
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	f300 81d2 	bgt.w	80052ca <_svfprintf_r+0x98e>
 8004f26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f2a:	6063      	str	r3, [r4, #4]
 8004f2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f2e:	4413      	add	r3, r2
 8004f30:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f34:	3301      	adds	r3, #1
 8004f36:	2b07      	cmp	r3, #7
 8004f38:	9322      	str	r3, [sp, #136]	; 0x88
 8004f3a:	f300 81df 	bgt.w	80052fc <_svfprintf_r+0x9c0>
 8004f3e:	3408      	adds	r4, #8
 8004f40:	eba6 060b 	sub.w	r6, r6, fp
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	dd0f      	ble.n	8004f68 <_svfprintf_r+0x62c>
 8004f48:	4b82      	ldr	r3, [pc, #520]	; (8005154 <_svfprintf_r+0x818>)
 8004f4a:	2e10      	cmp	r6, #16
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	f300 81df 	bgt.w	8005310 <_svfprintf_r+0x9d4>
 8004f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f54:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004f56:	3301      	adds	r3, #1
 8004f58:	6066      	str	r6, [r4, #4]
 8004f5a:	2b07      	cmp	r3, #7
 8004f5c:	4406      	add	r6, r0
 8004f5e:	9623      	str	r6, [sp, #140]	; 0x8c
 8004f60:	9322      	str	r3, [sp, #136]	; 0x88
 8004f62:	f300 81ec 	bgt.w	800533e <_svfprintf_r+0xa02>
 8004f66:	3408      	adds	r4, #8
 8004f68:	05eb      	lsls	r3, r5, #23
 8004f6a:	f100 81f2 	bmi.w	8005352 <_svfprintf_r+0xa16>
 8004f6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f70:	e884 0900 	stmia.w	r4, {r8, fp}
 8004f74:	445b      	add	r3, fp
 8004f76:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	2b07      	cmp	r3, #7
 8004f7e:	9322      	str	r3, [sp, #136]	; 0x88
 8004f80:	f340 8419 	ble.w	80057b6 <_svfprintf_r+0xe7a>
 8004f84:	aa21      	add	r2, sp, #132	; 0x84
 8004f86:	4649      	mov	r1, r9
 8004f88:	4650      	mov	r0, sl
 8004f8a:	f002 f849 	bl	8007020 <__ssprint_r>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f040 8431 	bne.w	80057f6 <_svfprintf_r+0xeba>
 8004f94:	ac2e      	add	r4, sp, #184	; 0xb8
 8004f96:	076b      	lsls	r3, r5, #29
 8004f98:	f100 8410 	bmi.w	80057bc <_svfprintf_r+0xe80>
 8004f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fa2:	428a      	cmp	r2, r1
 8004fa4:	bfac      	ite	ge
 8004fa6:	189b      	addge	r3, r3, r2
 8004fa8:	185b      	addlt	r3, r3, r1
 8004faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fae:	b13b      	cbz	r3, 8004fc0 <_svfprintf_r+0x684>
 8004fb0:	aa21      	add	r2, sp, #132	; 0x84
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4650      	mov	r0, sl
 8004fb6:	f002 f833 	bl	8007020 <__ssprint_r>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f040 841b 	bne.w	80057f6 <_svfprintf_r+0xeba>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	9f08      	ldr	r7, [sp, #32]
 8004fc4:	9322      	str	r3, [sp, #136]	; 0x88
 8004fc6:	ac2e      	add	r4, sp, #184	; 0xb8
 8004fc8:	e4f2      	b.n	80049b0 <_svfprintf_r+0x74>
 8004fca:	9b06      	ldr	r3, [sp, #24]
 8004fcc:	2b65      	cmp	r3, #101	; 0x65
 8004fce:	f77f af05 	ble.w	8004ddc <_svfprintf_r+0x4a0>
 8004fd2:	9b06      	ldr	r3, [sp, #24]
 8004fd4:	2b66      	cmp	r3, #102	; 0x66
 8004fd6:	d124      	bne.n	8005022 <_svfprintf_r+0x6e6>
 8004fd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dd19      	ble.n	8005012 <_svfprintf_r+0x6d6>
 8004fde:	f1bb 0f00 	cmp.w	fp, #0
 8004fe2:	d101      	bne.n	8004fe8 <_svfprintf_r+0x6ac>
 8004fe4:	07ea      	lsls	r2, r5, #31
 8004fe6:	d502      	bpl.n	8004fee <_svfprintf_r+0x6b2>
 8004fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fea:	4413      	add	r3, r2
 8004fec:	445b      	add	r3, fp
 8004fee:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004ff0:	469b      	mov	fp, r3
 8004ff2:	e731      	b.n	8004e58 <_svfprintf_r+0x51c>
 8004ff4:	460a      	mov	r2, r1
 8004ff6:	e707      	b.n	8004e08 <_svfprintf_r+0x4cc>
 8004ff8:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8005000:	e718      	b.n	8004e34 <_svfprintf_r+0x4f8>
 8005002:	2230      	movs	r2, #48	; 0x30
 8005004:	4413      	add	r3, r2
 8005006:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800500a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800500e:	a91e      	add	r1, sp, #120	; 0x78
 8005010:	e714      	b.n	8004e3c <_svfprintf_r+0x500>
 8005012:	f1bb 0f00 	cmp.w	fp, #0
 8005016:	d101      	bne.n	800501c <_svfprintf_r+0x6e0>
 8005018:	07eb      	lsls	r3, r5, #31
 800501a:	d515      	bpl.n	8005048 <_svfprintf_r+0x70c>
 800501c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800501e:	3301      	adds	r3, #1
 8005020:	e7e4      	b.n	8004fec <_svfprintf_r+0x6b0>
 8005022:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005024:	9b07      	ldr	r3, [sp, #28]
 8005026:	429a      	cmp	r2, r3
 8005028:	db06      	blt.n	8005038 <_svfprintf_r+0x6fc>
 800502a:	07ef      	lsls	r7, r5, #31
 800502c:	d50e      	bpl.n	800504c <_svfprintf_r+0x710>
 800502e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005030:	4413      	add	r3, r2
 8005032:	2267      	movs	r2, #103	; 0x67
 8005034:	9206      	str	r2, [sp, #24]
 8005036:	e7da      	b.n	8004fee <_svfprintf_r+0x6b2>
 8005038:	9b07      	ldr	r3, [sp, #28]
 800503a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800503c:	2a00      	cmp	r2, #0
 800503e:	440b      	add	r3, r1
 8005040:	dcf7      	bgt.n	8005032 <_svfprintf_r+0x6f6>
 8005042:	f1c2 0201 	rsb	r2, r2, #1
 8005046:	e7f3      	b.n	8005030 <_svfprintf_r+0x6f4>
 8005048:	2301      	movs	r3, #1
 800504a:	e7d0      	b.n	8004fee <_svfprintf_r+0x6b2>
 800504c:	4613      	mov	r3, r2
 800504e:	e7f0      	b.n	8005032 <_svfprintf_r+0x6f6>
 8005050:	b10b      	cbz	r3, 8005056 <_svfprintf_r+0x71a>
 8005052:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005056:	f015 0f20 	tst.w	r5, #32
 800505a:	f107 0304 	add.w	r3, r7, #4
 800505e:	d008      	beq.n	8005072 <_svfprintf_r+0x736>
 8005060:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	17ce      	asrs	r6, r1, #31
 8005066:	4608      	mov	r0, r1
 8005068:	4631      	mov	r1, r6
 800506a:	e9c2 0100 	strd	r0, r1, [r2]
 800506e:	461f      	mov	r7, r3
 8005070:	e49e      	b.n	80049b0 <_svfprintf_r+0x74>
 8005072:	06ee      	lsls	r6, r5, #27
 8005074:	d503      	bpl.n	800507e <_svfprintf_r+0x742>
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800507a:	6011      	str	r1, [r2, #0]
 800507c:	e7f7      	b.n	800506e <_svfprintf_r+0x732>
 800507e:	0668      	lsls	r0, r5, #25
 8005080:	d5f9      	bpl.n	8005076 <_svfprintf_r+0x73a>
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8005088:	8011      	strh	r1, [r2, #0]
 800508a:	e7f0      	b.n	800506e <_svfprintf_r+0x732>
 800508c:	f045 0510 	orr.w	r5, r5, #16
 8005090:	f015 0320 	ands.w	r3, r5, #32
 8005094:	d022      	beq.n	80050dc <_svfprintf_r+0x7a0>
 8005096:	3707      	adds	r7, #7
 8005098:	f027 0707 	bic.w	r7, r7, #7
 800509c:	f107 0308 	add.w	r3, r7, #8
 80050a0:	9308      	str	r3, [sp, #32]
 80050a2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80050a6:	2300      	movs	r3, #0
 80050a8:	2200      	movs	r2, #0
 80050aa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80050ae:	f1bb 3fff 	cmp.w	fp, #4294967295
 80050b2:	f000 83db 	beq.w	800586c <_svfprintf_r+0xf30>
 80050b6:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80050ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80050bc:	ea56 0207 	orrs.w	r2, r6, r7
 80050c0:	f040 83d9 	bne.w	8005876 <_svfprintf_r+0xf3a>
 80050c4:	f1bb 0f00 	cmp.w	fp, #0
 80050c8:	f000 80aa 	beq.w	8005220 <_svfprintf_r+0x8e4>
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d076      	beq.n	80051be <_svfprintf_r+0x882>
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	f000 8091 	beq.w	80051f8 <_svfprintf_r+0x8bc>
 80050d6:	2600      	movs	r6, #0
 80050d8:	2700      	movs	r7, #0
 80050da:	e3d2      	b.n	8005882 <_svfprintf_r+0xf46>
 80050dc:	1d3a      	adds	r2, r7, #4
 80050de:	f015 0110 	ands.w	r1, r5, #16
 80050e2:	9208      	str	r2, [sp, #32]
 80050e4:	d002      	beq.n	80050ec <_svfprintf_r+0x7b0>
 80050e6:	683e      	ldr	r6, [r7, #0]
 80050e8:	2700      	movs	r7, #0
 80050ea:	e7dd      	b.n	80050a8 <_svfprintf_r+0x76c>
 80050ec:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80050f0:	d0f9      	beq.n	80050e6 <_svfprintf_r+0x7aa>
 80050f2:	883e      	ldrh	r6, [r7, #0]
 80050f4:	2700      	movs	r7, #0
 80050f6:	e7d6      	b.n	80050a6 <_svfprintf_r+0x76a>
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	9308      	str	r3, [sp, #32]
 80050fc:	2330      	movs	r3, #48	; 0x30
 80050fe:	2278      	movs	r2, #120	; 0x78
 8005100:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8005104:	4b14      	ldr	r3, [pc, #80]	; (8005158 <_svfprintf_r+0x81c>)
 8005106:	683e      	ldr	r6, [r7, #0]
 8005108:	9315      	str	r3, [sp, #84]	; 0x54
 800510a:	2700      	movs	r7, #0
 800510c:	f045 0502 	orr.w	r5, r5, #2
 8005110:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8005114:	2302      	movs	r3, #2
 8005116:	9206      	str	r2, [sp, #24]
 8005118:	e7c6      	b.n	80050a8 <_svfprintf_r+0x76c>
 800511a:	2600      	movs	r6, #0
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005122:	9308      	str	r3, [sp, #32]
 8005124:	f8d7 8000 	ldr.w	r8, [r7]
 8005128:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800512c:	d00a      	beq.n	8005144 <_svfprintf_r+0x808>
 800512e:	465a      	mov	r2, fp
 8005130:	4631      	mov	r1, r6
 8005132:	4640      	mov	r0, r8
 8005134:	f001 fc6c 	bl	8006a10 <memchr>
 8005138:	2800      	cmp	r0, #0
 800513a:	f000 808d 	beq.w	8005258 <_svfprintf_r+0x91c>
 800513e:	eba0 0b08 	sub.w	fp, r0, r8
 8005142:	e5c4      	b.n	8004cce <_svfprintf_r+0x392>
 8005144:	4640      	mov	r0, r8
 8005146:	f7fb f803 	bl	8000150 <strlen>
 800514a:	4683      	mov	fp, r0
 800514c:	e5bf      	b.n	8004cce <_svfprintf_r+0x392>
 800514e:	bf00      	nop
 8005150:	08007a9d 	.word	0x08007a9d
 8005154:	08007aad 	.word	0x08007aad
 8005158:	08007a8a 	.word	0x08007a8a
 800515c:	f045 0510 	orr.w	r5, r5, #16
 8005160:	06a9      	lsls	r1, r5, #26
 8005162:	d509      	bpl.n	8005178 <_svfprintf_r+0x83c>
 8005164:	3707      	adds	r7, #7
 8005166:	f027 0707 	bic.w	r7, r7, #7
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	9308      	str	r3, [sp, #32]
 8005170:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005174:	2301      	movs	r3, #1
 8005176:	e797      	b.n	80050a8 <_svfprintf_r+0x76c>
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	f015 0f10 	tst.w	r5, #16
 800517e:	9308      	str	r3, [sp, #32]
 8005180:	d001      	beq.n	8005186 <_svfprintf_r+0x84a>
 8005182:	683e      	ldr	r6, [r7, #0]
 8005184:	e002      	b.n	800518c <_svfprintf_r+0x850>
 8005186:	066a      	lsls	r2, r5, #25
 8005188:	d5fb      	bpl.n	8005182 <_svfprintf_r+0x846>
 800518a:	883e      	ldrh	r6, [r7, #0]
 800518c:	2700      	movs	r7, #0
 800518e:	e7f1      	b.n	8005174 <_svfprintf_r+0x838>
 8005190:	b10b      	cbz	r3, 8005196 <_svfprintf_r+0x85a>
 8005192:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005196:	4ba3      	ldr	r3, [pc, #652]	; (8005424 <_svfprintf_r+0xae8>)
 8005198:	e4c5      	b.n	8004b26 <_svfprintf_r+0x1ea>
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	f015 0f10 	tst.w	r5, #16
 80051a0:	9308      	str	r3, [sp, #32]
 80051a2:	d001      	beq.n	80051a8 <_svfprintf_r+0x86c>
 80051a4:	683e      	ldr	r6, [r7, #0]
 80051a6:	e002      	b.n	80051ae <_svfprintf_r+0x872>
 80051a8:	066e      	lsls	r6, r5, #25
 80051aa:	d5fb      	bpl.n	80051a4 <_svfprintf_r+0x868>
 80051ac:	883e      	ldrh	r6, [r7, #0]
 80051ae:	2700      	movs	r7, #0
 80051b0:	e4c5      	b.n	8004b3e <_svfprintf_r+0x202>
 80051b2:	4643      	mov	r3, r8
 80051b4:	e366      	b.n	8005884 <_svfprintf_r+0xf48>
 80051b6:	2f00      	cmp	r7, #0
 80051b8:	bf08      	it	eq
 80051ba:	2e0a      	cmpeq	r6, #10
 80051bc:	d205      	bcs.n	80051ca <_svfprintf_r+0x88e>
 80051be:	3630      	adds	r6, #48	; 0x30
 80051c0:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80051c4:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80051c8:	e377      	b.n	80058ba <_svfprintf_r+0xf7e>
 80051ca:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	220a      	movs	r2, #10
 80051d4:	2300      	movs	r3, #0
 80051d6:	f7fb feb1 	bl	8000f3c <__aeabi_uldivmod>
 80051da:	3230      	adds	r2, #48	; 0x30
 80051dc:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80051e0:	2300      	movs	r3, #0
 80051e2:	4630      	mov	r0, r6
 80051e4:	4639      	mov	r1, r7
 80051e6:	220a      	movs	r2, #10
 80051e8:	f7fb fea8 	bl	8000f3c <__aeabi_uldivmod>
 80051ec:	4606      	mov	r6, r0
 80051ee:	460f      	mov	r7, r1
 80051f0:	ea56 0307 	orrs.w	r3, r6, r7
 80051f4:	d1eb      	bne.n	80051ce <_svfprintf_r+0x892>
 80051f6:	e360      	b.n	80058ba <_svfprintf_r+0xf7e>
 80051f8:	2600      	movs	r6, #0
 80051fa:	2700      	movs	r7, #0
 80051fc:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005200:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005202:	f006 030f 	and.w	r3, r6, #15
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	093a      	lsrs	r2, r7, #4
 800520a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800520e:	0933      	lsrs	r3, r6, #4
 8005210:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005214:	461e      	mov	r6, r3
 8005216:	4617      	mov	r7, r2
 8005218:	ea56 0307 	orrs.w	r3, r6, r7
 800521c:	d1f0      	bne.n	8005200 <_svfprintf_r+0x8c4>
 800521e:	e34c      	b.n	80058ba <_svfprintf_r+0xf7e>
 8005220:	b93b      	cbnz	r3, 8005232 <_svfprintf_r+0x8f6>
 8005222:	07ea      	lsls	r2, r5, #31
 8005224:	d505      	bpl.n	8005232 <_svfprintf_r+0x8f6>
 8005226:	2330      	movs	r3, #48	; 0x30
 8005228:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800522c:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005230:	e343      	b.n	80058ba <_svfprintf_r+0xf7e>
 8005232:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005236:	e340      	b.n	80058ba <_svfprintf_r+0xf7e>
 8005238:	b10b      	cbz	r3, 800523e <_svfprintf_r+0x902>
 800523a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800523e:	9b06      	ldr	r3, [sp, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 82f7 	beq.w	8005834 <_svfprintf_r+0xef8>
 8005246:	2600      	movs	r6, #0
 8005248:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800524c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005250:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005254:	9708      	str	r7, [sp, #32]
 8005256:	e4e3      	b.n	8004c20 <_svfprintf_r+0x2e4>
 8005258:	4606      	mov	r6, r0
 800525a:	e538      	b.n	8004cce <_svfprintf_r+0x392>
 800525c:	2310      	movs	r3, #16
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005262:	3310      	adds	r3, #16
 8005264:	9323      	str	r3, [sp, #140]	; 0x8c
 8005266:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005268:	3301      	adds	r3, #1
 800526a:	2b07      	cmp	r3, #7
 800526c:	9322      	str	r3, [sp, #136]	; 0x88
 800526e:	dc04      	bgt.n	800527a <_svfprintf_r+0x93e>
 8005270:	3408      	adds	r4, #8
 8005272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005274:	3b10      	subs	r3, #16
 8005276:	9310      	str	r3, [sp, #64]	; 0x40
 8005278:	e611      	b.n	8004e9e <_svfprintf_r+0x562>
 800527a:	aa21      	add	r2, sp, #132	; 0x84
 800527c:	4649      	mov	r1, r9
 800527e:	4650      	mov	r0, sl
 8005280:	f001 fece 	bl	8007020 <__ssprint_r>
 8005284:	2800      	cmp	r0, #0
 8005286:	f040 82b6 	bne.w	80057f6 <_svfprintf_r+0xeba>
 800528a:	ac2e      	add	r4, sp, #184	; 0xb8
 800528c:	e7f1      	b.n	8005272 <_svfprintf_r+0x936>
 800528e:	aa21      	add	r2, sp, #132	; 0x84
 8005290:	4649      	mov	r1, r9
 8005292:	4650      	mov	r0, sl
 8005294:	f001 fec4 	bl	8007020 <__ssprint_r>
 8005298:	2800      	cmp	r0, #0
 800529a:	f040 82ac 	bne.w	80057f6 <_svfprintf_r+0xeba>
 800529e:	ac2e      	add	r4, sp, #184	; 0xb8
 80052a0:	e610      	b.n	8004ec4 <_svfprintf_r+0x588>
 80052a2:	aa21      	add	r2, sp, #132	; 0x84
 80052a4:	4649      	mov	r1, r9
 80052a6:	4650      	mov	r0, sl
 80052a8:	f001 feba 	bl	8007020 <__ssprint_r>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f040 82a2 	bne.w	80057f6 <_svfprintf_r+0xeba>
 80052b2:	ac2e      	add	r4, sp, #184	; 0xb8
 80052b4:	e618      	b.n	8004ee8 <_svfprintf_r+0x5ac>
 80052b6:	aa21      	add	r2, sp, #132	; 0x84
 80052b8:	4649      	mov	r1, r9
 80052ba:	4650      	mov	r0, sl
 80052bc:	f001 feb0 	bl	8007020 <__ssprint_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	f040 8298 	bne.w	80057f6 <_svfprintf_r+0xeba>
 80052c6:	ac2e      	add	r4, sp, #184	; 0xb8
 80052c8:	e61e      	b.n	8004f08 <_svfprintf_r+0x5cc>
 80052ca:	2310      	movs	r3, #16
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052d0:	3310      	adds	r3, #16
 80052d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80052d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052d6:	3301      	adds	r3, #1
 80052d8:	2b07      	cmp	r3, #7
 80052da:	9322      	str	r3, [sp, #136]	; 0x88
 80052dc:	dc04      	bgt.n	80052e8 <_svfprintf_r+0x9ac>
 80052de:	3408      	adds	r4, #8
 80052e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052e2:	3b10      	subs	r3, #16
 80052e4:	9310      	str	r3, [sp, #64]	; 0x40
 80052e6:	e618      	b.n	8004f1a <_svfprintf_r+0x5de>
 80052e8:	aa21      	add	r2, sp, #132	; 0x84
 80052ea:	4649      	mov	r1, r9
 80052ec:	4650      	mov	r0, sl
 80052ee:	f001 fe97 	bl	8007020 <__ssprint_r>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f040 827f 	bne.w	80057f6 <_svfprintf_r+0xeba>
 80052f8:	ac2e      	add	r4, sp, #184	; 0xb8
 80052fa:	e7f1      	b.n	80052e0 <_svfprintf_r+0x9a4>
 80052fc:	aa21      	add	r2, sp, #132	; 0x84
 80052fe:	4649      	mov	r1, r9
 8005300:	4650      	mov	r0, sl
 8005302:	f001 fe8d 	bl	8007020 <__ssprint_r>
 8005306:	2800      	cmp	r0, #0
 8005308:	f040 8275 	bne.w	80057f6 <_svfprintf_r+0xeba>
 800530c:	ac2e      	add	r4, sp, #184	; 0xb8
 800530e:	e617      	b.n	8004f40 <_svfprintf_r+0x604>
 8005310:	2310      	movs	r3, #16
 8005312:	6063      	str	r3, [r4, #4]
 8005314:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005316:	3310      	adds	r3, #16
 8005318:	9323      	str	r3, [sp, #140]	; 0x8c
 800531a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800531c:	3301      	adds	r3, #1
 800531e:	2b07      	cmp	r3, #7
 8005320:	9322      	str	r3, [sp, #136]	; 0x88
 8005322:	dc02      	bgt.n	800532a <_svfprintf_r+0x9ee>
 8005324:	3408      	adds	r4, #8
 8005326:	3e10      	subs	r6, #16
 8005328:	e60e      	b.n	8004f48 <_svfprintf_r+0x60c>
 800532a:	aa21      	add	r2, sp, #132	; 0x84
 800532c:	4649      	mov	r1, r9
 800532e:	4650      	mov	r0, sl
 8005330:	f001 fe76 	bl	8007020 <__ssprint_r>
 8005334:	2800      	cmp	r0, #0
 8005336:	f040 825e 	bne.w	80057f6 <_svfprintf_r+0xeba>
 800533a:	ac2e      	add	r4, sp, #184	; 0xb8
 800533c:	e7f3      	b.n	8005326 <_svfprintf_r+0x9ea>
 800533e:	aa21      	add	r2, sp, #132	; 0x84
 8005340:	4649      	mov	r1, r9
 8005342:	4650      	mov	r0, sl
 8005344:	f001 fe6c 	bl	8007020 <__ssprint_r>
 8005348:	2800      	cmp	r0, #0
 800534a:	f040 8254 	bne.w	80057f6 <_svfprintf_r+0xeba>
 800534e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005350:	e60a      	b.n	8004f68 <_svfprintf_r+0x62c>
 8005352:	9b06      	ldr	r3, [sp, #24]
 8005354:	2b65      	cmp	r3, #101	; 0x65
 8005356:	f340 81a9 	ble.w	80056ac <_svfprintf_r+0xd70>
 800535a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800535c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800535e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005360:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005362:	f7fb fb1d 	bl	80009a0 <__aeabi_dcmpeq>
 8005366:	2800      	cmp	r0, #0
 8005368:	d062      	beq.n	8005430 <_svfprintf_r+0xaf4>
 800536a:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <_svfprintf_r+0xaec>)
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	2301      	movs	r3, #1
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005374:	3301      	adds	r3, #1
 8005376:	9323      	str	r3, [sp, #140]	; 0x8c
 8005378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800537a:	3301      	adds	r3, #1
 800537c:	2b07      	cmp	r3, #7
 800537e:	9322      	str	r3, [sp, #136]	; 0x88
 8005380:	dc25      	bgt.n	80053ce <_svfprintf_r+0xa92>
 8005382:	3408      	adds	r4, #8
 8005384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005386:	9a07      	ldr	r2, [sp, #28]
 8005388:	4293      	cmp	r3, r2
 800538a:	db02      	blt.n	8005392 <_svfprintf_r+0xa56>
 800538c:	07ee      	lsls	r6, r5, #31
 800538e:	f57f ae02 	bpl.w	8004f96 <_svfprintf_r+0x65a>
 8005392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800539a:	6063      	str	r3, [r4, #4]
 800539c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800539e:	4413      	add	r3, r2
 80053a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80053a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053a4:	3301      	adds	r3, #1
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	9322      	str	r3, [sp, #136]	; 0x88
 80053aa:	dc1a      	bgt.n	80053e2 <_svfprintf_r+0xaa6>
 80053ac:	3408      	adds	r4, #8
 80053ae:	9b07      	ldr	r3, [sp, #28]
 80053b0:	1e5e      	subs	r6, r3, #1
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	f77f adef 	ble.w	8004f96 <_svfprintf_r+0x65a>
 80053b8:	f04f 0810 	mov.w	r8, #16
 80053bc:	4f1b      	ldr	r7, [pc, #108]	; (800542c <_svfprintf_r+0xaf0>)
 80053be:	2e10      	cmp	r6, #16
 80053c0:	6027      	str	r7, [r4, #0]
 80053c2:	dc18      	bgt.n	80053f6 <_svfprintf_r+0xaba>
 80053c4:	6066      	str	r6, [r4, #4]
 80053c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053c8:	441e      	add	r6, r3
 80053ca:	9623      	str	r6, [sp, #140]	; 0x8c
 80053cc:	e5d4      	b.n	8004f78 <_svfprintf_r+0x63c>
 80053ce:	aa21      	add	r2, sp, #132	; 0x84
 80053d0:	4649      	mov	r1, r9
 80053d2:	4650      	mov	r0, sl
 80053d4:	f001 fe24 	bl	8007020 <__ssprint_r>
 80053d8:	2800      	cmp	r0, #0
 80053da:	f040 820c 	bne.w	80057f6 <_svfprintf_r+0xeba>
 80053de:	ac2e      	add	r4, sp, #184	; 0xb8
 80053e0:	e7d0      	b.n	8005384 <_svfprintf_r+0xa48>
 80053e2:	aa21      	add	r2, sp, #132	; 0x84
 80053e4:	4649      	mov	r1, r9
 80053e6:	4650      	mov	r0, sl
 80053e8:	f001 fe1a 	bl	8007020 <__ssprint_r>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	f040 8202 	bne.w	80057f6 <_svfprintf_r+0xeba>
 80053f2:	ac2e      	add	r4, sp, #184	; 0xb8
 80053f4:	e7db      	b.n	80053ae <_svfprintf_r+0xa72>
 80053f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053f8:	f8c4 8004 	str.w	r8, [r4, #4]
 80053fc:	3310      	adds	r3, #16
 80053fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8005400:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005402:	3301      	adds	r3, #1
 8005404:	2b07      	cmp	r3, #7
 8005406:	9322      	str	r3, [sp, #136]	; 0x88
 8005408:	dc02      	bgt.n	8005410 <_svfprintf_r+0xad4>
 800540a:	3408      	adds	r4, #8
 800540c:	3e10      	subs	r6, #16
 800540e:	e7d6      	b.n	80053be <_svfprintf_r+0xa82>
 8005410:	aa21      	add	r2, sp, #132	; 0x84
 8005412:	4649      	mov	r1, r9
 8005414:	4650      	mov	r0, sl
 8005416:	f001 fe03 	bl	8007020 <__ssprint_r>
 800541a:	2800      	cmp	r0, #0
 800541c:	f040 81eb 	bne.w	80057f6 <_svfprintf_r+0xeba>
 8005420:	ac2e      	add	r4, sp, #184	; 0xb8
 8005422:	e7f3      	b.n	800540c <_svfprintf_r+0xad0>
 8005424:	08007a8a 	.word	0x08007a8a
 8005428:	08007a9b 	.word	0x08007a9b
 800542c:	08007aad 	.word	0x08007aad
 8005430:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005432:	2b00      	cmp	r3, #0
 8005434:	dc7a      	bgt.n	800552c <_svfprintf_r+0xbf0>
 8005436:	4b9b      	ldr	r3, [pc, #620]	; (80056a4 <_svfprintf_r+0xd68>)
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	2301      	movs	r3, #1
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005440:	3301      	adds	r3, #1
 8005442:	9323      	str	r3, [sp, #140]	; 0x8c
 8005444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005446:	3301      	adds	r3, #1
 8005448:	2b07      	cmp	r3, #7
 800544a:	9322      	str	r3, [sp, #136]	; 0x88
 800544c:	dc44      	bgt.n	80054d8 <_svfprintf_r+0xb9c>
 800544e:	3408      	adds	r4, #8
 8005450:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005452:	b923      	cbnz	r3, 800545e <_svfprintf_r+0xb22>
 8005454:	9b07      	ldr	r3, [sp, #28]
 8005456:	b913      	cbnz	r3, 800545e <_svfprintf_r+0xb22>
 8005458:	07e8      	lsls	r0, r5, #31
 800545a:	f57f ad9c 	bpl.w	8004f96 <_svfprintf_r+0x65a>
 800545e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005466:	6063      	str	r3, [r4, #4]
 8005468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800546a:	4413      	add	r3, r2
 800546c:	9323      	str	r3, [sp, #140]	; 0x8c
 800546e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005470:	3301      	adds	r3, #1
 8005472:	2b07      	cmp	r3, #7
 8005474:	9322      	str	r3, [sp, #136]	; 0x88
 8005476:	dc39      	bgt.n	80054ec <_svfprintf_r+0xbb0>
 8005478:	f104 0308 	add.w	r3, r4, #8
 800547c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800547e:	2e00      	cmp	r6, #0
 8005480:	da19      	bge.n	80054b6 <_svfprintf_r+0xb7a>
 8005482:	2410      	movs	r4, #16
 8005484:	4f88      	ldr	r7, [pc, #544]	; (80056a8 <_svfprintf_r+0xd6c>)
 8005486:	4276      	negs	r6, r6
 8005488:	2e10      	cmp	r6, #16
 800548a:	601f      	str	r7, [r3, #0]
 800548c:	dc38      	bgt.n	8005500 <_svfprintf_r+0xbc4>
 800548e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005490:	605e      	str	r6, [r3, #4]
 8005492:	4416      	add	r6, r2
 8005494:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005496:	9623      	str	r6, [sp, #140]	; 0x8c
 8005498:	3201      	adds	r2, #1
 800549a:	2a07      	cmp	r2, #7
 800549c:	f103 0308 	add.w	r3, r3, #8
 80054a0:	9222      	str	r2, [sp, #136]	; 0x88
 80054a2:	dd08      	ble.n	80054b6 <_svfprintf_r+0xb7a>
 80054a4:	aa21      	add	r2, sp, #132	; 0x84
 80054a6:	4649      	mov	r1, r9
 80054a8:	4650      	mov	r0, sl
 80054aa:	f001 fdb9 	bl	8007020 <__ssprint_r>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	f040 81a1 	bne.w	80057f6 <_svfprintf_r+0xeba>
 80054b4:	ab2e      	add	r3, sp, #184	; 0xb8
 80054b6:	9a07      	ldr	r2, [sp, #28]
 80054b8:	9907      	ldr	r1, [sp, #28]
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80054be:	f8c3 8000 	str.w	r8, [r3]
 80054c2:	440a      	add	r2, r1
 80054c4:	9223      	str	r2, [sp, #140]	; 0x8c
 80054c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054c8:	3201      	adds	r2, #1
 80054ca:	2a07      	cmp	r2, #7
 80054cc:	9222      	str	r2, [sp, #136]	; 0x88
 80054ce:	f73f ad59 	bgt.w	8004f84 <_svfprintf_r+0x648>
 80054d2:	f103 0408 	add.w	r4, r3, #8
 80054d6:	e55e      	b.n	8004f96 <_svfprintf_r+0x65a>
 80054d8:	aa21      	add	r2, sp, #132	; 0x84
 80054da:	4649      	mov	r1, r9
 80054dc:	4650      	mov	r0, sl
 80054de:	f001 fd9f 	bl	8007020 <__ssprint_r>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	f040 8187 	bne.w	80057f6 <_svfprintf_r+0xeba>
 80054e8:	ac2e      	add	r4, sp, #184	; 0xb8
 80054ea:	e7b1      	b.n	8005450 <_svfprintf_r+0xb14>
 80054ec:	aa21      	add	r2, sp, #132	; 0x84
 80054ee:	4649      	mov	r1, r9
 80054f0:	4650      	mov	r0, sl
 80054f2:	f001 fd95 	bl	8007020 <__ssprint_r>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f040 817d 	bne.w	80057f6 <_svfprintf_r+0xeba>
 80054fc:	ab2e      	add	r3, sp, #184	; 0xb8
 80054fe:	e7bd      	b.n	800547c <_svfprintf_r+0xb40>
 8005500:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005502:	605c      	str	r4, [r3, #4]
 8005504:	3210      	adds	r2, #16
 8005506:	9223      	str	r2, [sp, #140]	; 0x8c
 8005508:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800550a:	3201      	adds	r2, #1
 800550c:	2a07      	cmp	r2, #7
 800550e:	9222      	str	r2, [sp, #136]	; 0x88
 8005510:	dc02      	bgt.n	8005518 <_svfprintf_r+0xbdc>
 8005512:	3308      	adds	r3, #8
 8005514:	3e10      	subs	r6, #16
 8005516:	e7b7      	b.n	8005488 <_svfprintf_r+0xb4c>
 8005518:	aa21      	add	r2, sp, #132	; 0x84
 800551a:	4649      	mov	r1, r9
 800551c:	4650      	mov	r0, sl
 800551e:	f001 fd7f 	bl	8007020 <__ssprint_r>
 8005522:	2800      	cmp	r0, #0
 8005524:	f040 8167 	bne.w	80057f6 <_svfprintf_r+0xeba>
 8005528:	ab2e      	add	r3, sp, #184	; 0xb8
 800552a:	e7f3      	b.n	8005514 <_svfprintf_r+0xbd8>
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	42bb      	cmp	r3, r7
 8005530:	bfa8      	it	ge
 8005532:	463b      	movge	r3, r7
 8005534:	2b00      	cmp	r3, #0
 8005536:	461e      	mov	r6, r3
 8005538:	dd0b      	ble.n	8005552 <_svfprintf_r+0xc16>
 800553a:	6063      	str	r3, [r4, #4]
 800553c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800553e:	f8c4 8000 	str.w	r8, [r4]
 8005542:	4433      	add	r3, r6
 8005544:	9323      	str	r3, [sp, #140]	; 0x8c
 8005546:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005548:	3301      	adds	r3, #1
 800554a:	2b07      	cmp	r3, #7
 800554c:	9322      	str	r3, [sp, #136]	; 0x88
 800554e:	dc5f      	bgt.n	8005610 <_svfprintf_r+0xcd4>
 8005550:	3408      	adds	r4, #8
 8005552:	2e00      	cmp	r6, #0
 8005554:	bfb4      	ite	lt
 8005556:	463e      	movlt	r6, r7
 8005558:	1bbe      	subge	r6, r7, r6
 800555a:	2e00      	cmp	r6, #0
 800555c:	dd0f      	ble.n	800557e <_svfprintf_r+0xc42>
 800555e:	f8df b148 	ldr.w	fp, [pc, #328]	; 80056a8 <_svfprintf_r+0xd6c>
 8005562:	2e10      	cmp	r6, #16
 8005564:	f8c4 b000 	str.w	fp, [r4]
 8005568:	dc5c      	bgt.n	8005624 <_svfprintf_r+0xce8>
 800556a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800556c:	6066      	str	r6, [r4, #4]
 800556e:	441e      	add	r6, r3
 8005570:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005572:	9623      	str	r6, [sp, #140]	; 0x8c
 8005574:	3301      	adds	r3, #1
 8005576:	2b07      	cmp	r3, #7
 8005578:	9322      	str	r3, [sp, #136]	; 0x88
 800557a:	dc6a      	bgt.n	8005652 <_svfprintf_r+0xd16>
 800557c:	3408      	adds	r4, #8
 800557e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005580:	9a07      	ldr	r2, [sp, #28]
 8005582:	4293      	cmp	r3, r2
 8005584:	db01      	blt.n	800558a <_svfprintf_r+0xc4e>
 8005586:	07e9      	lsls	r1, r5, #31
 8005588:	d50d      	bpl.n	80055a6 <_svfprintf_r+0xc6a>
 800558a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800558c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005592:	6063      	str	r3, [r4, #4]
 8005594:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005596:	4413      	add	r3, r2
 8005598:	9323      	str	r3, [sp, #140]	; 0x8c
 800559a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559c:	3301      	adds	r3, #1
 800559e:	2b07      	cmp	r3, #7
 80055a0:	9322      	str	r3, [sp, #136]	; 0x88
 80055a2:	dc60      	bgt.n	8005666 <_svfprintf_r+0xd2a>
 80055a4:	3408      	adds	r4, #8
 80055a6:	9b07      	ldr	r3, [sp, #28]
 80055a8:	9a07      	ldr	r2, [sp, #28]
 80055aa:	1bde      	subs	r6, r3, r7
 80055ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	429e      	cmp	r6, r3
 80055b2:	bfa8      	it	ge
 80055b4:	461e      	movge	r6, r3
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	dd0b      	ble.n	80055d2 <_svfprintf_r+0xc96>
 80055ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055bc:	4447      	add	r7, r8
 80055be:	4433      	add	r3, r6
 80055c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80055c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055c4:	6027      	str	r7, [r4, #0]
 80055c6:	3301      	adds	r3, #1
 80055c8:	2b07      	cmp	r3, #7
 80055ca:	6066      	str	r6, [r4, #4]
 80055cc:	9322      	str	r3, [sp, #136]	; 0x88
 80055ce:	dc54      	bgt.n	800567a <_svfprintf_r+0xd3e>
 80055d0:	3408      	adds	r4, #8
 80055d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055d4:	9a07      	ldr	r2, [sp, #28]
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	eba2 0303 	sub.w	r3, r2, r3
 80055dc:	bfb4      	ite	lt
 80055de:	461e      	movlt	r6, r3
 80055e0:	1b9e      	subge	r6, r3, r6
 80055e2:	2e00      	cmp	r6, #0
 80055e4:	f77f acd7 	ble.w	8004f96 <_svfprintf_r+0x65a>
 80055e8:	f04f 0810 	mov.w	r8, #16
 80055ec:	4f2e      	ldr	r7, [pc, #184]	; (80056a8 <_svfprintf_r+0xd6c>)
 80055ee:	2e10      	cmp	r6, #16
 80055f0:	6027      	str	r7, [r4, #0]
 80055f2:	f77f aee7 	ble.w	80053c4 <_svfprintf_r+0xa88>
 80055f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f8:	f8c4 8004 	str.w	r8, [r4, #4]
 80055fc:	3310      	adds	r3, #16
 80055fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8005600:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005602:	3301      	adds	r3, #1
 8005604:	2b07      	cmp	r3, #7
 8005606:	9322      	str	r3, [sp, #136]	; 0x88
 8005608:	dc41      	bgt.n	800568e <_svfprintf_r+0xd52>
 800560a:	3408      	adds	r4, #8
 800560c:	3e10      	subs	r6, #16
 800560e:	e7ee      	b.n	80055ee <_svfprintf_r+0xcb2>
 8005610:	aa21      	add	r2, sp, #132	; 0x84
 8005612:	4649      	mov	r1, r9
 8005614:	4650      	mov	r0, sl
 8005616:	f001 fd03 	bl	8007020 <__ssprint_r>
 800561a:	2800      	cmp	r0, #0
 800561c:	f040 80eb 	bne.w	80057f6 <_svfprintf_r+0xeba>
 8005620:	ac2e      	add	r4, sp, #184	; 0xb8
 8005622:	e796      	b.n	8005552 <_svfprintf_r+0xc16>
 8005624:	2310      	movs	r3, #16
 8005626:	6063      	str	r3, [r4, #4]
 8005628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800562a:	3310      	adds	r3, #16
 800562c:	9323      	str	r3, [sp, #140]	; 0x8c
 800562e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005630:	3301      	adds	r3, #1
 8005632:	2b07      	cmp	r3, #7
 8005634:	9322      	str	r3, [sp, #136]	; 0x88
 8005636:	dc02      	bgt.n	800563e <_svfprintf_r+0xd02>
 8005638:	3408      	adds	r4, #8
 800563a:	3e10      	subs	r6, #16
 800563c:	e791      	b.n	8005562 <_svfprintf_r+0xc26>
 800563e:	aa21      	add	r2, sp, #132	; 0x84
 8005640:	4649      	mov	r1, r9
 8005642:	4650      	mov	r0, sl
 8005644:	f001 fcec 	bl	8007020 <__ssprint_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	f040 80d4 	bne.w	80057f6 <_svfprintf_r+0xeba>
 800564e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005650:	e7f3      	b.n	800563a <_svfprintf_r+0xcfe>
 8005652:	aa21      	add	r2, sp, #132	; 0x84
 8005654:	4649      	mov	r1, r9
 8005656:	4650      	mov	r0, sl
 8005658:	f001 fce2 	bl	8007020 <__ssprint_r>
 800565c:	2800      	cmp	r0, #0
 800565e:	f040 80ca 	bne.w	80057f6 <_svfprintf_r+0xeba>
 8005662:	ac2e      	add	r4, sp, #184	; 0xb8
 8005664:	e78b      	b.n	800557e <_svfprintf_r+0xc42>
 8005666:	aa21      	add	r2, sp, #132	; 0x84
 8005668:	4649      	mov	r1, r9
 800566a:	4650      	mov	r0, sl
 800566c:	f001 fcd8 	bl	8007020 <__ssprint_r>
 8005670:	2800      	cmp	r0, #0
 8005672:	f040 80c0 	bne.w	80057f6 <_svfprintf_r+0xeba>
 8005676:	ac2e      	add	r4, sp, #184	; 0xb8
 8005678:	e795      	b.n	80055a6 <_svfprintf_r+0xc6a>
 800567a:	aa21      	add	r2, sp, #132	; 0x84
 800567c:	4649      	mov	r1, r9
 800567e:	4650      	mov	r0, sl
 8005680:	f001 fcce 	bl	8007020 <__ssprint_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	f040 80b6 	bne.w	80057f6 <_svfprintf_r+0xeba>
 800568a:	ac2e      	add	r4, sp, #184	; 0xb8
 800568c:	e7a1      	b.n	80055d2 <_svfprintf_r+0xc96>
 800568e:	aa21      	add	r2, sp, #132	; 0x84
 8005690:	4649      	mov	r1, r9
 8005692:	4650      	mov	r0, sl
 8005694:	f001 fcc4 	bl	8007020 <__ssprint_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	f040 80ac 	bne.w	80057f6 <_svfprintf_r+0xeba>
 800569e:	ac2e      	add	r4, sp, #184	; 0xb8
 80056a0:	e7b4      	b.n	800560c <_svfprintf_r+0xcd0>
 80056a2:	bf00      	nop
 80056a4:	08007a9b 	.word	0x08007a9b
 80056a8:	08007aad 	.word	0x08007aad
 80056ac:	9b07      	ldr	r3, [sp, #28]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	dc01      	bgt.n	80056b6 <_svfprintf_r+0xd7a>
 80056b2:	07ea      	lsls	r2, r5, #31
 80056b4:	d576      	bpl.n	80057a4 <_svfprintf_r+0xe68>
 80056b6:	2301      	movs	r3, #1
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056bc:	f8c4 8000 	str.w	r8, [r4]
 80056c0:	3301      	adds	r3, #1
 80056c2:	9323      	str	r3, [sp, #140]	; 0x8c
 80056c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056c6:	3301      	adds	r3, #1
 80056c8:	2b07      	cmp	r3, #7
 80056ca:	9322      	str	r3, [sp, #136]	; 0x88
 80056cc:	dc36      	bgt.n	800573c <_svfprintf_r+0xe00>
 80056ce:	3408      	adds	r4, #8
 80056d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d8:	6063      	str	r3, [r4, #4]
 80056da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056dc:	4413      	add	r3, r2
 80056de:	9323      	str	r3, [sp, #140]	; 0x8c
 80056e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056e2:	3301      	adds	r3, #1
 80056e4:	2b07      	cmp	r3, #7
 80056e6:	9322      	str	r3, [sp, #136]	; 0x88
 80056e8:	dc31      	bgt.n	800574e <_svfprintf_r+0xe12>
 80056ea:	3408      	adds	r4, #8
 80056ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80056f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80056f4:	f7fb f954 	bl	80009a0 <__aeabi_dcmpeq>
 80056f8:	9b07      	ldr	r3, [sp, #28]
 80056fa:	1e5e      	subs	r6, r3, #1
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d12f      	bne.n	8005760 <_svfprintf_r+0xe24>
 8005700:	f108 0301 	add.w	r3, r8, #1
 8005704:	e884 0048 	stmia.w	r4, {r3, r6}
 8005708:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800570a:	9a07      	ldr	r2, [sp, #28]
 800570c:	3b01      	subs	r3, #1
 800570e:	4413      	add	r3, r2
 8005710:	9323      	str	r3, [sp, #140]	; 0x8c
 8005712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005714:	3301      	adds	r3, #1
 8005716:	2b07      	cmp	r3, #7
 8005718:	9322      	str	r3, [sp, #136]	; 0x88
 800571a:	dd4a      	ble.n	80057b2 <_svfprintf_r+0xe76>
 800571c:	aa21      	add	r2, sp, #132	; 0x84
 800571e:	4649      	mov	r1, r9
 8005720:	4650      	mov	r0, sl
 8005722:	f001 fc7d 	bl	8007020 <__ssprint_r>
 8005726:	2800      	cmp	r0, #0
 8005728:	d165      	bne.n	80057f6 <_svfprintf_r+0xeba>
 800572a:	ac2e      	add	r4, sp, #184	; 0xb8
 800572c:	ab1d      	add	r3, sp, #116	; 0x74
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005732:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005734:	6063      	str	r3, [r4, #4]
 8005736:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005738:	4413      	add	r3, r2
 800573a:	e41c      	b.n	8004f76 <_svfprintf_r+0x63a>
 800573c:	aa21      	add	r2, sp, #132	; 0x84
 800573e:	4649      	mov	r1, r9
 8005740:	4650      	mov	r0, sl
 8005742:	f001 fc6d 	bl	8007020 <__ssprint_r>
 8005746:	2800      	cmp	r0, #0
 8005748:	d155      	bne.n	80057f6 <_svfprintf_r+0xeba>
 800574a:	ac2e      	add	r4, sp, #184	; 0xb8
 800574c:	e7c0      	b.n	80056d0 <_svfprintf_r+0xd94>
 800574e:	aa21      	add	r2, sp, #132	; 0x84
 8005750:	4649      	mov	r1, r9
 8005752:	4650      	mov	r0, sl
 8005754:	f001 fc64 	bl	8007020 <__ssprint_r>
 8005758:	2800      	cmp	r0, #0
 800575a:	d14c      	bne.n	80057f6 <_svfprintf_r+0xeba>
 800575c:	ac2e      	add	r4, sp, #184	; 0xb8
 800575e:	e7c5      	b.n	80056ec <_svfprintf_r+0xdb0>
 8005760:	2e00      	cmp	r6, #0
 8005762:	dde3      	ble.n	800572c <_svfprintf_r+0xdf0>
 8005764:	f04f 0810 	mov.w	r8, #16
 8005768:	4f58      	ldr	r7, [pc, #352]	; (80058cc <_svfprintf_r+0xf90>)
 800576a:	2e10      	cmp	r6, #16
 800576c:	6027      	str	r7, [r4, #0]
 800576e:	dc04      	bgt.n	800577a <_svfprintf_r+0xe3e>
 8005770:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005772:	6066      	str	r6, [r4, #4]
 8005774:	441e      	add	r6, r3
 8005776:	9623      	str	r6, [sp, #140]	; 0x8c
 8005778:	e7cb      	b.n	8005712 <_svfprintf_r+0xdd6>
 800577a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800577c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005780:	3310      	adds	r3, #16
 8005782:	9323      	str	r3, [sp, #140]	; 0x8c
 8005784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005786:	3301      	adds	r3, #1
 8005788:	2b07      	cmp	r3, #7
 800578a:	9322      	str	r3, [sp, #136]	; 0x88
 800578c:	dc02      	bgt.n	8005794 <_svfprintf_r+0xe58>
 800578e:	3408      	adds	r4, #8
 8005790:	3e10      	subs	r6, #16
 8005792:	e7ea      	b.n	800576a <_svfprintf_r+0xe2e>
 8005794:	aa21      	add	r2, sp, #132	; 0x84
 8005796:	4649      	mov	r1, r9
 8005798:	4650      	mov	r0, sl
 800579a:	f001 fc41 	bl	8007020 <__ssprint_r>
 800579e:	bb50      	cbnz	r0, 80057f6 <_svfprintf_r+0xeba>
 80057a0:	ac2e      	add	r4, sp, #184	; 0xb8
 80057a2:	e7f5      	b.n	8005790 <_svfprintf_r+0xe54>
 80057a4:	2301      	movs	r3, #1
 80057a6:	6063      	str	r3, [r4, #4]
 80057a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057aa:	f8c4 8000 	str.w	r8, [r4]
 80057ae:	3301      	adds	r3, #1
 80057b0:	e7ae      	b.n	8005710 <_svfprintf_r+0xdd4>
 80057b2:	3408      	adds	r4, #8
 80057b4:	e7ba      	b.n	800572c <_svfprintf_r+0xdf0>
 80057b6:	3408      	adds	r4, #8
 80057b8:	f7ff bbed 	b.w	8004f96 <_svfprintf_r+0x65a>
 80057bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057c0:	1a9d      	subs	r5, r3, r2
 80057c2:	2d00      	cmp	r5, #0
 80057c4:	f77f abea 	ble.w	8004f9c <_svfprintf_r+0x660>
 80057c8:	2610      	movs	r6, #16
 80057ca:	4b41      	ldr	r3, [pc, #260]	; (80058d0 <_svfprintf_r+0xf94>)
 80057cc:	2d10      	cmp	r5, #16
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	dc1b      	bgt.n	800580a <_svfprintf_r+0xece>
 80057d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057d4:	6065      	str	r5, [r4, #4]
 80057d6:	441d      	add	r5, r3
 80057d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057da:	9523      	str	r5, [sp, #140]	; 0x8c
 80057dc:	3301      	adds	r3, #1
 80057de:	2b07      	cmp	r3, #7
 80057e0:	9322      	str	r3, [sp, #136]	; 0x88
 80057e2:	f77f abdb 	ble.w	8004f9c <_svfprintf_r+0x660>
 80057e6:	aa21      	add	r2, sp, #132	; 0x84
 80057e8:	4649      	mov	r1, r9
 80057ea:	4650      	mov	r0, sl
 80057ec:	f001 fc18 	bl	8007020 <__ssprint_r>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f43f abd3 	beq.w	8004f9c <_svfprintf_r+0x660>
 80057f6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80057fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005800:	bf18      	it	ne
 8005802:	f04f 33ff 	movne.w	r3, #4294967295
 8005806:	f7ff b8bd 	b.w	8004984 <_svfprintf_r+0x48>
 800580a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800580c:	6066      	str	r6, [r4, #4]
 800580e:	3310      	adds	r3, #16
 8005810:	9323      	str	r3, [sp, #140]	; 0x8c
 8005812:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005814:	3301      	adds	r3, #1
 8005816:	2b07      	cmp	r3, #7
 8005818:	9322      	str	r3, [sp, #136]	; 0x88
 800581a:	dc02      	bgt.n	8005822 <_svfprintf_r+0xee6>
 800581c:	3408      	adds	r4, #8
 800581e:	3d10      	subs	r5, #16
 8005820:	e7d3      	b.n	80057ca <_svfprintf_r+0xe8e>
 8005822:	aa21      	add	r2, sp, #132	; 0x84
 8005824:	4649      	mov	r1, r9
 8005826:	4650      	mov	r0, sl
 8005828:	f001 fbfa 	bl	8007020 <__ssprint_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	d1e2      	bne.n	80057f6 <_svfprintf_r+0xeba>
 8005830:	ac2e      	add	r4, sp, #184	; 0xb8
 8005832:	e7f4      	b.n	800581e <_svfprintf_r+0xee2>
 8005834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0dd      	beq.n	80057f6 <_svfprintf_r+0xeba>
 800583a:	aa21      	add	r2, sp, #132	; 0x84
 800583c:	4649      	mov	r1, r9
 800583e:	4650      	mov	r0, sl
 8005840:	f001 fbee 	bl	8007020 <__ssprint_r>
 8005844:	e7d7      	b.n	80057f6 <_svfprintf_r+0xeba>
 8005846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800584a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800584c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800584e:	f7fb f8d9 	bl	8000a04 <__aeabi_dcmpun>
 8005852:	2800      	cmp	r0, #0
 8005854:	f43f aa3d 	beq.w	8004cd2 <_svfprintf_r+0x396>
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <_svfprintf_r+0xf98>)
 800585a:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <_svfprintf_r+0xf9c>)
 800585c:	f7ff ba2d 	b.w	8004cba <_svfprintf_r+0x37e>
 8005860:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005862:	eba3 0308 	sub.w	r3, r3, r8
 8005866:	9307      	str	r3, [sp, #28]
 8005868:	f7ff baaf 	b.w	8004dca <_svfprintf_r+0x48e>
 800586c:	ea56 0207 	orrs.w	r2, r6, r7
 8005870:	950f      	str	r5, [sp, #60]	; 0x3c
 8005872:	f43f ac2b 	beq.w	80050cc <_svfprintf_r+0x790>
 8005876:	2b01      	cmp	r3, #1
 8005878:	f43f ac9d 	beq.w	80051b6 <_svfprintf_r+0x87a>
 800587c:	2b02      	cmp	r3, #2
 800587e:	f43f acbd 	beq.w	80051fc <_svfprintf_r+0x8c0>
 8005882:	ab2e      	add	r3, sp, #184	; 0xb8
 8005884:	08f1      	lsrs	r1, r6, #3
 8005886:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800588a:	08f8      	lsrs	r0, r7, #3
 800588c:	f006 0207 	and.w	r2, r6, #7
 8005890:	4607      	mov	r7, r0
 8005892:	460e      	mov	r6, r1
 8005894:	3230      	adds	r2, #48	; 0x30
 8005896:	ea56 0107 	orrs.w	r1, r6, r7
 800589a:	f103 38ff 	add.w	r8, r3, #4294967295
 800589e:	f803 2c01 	strb.w	r2, [r3, #-1]
 80058a2:	f47f ac86 	bne.w	80051b2 <_svfprintf_r+0x876>
 80058a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058a8:	07c9      	lsls	r1, r1, #31
 80058aa:	d506      	bpl.n	80058ba <_svfprintf_r+0xf7e>
 80058ac:	2a30      	cmp	r2, #48	; 0x30
 80058ae:	d004      	beq.n	80058ba <_svfprintf_r+0xf7e>
 80058b0:	2230      	movs	r2, #48	; 0x30
 80058b2:	f808 2c01 	strb.w	r2, [r8, #-1]
 80058b6:	f1a3 0802 	sub.w	r8, r3, #2
 80058ba:	ab2e      	add	r3, sp, #184	; 0xb8
 80058bc:	465e      	mov	r6, fp
 80058be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058c0:	eba3 0b08 	sub.w	fp, r3, r8
 80058c4:	2700      	movs	r7, #0
 80058c6:	f7ff bace 	b.w	8004e66 <_svfprintf_r+0x52a>
 80058ca:	bf00      	nop
 80058cc:	08007aad 	.word	0x08007aad
 80058d0:	08007a9d 	.word	0x08007a9d
 80058d4:	08007a71 	.word	0x08007a71
 80058d8:	08007a75 	.word	0x08007a75

080058dc <quorem>:
 80058dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	6903      	ldr	r3, [r0, #16]
 80058e2:	690c      	ldr	r4, [r1, #16]
 80058e4:	4680      	mov	r8, r0
 80058e6:	429c      	cmp	r4, r3
 80058e8:	f300 8082 	bgt.w	80059f0 <quorem+0x114>
 80058ec:	3c01      	subs	r4, #1
 80058ee:	f101 0714 	add.w	r7, r1, #20
 80058f2:	f100 0614 	add.w	r6, r0, #20
 80058f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80058fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80058fe:	3501      	adds	r5, #1
 8005900:	fbb0 f5f5 	udiv	r5, r0, r5
 8005904:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005908:	eb06 030e 	add.w	r3, r6, lr
 800590c:	eb07 090e 	add.w	r9, r7, lr
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	b38d      	cbz	r5, 8005978 <quorem+0x9c>
 8005914:	f04f 0a00 	mov.w	sl, #0
 8005918:	4638      	mov	r0, r7
 800591a:	46b4      	mov	ip, r6
 800591c:	46d3      	mov	fp, sl
 800591e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005922:	b293      	uxth	r3, r2
 8005924:	fb05 a303 	mla	r3, r5, r3, sl
 8005928:	0c12      	lsrs	r2, r2, #16
 800592a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800592e:	fb05 a202 	mla	r2, r5, r2, sl
 8005932:	b29b      	uxth	r3, r3
 8005934:	ebab 0303 	sub.w	r3, fp, r3
 8005938:	f8bc b000 	ldrh.w	fp, [ip]
 800593c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005940:	445b      	add	r3, fp
 8005942:	fa1f fb82 	uxth.w	fp, r2
 8005946:	f8dc 2000 	ldr.w	r2, [ip]
 800594a:	4581      	cmp	r9, r0
 800594c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005950:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800595a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800595e:	f84c 3b04 	str.w	r3, [ip], #4
 8005962:	d2dc      	bcs.n	800591e <quorem+0x42>
 8005964:	f856 300e 	ldr.w	r3, [r6, lr]
 8005968:	b933      	cbnz	r3, 8005978 <quorem+0x9c>
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	3b04      	subs	r3, #4
 800596e:	429e      	cmp	r6, r3
 8005970:	461a      	mov	r2, r3
 8005972:	d331      	bcc.n	80059d8 <quorem+0xfc>
 8005974:	f8c8 4010 	str.w	r4, [r8, #16]
 8005978:	4640      	mov	r0, r8
 800597a:	f001 fa78 	bl	8006e6e <__mcmp>
 800597e:	2800      	cmp	r0, #0
 8005980:	db26      	blt.n	80059d0 <quorem+0xf4>
 8005982:	4630      	mov	r0, r6
 8005984:	f04f 0e00 	mov.w	lr, #0
 8005988:	3501      	adds	r5, #1
 800598a:	f857 1b04 	ldr.w	r1, [r7], #4
 800598e:	f8d0 c000 	ldr.w	ip, [r0]
 8005992:	b28b      	uxth	r3, r1
 8005994:	ebae 0303 	sub.w	r3, lr, r3
 8005998:	fa1f f28c 	uxth.w	r2, ip
 800599c:	4413      	add	r3, r2
 800599e:	0c0a      	lsrs	r2, r1, #16
 80059a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ae:	45b9      	cmp	r9, r7
 80059b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80059b4:	f840 3b04 	str.w	r3, [r0], #4
 80059b8:	d2e7      	bcs.n	800598a <quorem+0xae>
 80059ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80059be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80059c2:	b92a      	cbnz	r2, 80059d0 <quorem+0xf4>
 80059c4:	3b04      	subs	r3, #4
 80059c6:	429e      	cmp	r6, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	d30b      	bcc.n	80059e4 <quorem+0x108>
 80059cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80059d0:	4628      	mov	r0, r5
 80059d2:	b003      	add	sp, #12
 80059d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	3b04      	subs	r3, #4
 80059dc:	2a00      	cmp	r2, #0
 80059de:	d1c9      	bne.n	8005974 <quorem+0x98>
 80059e0:	3c01      	subs	r4, #1
 80059e2:	e7c4      	b.n	800596e <quorem+0x92>
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	3b04      	subs	r3, #4
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d1ef      	bne.n	80059cc <quorem+0xf0>
 80059ec:	3c01      	subs	r4, #1
 80059ee:	e7ea      	b.n	80059c6 <quorem+0xea>
 80059f0:	2000      	movs	r0, #0
 80059f2:	e7ee      	b.n	80059d2 <quorem+0xf6>
 80059f4:	0000      	movs	r0, r0
	...

080059f8 <_dtoa_r>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059fe:	b095      	sub	sp, #84	; 0x54
 8005a00:	4604      	mov	r4, r0
 8005a02:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a08:	b93e      	cbnz	r6, 8005a1a <_dtoa_r+0x22>
 8005a0a:	2010      	movs	r0, #16
 8005a0c:	f000 fdda 	bl	80065c4 <malloc>
 8005a10:	6260      	str	r0, [r4, #36]	; 0x24
 8005a12:	6046      	str	r6, [r0, #4]
 8005a14:	6086      	str	r6, [r0, #8]
 8005a16:	6006      	str	r6, [r0, #0]
 8005a18:	60c6      	str	r6, [r0, #12]
 8005a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a1c:	6819      	ldr	r1, [r3, #0]
 8005a1e:	b151      	cbz	r1, 8005a36 <_dtoa_r+0x3e>
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	2301      	movs	r3, #1
 8005a24:	4093      	lsls	r3, r2
 8005a26:	604a      	str	r2, [r1, #4]
 8005a28:	608b      	str	r3, [r1, #8]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f001 f84a 	bl	8006ac4 <_Bfree>
 8005a30:	2200      	movs	r2, #0
 8005a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bfb7      	itett	lt
 8005a3c:	2301      	movlt	r3, #1
 8005a3e:	2300      	movge	r3, #0
 8005a40:	602b      	strlt	r3, [r5, #0]
 8005a42:	9b03      	ldrlt	r3, [sp, #12]
 8005a44:	bfae      	itee	ge
 8005a46:	602b      	strge	r3, [r5, #0]
 8005a48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	9303      	strlt	r3, [sp, #12]
 8005a4e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005a52:	4bab      	ldr	r3, [pc, #684]	; (8005d00 <_dtoa_r+0x308>)
 8005a54:	ea33 0309 	bics.w	r3, r3, r9
 8005a58:	d11b      	bne.n	8005a92 <_dtoa_r+0x9a>
 8005a5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	9b02      	ldr	r3, [sp, #8]
 8005a64:	b923      	cbnz	r3, 8005a70 <_dtoa_r+0x78>
 8005a66:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	f000 8583 	beq.w	8006576 <_dtoa_r+0xb7e>
 8005a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a72:	b953      	cbnz	r3, 8005a8a <_dtoa_r+0x92>
 8005a74:	4ba3      	ldr	r3, [pc, #652]	; (8005d04 <_dtoa_r+0x30c>)
 8005a76:	e021      	b.n	8005abc <_dtoa_r+0xc4>
 8005a78:	4ba3      	ldr	r3, [pc, #652]	; (8005d08 <_dtoa_r+0x310>)
 8005a7a:	9306      	str	r3, [sp, #24]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	9806      	ldr	r0, [sp, #24]
 8005a84:	b015      	add	sp, #84	; 0x54
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	4b9e      	ldr	r3, [pc, #632]	; (8005d04 <_dtoa_r+0x30c>)
 8005a8c:	9306      	str	r3, [sp, #24]
 8005a8e:	3303      	adds	r3, #3
 8005a90:	e7f5      	b.n	8005a7e <_dtoa_r+0x86>
 8005a92:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	f7fa ff7f 	bl	80009a0 <__aeabi_dcmpeq>
 8005aa2:	4680      	mov	r8, r0
 8005aa4:	b160      	cbz	r0, 8005ac0 <_dtoa_r+0xc8>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 855e 	beq.w	8006570 <_dtoa_r+0xb78>
 8005ab4:	4b95      	ldr	r3, [pc, #596]	; (8005d0c <_dtoa_r+0x314>)
 8005ab6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	9306      	str	r3, [sp, #24]
 8005abe:	e7e0      	b.n	8005a82 <_dtoa_r+0x8a>
 8005ac0:	ab12      	add	r3, sp, #72	; 0x48
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	ab13      	add	r3, sp, #76	; 0x4c
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	4632      	mov	r2, r6
 8005aca:	463b      	mov	r3, r7
 8005acc:	4620      	mov	r0, r4
 8005ace:	f001 fa47 	bl	8006f60 <__d2b>
 8005ad2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ad6:	4682      	mov	sl, r0
 8005ad8:	2d00      	cmp	r5, #0
 8005ada:	d07d      	beq.n	8005bd8 <_dtoa_r+0x1e0>
 8005adc:	4630      	mov	r0, r6
 8005ade:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ae2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005ae6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005aea:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005aee:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005af2:	2200      	movs	r2, #0
 8005af4:	4b86      	ldr	r3, [pc, #536]	; (8005d10 <_dtoa_r+0x318>)
 8005af6:	f7fa fb37 	bl	8000168 <__aeabi_dsub>
 8005afa:	a37b      	add	r3, pc, #492	; (adr r3, 8005ce8 <_dtoa_r+0x2f0>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f7fa fce6 	bl	80004d0 <__aeabi_dmul>
 8005b04:	a37a      	add	r3, pc, #488	; (adr r3, 8005cf0 <_dtoa_r+0x2f8>)
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f7fa fb2f 	bl	800016c <__adddf3>
 8005b0e:	4606      	mov	r6, r0
 8005b10:	4628      	mov	r0, r5
 8005b12:	460f      	mov	r7, r1
 8005b14:	f7fa fc76 	bl	8000404 <__aeabi_i2d>
 8005b18:	a377      	add	r3, pc, #476	; (adr r3, 8005cf8 <_dtoa_r+0x300>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fa fcd7 	bl	80004d0 <__aeabi_dmul>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4630      	mov	r0, r6
 8005b28:	4639      	mov	r1, r7
 8005b2a:	f7fa fb1f 	bl	800016c <__adddf3>
 8005b2e:	4606      	mov	r6, r0
 8005b30:	460f      	mov	r7, r1
 8005b32:	f7fa ff7d 	bl	8000a30 <__aeabi_d2iz>
 8005b36:	2200      	movs	r2, #0
 8005b38:	4683      	mov	fp, r0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	4639      	mov	r1, r7
 8005b40:	f7fa ff38 	bl	80009b4 <__aeabi_dcmplt>
 8005b44:	b158      	cbz	r0, 8005b5e <_dtoa_r+0x166>
 8005b46:	4658      	mov	r0, fp
 8005b48:	f7fa fc5c 	bl	8000404 <__aeabi_i2d>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4630      	mov	r0, r6
 8005b52:	4639      	mov	r1, r7
 8005b54:	f7fa ff24 	bl	80009a0 <__aeabi_dcmpeq>
 8005b58:	b908      	cbnz	r0, 8005b5e <_dtoa_r+0x166>
 8005b5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b5e:	f1bb 0f16 	cmp.w	fp, #22
 8005b62:	d858      	bhi.n	8005c16 <_dtoa_r+0x21e>
 8005b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b68:	496a      	ldr	r1, [pc, #424]	; (8005d14 <_dtoa_r+0x31c>)
 8005b6a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b72:	f7fa ff3d 	bl	80009f0 <__aeabi_dcmpgt>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d04f      	beq.n	8005c1a <_dtoa_r+0x222>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b80:	930d      	str	r3, [sp, #52]	; 0x34
 8005b82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b84:	1b5d      	subs	r5, r3, r5
 8005b86:	1e6b      	subs	r3, r5, #1
 8005b88:	9307      	str	r3, [sp, #28]
 8005b8a:	bf43      	ittte	mi
 8005b8c:	2300      	movmi	r3, #0
 8005b8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005b92:	9307      	strmi	r3, [sp, #28]
 8005b94:	f04f 0800 	movpl.w	r8, #0
 8005b98:	f1bb 0f00 	cmp.w	fp, #0
 8005b9c:	db3f      	blt.n	8005c1e <_dtoa_r+0x226>
 8005b9e:	9b07      	ldr	r3, [sp, #28]
 8005ba0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005ba4:	445b      	add	r3, fp
 8005ba6:	9307      	str	r3, [sp, #28]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9308      	str	r3, [sp, #32]
 8005bac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	f200 80b4 	bhi.w	8005d1c <_dtoa_r+0x324>
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	bfc4      	itt	gt
 8005bb8:	3b04      	subgt	r3, #4
 8005bba:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005bbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bbe:	bfc8      	it	gt
 8005bc0:	2600      	movgt	r6, #0
 8005bc2:	f1a3 0302 	sub.w	r3, r3, #2
 8005bc6:	bfd8      	it	le
 8005bc8:	2601      	movle	r6, #1
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	f200 80b2 	bhi.w	8005d34 <_dtoa_r+0x33c>
 8005bd0:	e8df f003 	tbb	[pc, r3]
 8005bd4:	782d8684 	.word	0x782d8684
 8005bd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bda:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005bdc:	441d      	add	r5, r3
 8005bde:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	dd11      	ble.n	8005c0a <_dtoa_r+0x212>
 8005be6:	9a02      	ldr	r2, [sp, #8]
 8005be8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005bec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005bf0:	fa22 f000 	lsr.w	r0, r2, r0
 8005bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf8:	4318      	orrs	r0, r3
 8005bfa:	f7fa fbf3 	bl	80003e4 <__aeabi_ui2d>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005c04:	3d01      	subs	r5, #1
 8005c06:	9310      	str	r3, [sp, #64]	; 0x40
 8005c08:	e773      	b.n	8005af2 <_dtoa_r+0xfa>
 8005c0a:	f1c3 0020 	rsb	r0, r3, #32
 8005c0e:	9b02      	ldr	r3, [sp, #8]
 8005c10:	fa03 f000 	lsl.w	r0, r3, r0
 8005c14:	e7f1      	b.n	8005bfa <_dtoa_r+0x202>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e7b2      	b.n	8005b80 <_dtoa_r+0x188>
 8005c1a:	900d      	str	r0, [sp, #52]	; 0x34
 8005c1c:	e7b1      	b.n	8005b82 <_dtoa_r+0x18a>
 8005c1e:	f1cb 0300 	rsb	r3, fp, #0
 8005c22:	9308      	str	r3, [sp, #32]
 8005c24:	2300      	movs	r3, #0
 8005c26:	eba8 080b 	sub.w	r8, r8, fp
 8005c2a:	930c      	str	r3, [sp, #48]	; 0x30
 8005c2c:	e7be      	b.n	8005bac <_dtoa_r+0x1b4>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	9309      	str	r3, [sp, #36]	; 0x24
 8005c32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f340 8080 	ble.w	8005d3a <_dtoa_r+0x342>
 8005c3a:	4699      	mov	r9, r3
 8005c3c:	9304      	str	r3, [sp, #16]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2104      	movs	r1, #4
 8005c42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005c44:	606a      	str	r2, [r5, #4]
 8005c46:	f101 0214 	add.w	r2, r1, #20
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d97a      	bls.n	8005d44 <_dtoa_r+0x34c>
 8005c4e:	6869      	ldr	r1, [r5, #4]
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 ff03 	bl	8006a5c <_Balloc>
 8005c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c58:	6028      	str	r0, [r5, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f1b9 0f0e 	cmp.w	r9, #14
 8005c60:	9306      	str	r3, [sp, #24]
 8005c62:	f200 80f0 	bhi.w	8005e46 <_dtoa_r+0x44e>
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	f000 80ed 	beq.w	8005e46 <_dtoa_r+0x44e>
 8005c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c70:	f1bb 0f00 	cmp.w	fp, #0
 8005c74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005c78:	dd79      	ble.n	8005d6e <_dtoa_r+0x376>
 8005c7a:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <_dtoa_r+0x31c>)
 8005c7c:	f00b 030f 	and.w	r3, fp, #15
 8005c80:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005c84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c88:	06f0      	lsls	r0, r6, #27
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c92:	d55c      	bpl.n	8005d4e <_dtoa_r+0x356>
 8005c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <_dtoa_r+0x320>)
 8005c9a:	2503      	movs	r5, #3
 8005c9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ca0:	f7fa fd40 	bl	8000724 <__aeabi_ddiv>
 8005ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ca8:	f006 060f 	and.w	r6, r6, #15
 8005cac:	4f1a      	ldr	r7, [pc, #104]	; (8005d18 <_dtoa_r+0x320>)
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	d14f      	bne.n	8005d52 <_dtoa_r+0x35a>
 8005cb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cba:	f7fa fd33 	bl	8000724 <__aeabi_ddiv>
 8005cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cc2:	e06e      	b.n	8005da2 <_dtoa_r+0x3aa>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cca:	445b      	add	r3, fp
 8005ccc:	f103 0901 	add.w	r9, r3, #1
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	bfb8      	it	lt
 8005cd8:	2301      	movlt	r3, #1
 8005cda:	e7b0      	b.n	8005c3e <_dtoa_r+0x246>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e7a7      	b.n	8005c30 <_dtoa_r+0x238>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e7f0      	b.n	8005cc6 <_dtoa_r+0x2ce>
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	636f4361 	.word	0x636f4361
 8005cec:	3fd287a7 	.word	0x3fd287a7
 8005cf0:	8b60c8b3 	.word	0x8b60c8b3
 8005cf4:	3fc68a28 	.word	0x3fc68a28
 8005cf8:	509f79fb 	.word	0x509f79fb
 8005cfc:	3fd34413 	.word	0x3fd34413
 8005d00:	7ff00000 	.word	0x7ff00000
 8005d04:	08007ac6 	.word	0x08007ac6
 8005d08:	08007abd 	.word	0x08007abd
 8005d0c:	08007a9c 	.word	0x08007a9c
 8005d10:	3ff80000 	.word	0x3ff80000
 8005d14:	08007b00 	.word	0x08007b00
 8005d18:	08007ad8 	.word	0x08007ad8
 8005d1c:	2601      	movs	r6, #1
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9609      	str	r6, [sp, #36]	; 0x24
 8005d22:	931e      	str	r3, [sp, #120]	; 0x78
 8005d24:	f04f 33ff 	mov.w	r3, #4294967295
 8005d28:	2200      	movs	r2, #0
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	4699      	mov	r9, r3
 8005d2e:	2312      	movs	r3, #18
 8005d30:	921f      	str	r2, [sp, #124]	; 0x7c
 8005d32:	e784      	b.n	8005c3e <_dtoa_r+0x246>
 8005d34:	2301      	movs	r3, #1
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	e7f4      	b.n	8005d24 <_dtoa_r+0x32c>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	9304      	str	r3, [sp, #16]
 8005d3e:	4699      	mov	r9, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	e7f5      	b.n	8005d30 <_dtoa_r+0x338>
 8005d44:	686a      	ldr	r2, [r5, #4]
 8005d46:	0049      	lsls	r1, r1, #1
 8005d48:	3201      	adds	r2, #1
 8005d4a:	606a      	str	r2, [r5, #4]
 8005d4c:	e77b      	b.n	8005c46 <_dtoa_r+0x24e>
 8005d4e:	2502      	movs	r5, #2
 8005d50:	e7ac      	b.n	8005cac <_dtoa_r+0x2b4>
 8005d52:	07f1      	lsls	r1, r6, #31
 8005d54:	d508      	bpl.n	8005d68 <_dtoa_r+0x370>
 8005d56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5e:	f7fa fbb7 	bl	80004d0 <__aeabi_dmul>
 8005d62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d66:	3501      	adds	r5, #1
 8005d68:	1076      	asrs	r6, r6, #1
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	e79f      	b.n	8005cae <_dtoa_r+0x2b6>
 8005d6e:	f000 80a5 	beq.w	8005ebc <_dtoa_r+0x4c4>
 8005d72:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d76:	f1cb 0600 	rsb	r6, fp, #0
 8005d7a:	4ba2      	ldr	r3, [pc, #648]	; (8006004 <_dtoa_r+0x60c>)
 8005d7c:	f006 020f 	and.w	r2, r6, #15
 8005d80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fba2 	bl	80004d0 <__aeabi_dmul>
 8005d8c:	2502      	movs	r5, #2
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d94:	4f9c      	ldr	r7, [pc, #624]	; (8006008 <_dtoa_r+0x610>)
 8005d96:	1136      	asrs	r6, r6, #4
 8005d98:	2e00      	cmp	r6, #0
 8005d9a:	f040 8084 	bne.w	8005ea6 <_dtoa_r+0x4ae>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d18d      	bne.n	8005cbe <_dtoa_r+0x2c6>
 8005da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 808b 	beq.w	8005ec0 <_dtoa_r+0x4c8>
 8005daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005db6:	2200      	movs	r2, #0
 8005db8:	4b94      	ldr	r3, [pc, #592]	; (800600c <_dtoa_r+0x614>)
 8005dba:	f7fa fdfb 	bl	80009b4 <__aeabi_dcmplt>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d07e      	beq.n	8005ec0 <_dtoa_r+0x4c8>
 8005dc2:	f1b9 0f00 	cmp.w	r9, #0
 8005dc6:	d07b      	beq.n	8005ec0 <_dtoa_r+0x4c8>
 8005dc8:	9b04      	ldr	r3, [sp, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	dd37      	ble.n	8005e3e <_dtoa_r+0x446>
 8005dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4b8e      	ldr	r3, [pc, #568]	; (8006010 <_dtoa_r+0x618>)
 8005dd6:	f7fa fb7b 	bl	80004d0 <__aeabi_dmul>
 8005dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dde:	9e04      	ldr	r6, [sp, #16]
 8005de0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005de4:	3501      	adds	r5, #1
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7fa fb0c 	bl	8000404 <__aeabi_i2d>
 8005dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005df0:	f7fa fb6e 	bl	80004d0 <__aeabi_dmul>
 8005df4:	4b87      	ldr	r3, [pc, #540]	; (8006014 <_dtoa_r+0x61c>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	f7fa f9b8 	bl	800016c <__adddf3>
 8005dfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e02:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8005e06:	950b      	str	r5, [sp, #44]	; 0x2c
 8005e08:	2e00      	cmp	r6, #0
 8005e0a:	d15c      	bne.n	8005ec6 <_dtoa_r+0x4ce>
 8005e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b81      	ldr	r3, [pc, #516]	; (8006018 <_dtoa_r+0x620>)
 8005e14:	f7fa f9a8 	bl	8000168 <__aeabi_dsub>
 8005e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e1a:	462b      	mov	r3, r5
 8005e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e20:	f7fa fde6 	bl	80009f0 <__aeabi_dcmpgt>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f040 82f7 	bne.w	8006418 <_dtoa_r+0xa20>
 8005e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e30:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005e34:	f7fa fdbe 	bl	80009b4 <__aeabi_dcmplt>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	f040 82eb 	bne.w	8006414 <_dtoa_r+0xa1c>
 8005e3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f2c0 8150 	blt.w	80060ee <_dtoa_r+0x6f6>
 8005e4e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e52:	f300 814c 	bgt.w	80060ee <_dtoa_r+0x6f6>
 8005e56:	4b6b      	ldr	r3, [pc, #428]	; (8006004 <_dtoa_r+0x60c>)
 8005e58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f280 80da 	bge.w	8006020 <_dtoa_r+0x628>
 8005e6c:	f1b9 0f00 	cmp.w	r9, #0
 8005e70:	f300 80d6 	bgt.w	8006020 <_dtoa_r+0x628>
 8005e74:	f040 82cd 	bne.w	8006412 <_dtoa_r+0xa1a>
 8005e78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4b66      	ldr	r3, [pc, #408]	; (8006018 <_dtoa_r+0x620>)
 8005e80:	f7fa fb26 	bl	80004d0 <__aeabi_dmul>
 8005e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e88:	f7fa fda8 	bl	80009dc <__aeabi_dcmpge>
 8005e8c:	464e      	mov	r6, r9
 8005e8e:	464f      	mov	r7, r9
 8005e90:	2800      	cmp	r0, #0
 8005e92:	f040 82a4 	bne.w	80063de <_dtoa_r+0x9e6>
 8005e96:	9b06      	ldr	r3, [sp, #24]
 8005e98:	9a06      	ldr	r2, [sp, #24]
 8005e9a:	1c5d      	adds	r5, r3, #1
 8005e9c:	2331      	movs	r3, #49	; 0x31
 8005e9e:	f10b 0b01 	add.w	fp, fp, #1
 8005ea2:	7013      	strb	r3, [r2, #0]
 8005ea4:	e29f      	b.n	80063e6 <_dtoa_r+0x9ee>
 8005ea6:	07f2      	lsls	r2, r6, #31
 8005ea8:	d505      	bpl.n	8005eb6 <_dtoa_r+0x4be>
 8005eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eae:	f7fa fb0f 	bl	80004d0 <__aeabi_dmul>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	1076      	asrs	r6, r6, #1
 8005eb8:	3708      	adds	r7, #8
 8005eba:	e76d      	b.n	8005d98 <_dtoa_r+0x3a0>
 8005ebc:	2502      	movs	r5, #2
 8005ebe:	e770      	b.n	8005da2 <_dtoa_r+0x3aa>
 8005ec0:	465f      	mov	r7, fp
 8005ec2:	464e      	mov	r6, r9
 8005ec4:	e78f      	b.n	8005de6 <_dtoa_r+0x3ee>
 8005ec6:	9a06      	ldr	r2, [sp, #24]
 8005ec8:	4b4e      	ldr	r3, [pc, #312]	; (8006004 <_dtoa_r+0x60c>)
 8005eca:	4432      	add	r2, r6
 8005ecc:	9211      	str	r2, [sp, #68]	; 0x44
 8005ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed0:	1e71      	subs	r1, r6, #1
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	d048      	beq.n	8005f68 <_dtoa_r+0x570>
 8005ed6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	2000      	movs	r0, #0
 8005ee0:	494e      	ldr	r1, [pc, #312]	; (800601c <_dtoa_r+0x624>)
 8005ee2:	f7fa fc1f 	bl	8000724 <__aeabi_ddiv>
 8005ee6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005eea:	f7fa f93d 	bl	8000168 <__aeabi_dsub>
 8005eee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ef2:	9d06      	ldr	r5, [sp, #24]
 8005ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ef8:	f7fa fd9a 	bl	8000a30 <__aeabi_d2iz>
 8005efc:	4606      	mov	r6, r0
 8005efe:	f7fa fa81 	bl	8000404 <__aeabi_i2d>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f0a:	f7fa f92d 	bl	8000168 <__aeabi_dsub>
 8005f0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f12:	3630      	adds	r6, #48	; 0x30
 8005f14:	f805 6b01 	strb.w	r6, [r5], #1
 8005f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f1c:	f7fa fd4a 	bl	80009b4 <__aeabi_dcmplt>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d164      	bne.n	8005fee <_dtoa_r+0x5f6>
 8005f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f28:	2000      	movs	r0, #0
 8005f2a:	4938      	ldr	r1, [pc, #224]	; (800600c <_dtoa_r+0x614>)
 8005f2c:	f7fa f91c 	bl	8000168 <__aeabi_dsub>
 8005f30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f34:	f7fa fd3e 	bl	80009b4 <__aeabi_dcmplt>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	f040 80b9 	bne.w	80060b0 <_dtoa_r+0x6b8>
 8005f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f40:	429d      	cmp	r5, r3
 8005f42:	f43f af7c 	beq.w	8005e3e <_dtoa_r+0x446>
 8005f46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4b30      	ldr	r3, [pc, #192]	; (8006010 <_dtoa_r+0x618>)
 8005f4e:	f7fa fabf 	bl	80004d0 <__aeabi_dmul>
 8005f52:	2200      	movs	r2, #0
 8005f54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5c:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <_dtoa_r+0x618>)
 8005f5e:	f7fa fab7 	bl	80004d0 <__aeabi_dmul>
 8005f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f66:	e7c5      	b.n	8005ef4 <_dtoa_r+0x4fc>
 8005f68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f74:	f7fa faac 	bl	80004d0 <__aeabi_dmul>
 8005f78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f7c:	9d06      	ldr	r5, [sp, #24]
 8005f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f82:	f7fa fd55 	bl	8000a30 <__aeabi_d2iz>
 8005f86:	4606      	mov	r6, r0
 8005f88:	f7fa fa3c 	bl	8000404 <__aeabi_i2d>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f94:	f7fa f8e8 	bl	8000168 <__aeabi_dsub>
 8005f98:	3630      	adds	r6, #48	; 0x30
 8005f9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f9c:	f805 6b01 	strb.w	r6, [r5], #1
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	d124      	bne.n	8005ff6 <_dtoa_r+0x5fe>
 8005fac:	4b1b      	ldr	r3, [pc, #108]	; (800601c <_dtoa_r+0x624>)
 8005fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fb2:	f7fa f8db 	bl	800016c <__adddf3>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fbe:	f7fa fd17 	bl	80009f0 <__aeabi_dcmpgt>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d174      	bne.n	80060b0 <_dtoa_r+0x6b8>
 8005fc6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fca:	2000      	movs	r0, #0
 8005fcc:	4913      	ldr	r1, [pc, #76]	; (800601c <_dtoa_r+0x624>)
 8005fce:	f7fa f8cb 	bl	8000168 <__aeabi_dsub>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fda:	f7fa fceb 	bl	80009b4 <__aeabi_dcmplt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f43f af2d 	beq.w	8005e3e <_dtoa_r+0x446>
 8005fe4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fe8:	1e6a      	subs	r2, r5, #1
 8005fea:	2b30      	cmp	r3, #48	; 0x30
 8005fec:	d001      	beq.n	8005ff2 <_dtoa_r+0x5fa>
 8005fee:	46bb      	mov	fp, r7
 8005ff0:	e04d      	b.n	800608e <_dtoa_r+0x696>
 8005ff2:	4615      	mov	r5, r2
 8005ff4:	e7f6      	b.n	8005fe4 <_dtoa_r+0x5ec>
 8005ff6:	4b06      	ldr	r3, [pc, #24]	; (8006010 <_dtoa_r+0x618>)
 8005ff8:	f7fa fa6a 	bl	80004d0 <__aeabi_dmul>
 8005ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006000:	e7bd      	b.n	8005f7e <_dtoa_r+0x586>
 8006002:	bf00      	nop
 8006004:	08007b00 	.word	0x08007b00
 8006008:	08007ad8 	.word	0x08007ad8
 800600c:	3ff00000 	.word	0x3ff00000
 8006010:	40240000 	.word	0x40240000
 8006014:	401c0000 	.word	0x401c0000
 8006018:	40140000 	.word	0x40140000
 800601c:	3fe00000 	.word	0x3fe00000
 8006020:	9d06      	ldr	r5, [sp, #24]
 8006022:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa fb79 	bl	8000724 <__aeabi_ddiv>
 8006032:	f7fa fcfd 	bl	8000a30 <__aeabi_d2iz>
 8006036:	4680      	mov	r8, r0
 8006038:	f7fa f9e4 	bl	8000404 <__aeabi_i2d>
 800603c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006040:	f7fa fa46 	bl	80004d0 <__aeabi_dmul>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa f88c 	bl	8000168 <__aeabi_dsub>
 8006050:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006054:	f805 6b01 	strb.w	r6, [r5], #1
 8006058:	9e06      	ldr	r6, [sp, #24]
 800605a:	4602      	mov	r2, r0
 800605c:	1bae      	subs	r6, r5, r6
 800605e:	45b1      	cmp	r9, r6
 8006060:	460b      	mov	r3, r1
 8006062:	d137      	bne.n	80060d4 <_dtoa_r+0x6dc>
 8006064:	f7fa f882 	bl	800016c <__adddf3>
 8006068:	4606      	mov	r6, r0
 800606a:	460f      	mov	r7, r1
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006074:	f7fa fc9e 	bl	80009b4 <__aeabi_dcmplt>
 8006078:	b9c8      	cbnz	r0, 80060ae <_dtoa_r+0x6b6>
 800607a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800607e:	4632      	mov	r2, r6
 8006080:	463b      	mov	r3, r7
 8006082:	f7fa fc8d 	bl	80009a0 <__aeabi_dcmpeq>
 8006086:	b110      	cbz	r0, 800608e <_dtoa_r+0x696>
 8006088:	f018 0f01 	tst.w	r8, #1
 800608c:	d10f      	bne.n	80060ae <_dtoa_r+0x6b6>
 800608e:	4651      	mov	r1, sl
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fd17 	bl	8006ac4 <_Bfree>
 8006096:	2300      	movs	r3, #0
 8006098:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800609a:	702b      	strb	r3, [r5, #0]
 800609c:	f10b 0301 	add.w	r3, fp, #1
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f43f acec 	beq.w	8005a82 <_dtoa_r+0x8a>
 80060aa:	601d      	str	r5, [r3, #0]
 80060ac:	e4e9      	b.n	8005a82 <_dtoa_r+0x8a>
 80060ae:	465f      	mov	r7, fp
 80060b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060b4:	1e6b      	subs	r3, r5, #1
 80060b6:	2a39      	cmp	r2, #57	; 0x39
 80060b8:	d106      	bne.n	80060c8 <_dtoa_r+0x6d0>
 80060ba:	9a06      	ldr	r2, [sp, #24]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d107      	bne.n	80060d0 <_dtoa_r+0x6d8>
 80060c0:	2330      	movs	r3, #48	; 0x30
 80060c2:	7013      	strb	r3, [r2, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	3701      	adds	r7, #1
 80060c8:	781a      	ldrb	r2, [r3, #0]
 80060ca:	3201      	adds	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	e78e      	b.n	8005fee <_dtoa_r+0x5f6>
 80060d0:	461d      	mov	r5, r3
 80060d2:	e7ed      	b.n	80060b0 <_dtoa_r+0x6b8>
 80060d4:	2200      	movs	r2, #0
 80060d6:	4bb5      	ldr	r3, [pc, #724]	; (80063ac <_dtoa_r+0x9b4>)
 80060d8:	f7fa f9fa 	bl	80004d0 <__aeabi_dmul>
 80060dc:	2200      	movs	r2, #0
 80060de:	2300      	movs	r3, #0
 80060e0:	4606      	mov	r6, r0
 80060e2:	460f      	mov	r7, r1
 80060e4:	f7fa fc5c 	bl	80009a0 <__aeabi_dcmpeq>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d09c      	beq.n	8006026 <_dtoa_r+0x62e>
 80060ec:	e7cf      	b.n	800608e <_dtoa_r+0x696>
 80060ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	f000 8129 	beq.w	8006348 <_dtoa_r+0x950>
 80060f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060f8:	2a01      	cmp	r2, #1
 80060fa:	f300 810e 	bgt.w	800631a <_dtoa_r+0x922>
 80060fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006100:	2a00      	cmp	r2, #0
 8006102:	f000 8106 	beq.w	8006312 <_dtoa_r+0x91a>
 8006106:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800610a:	4645      	mov	r5, r8
 800610c:	9e08      	ldr	r6, [sp, #32]
 800610e:	9a07      	ldr	r2, [sp, #28]
 8006110:	2101      	movs	r1, #1
 8006112:	441a      	add	r2, r3
 8006114:	4620      	mov	r0, r4
 8006116:	4498      	add	r8, r3
 8006118:	9207      	str	r2, [sp, #28]
 800611a:	f000 fd73 	bl	8006c04 <__i2b>
 800611e:	4607      	mov	r7, r0
 8006120:	2d00      	cmp	r5, #0
 8006122:	dd0b      	ble.n	800613c <_dtoa_r+0x744>
 8006124:	9b07      	ldr	r3, [sp, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	dd08      	ble.n	800613c <_dtoa_r+0x744>
 800612a:	42ab      	cmp	r3, r5
 800612c:	bfa8      	it	ge
 800612e:	462b      	movge	r3, r5
 8006130:	9a07      	ldr	r2, [sp, #28]
 8006132:	eba8 0803 	sub.w	r8, r8, r3
 8006136:	1aed      	subs	r5, r5, r3
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	9307      	str	r3, [sp, #28]
 800613c:	9b08      	ldr	r3, [sp, #32]
 800613e:	b1fb      	cbz	r3, 8006180 <_dtoa_r+0x788>
 8006140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 8104 	beq.w	8006350 <_dtoa_r+0x958>
 8006148:	2e00      	cmp	r6, #0
 800614a:	dd11      	ble.n	8006170 <_dtoa_r+0x778>
 800614c:	4639      	mov	r1, r7
 800614e:	4632      	mov	r2, r6
 8006150:	4620      	mov	r0, r4
 8006152:	f000 fded 	bl	8006d30 <__pow5mult>
 8006156:	4652      	mov	r2, sl
 8006158:	4601      	mov	r1, r0
 800615a:	4607      	mov	r7, r0
 800615c:	4620      	mov	r0, r4
 800615e:	f000 fd5a 	bl	8006c16 <__multiply>
 8006162:	4651      	mov	r1, sl
 8006164:	900a      	str	r0, [sp, #40]	; 0x28
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fcac 	bl	8006ac4 <_Bfree>
 800616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616e:	469a      	mov	sl, r3
 8006170:	9b08      	ldr	r3, [sp, #32]
 8006172:	1b9a      	subs	r2, r3, r6
 8006174:	d004      	beq.n	8006180 <_dtoa_r+0x788>
 8006176:	4651      	mov	r1, sl
 8006178:	4620      	mov	r0, r4
 800617a:	f000 fdd9 	bl	8006d30 <__pow5mult>
 800617e:	4682      	mov	sl, r0
 8006180:	2101      	movs	r1, #1
 8006182:	4620      	mov	r0, r4
 8006184:	f000 fd3e 	bl	8006c04 <__i2b>
 8006188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800618a:	4606      	mov	r6, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	f340 80e1 	ble.w	8006354 <_dtoa_r+0x95c>
 8006192:	461a      	mov	r2, r3
 8006194:	4601      	mov	r1, r0
 8006196:	4620      	mov	r0, r4
 8006198:	f000 fdca 	bl	8006d30 <__pow5mult>
 800619c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800619e:	4606      	mov	r6, r0
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	f340 80da 	ble.w	800635a <_dtoa_r+0x962>
 80061a6:	2300      	movs	r3, #0
 80061a8:	9308      	str	r3, [sp, #32]
 80061aa:	6933      	ldr	r3, [r6, #16]
 80061ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061b0:	6918      	ldr	r0, [r3, #16]
 80061b2:	f000 fcd9 	bl	8006b68 <__hi0bits>
 80061b6:	f1c0 0020 	rsb	r0, r0, #32
 80061ba:	9b07      	ldr	r3, [sp, #28]
 80061bc:	4418      	add	r0, r3
 80061be:	f010 001f 	ands.w	r0, r0, #31
 80061c2:	f000 80f0 	beq.w	80063a6 <_dtoa_r+0x9ae>
 80061c6:	f1c0 0320 	rsb	r3, r0, #32
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	f340 80e2 	ble.w	8006394 <_dtoa_r+0x99c>
 80061d0:	9b07      	ldr	r3, [sp, #28]
 80061d2:	f1c0 001c 	rsb	r0, r0, #28
 80061d6:	4480      	add	r8, r0
 80061d8:	4405      	add	r5, r0
 80061da:	4403      	add	r3, r0
 80061dc:	9307      	str	r3, [sp, #28]
 80061de:	f1b8 0f00 	cmp.w	r8, #0
 80061e2:	dd05      	ble.n	80061f0 <_dtoa_r+0x7f8>
 80061e4:	4651      	mov	r1, sl
 80061e6:	4642      	mov	r2, r8
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fdef 	bl	8006dcc <__lshift>
 80061ee:	4682      	mov	sl, r0
 80061f0:	9b07      	ldr	r3, [sp, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	dd05      	ble.n	8006202 <_dtoa_r+0x80a>
 80061f6:	4631      	mov	r1, r6
 80061f8:	461a      	mov	r2, r3
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 fde6 	bl	8006dcc <__lshift>
 8006200:	4606      	mov	r6, r0
 8006202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80d3 	beq.w	80063b0 <_dtoa_r+0x9b8>
 800620a:	4631      	mov	r1, r6
 800620c:	4650      	mov	r0, sl
 800620e:	f000 fe2e 	bl	8006e6e <__mcmp>
 8006212:	2800      	cmp	r0, #0
 8006214:	f280 80cc 	bge.w	80063b0 <_dtoa_r+0x9b8>
 8006218:	2300      	movs	r3, #0
 800621a:	4651      	mov	r1, sl
 800621c:	220a      	movs	r2, #10
 800621e:	4620      	mov	r0, r4
 8006220:	f000 fc67 	bl	8006af2 <__multadd>
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	f10b 3bff 	add.w	fp, fp, #4294967295
 800622a:	4682      	mov	sl, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 81a9 	beq.w	8006584 <_dtoa_r+0xb8c>
 8006232:	2300      	movs	r3, #0
 8006234:	4639      	mov	r1, r7
 8006236:	220a      	movs	r2, #10
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fc5a 	bl	8006af2 <__multadd>
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	4607      	mov	r7, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	dc03      	bgt.n	800624e <_dtoa_r+0x856>
 8006246:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006248:	2b02      	cmp	r3, #2
 800624a:	f300 80b9 	bgt.w	80063c0 <_dtoa_r+0x9c8>
 800624e:	2d00      	cmp	r5, #0
 8006250:	dd05      	ble.n	800625e <_dtoa_r+0x866>
 8006252:	4639      	mov	r1, r7
 8006254:	462a      	mov	r2, r5
 8006256:	4620      	mov	r0, r4
 8006258:	f000 fdb8 	bl	8006dcc <__lshift>
 800625c:	4607      	mov	r7, r0
 800625e:	9b08      	ldr	r3, [sp, #32]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8110 	beq.w	8006486 <_dtoa_r+0xa8e>
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fbf7 	bl	8006a5c <_Balloc>
 800626e:	4605      	mov	r5, r0
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	f107 010c 	add.w	r1, r7, #12
 8006276:	3202      	adds	r2, #2
 8006278:	0092      	lsls	r2, r2, #2
 800627a:	300c      	adds	r0, #12
 800627c:	f000 fbd6 	bl	8006a2c <memcpy>
 8006280:	2201      	movs	r2, #1
 8006282:	4629      	mov	r1, r5
 8006284:	4620      	mov	r0, r4
 8006286:	f000 fda1 	bl	8006dcc <__lshift>
 800628a:	9707      	str	r7, [sp, #28]
 800628c:	4607      	mov	r7, r0
 800628e:	9b02      	ldr	r3, [sp, #8]
 8006290:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	9308      	str	r3, [sp, #32]
 800629a:	4631      	mov	r1, r6
 800629c:	4650      	mov	r0, sl
 800629e:	f7ff fb1d 	bl	80058dc <quorem>
 80062a2:	9907      	ldr	r1, [sp, #28]
 80062a4:	4605      	mov	r5, r0
 80062a6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062aa:	4650      	mov	r0, sl
 80062ac:	f000 fddf 	bl	8006e6e <__mcmp>
 80062b0:	463a      	mov	r2, r7
 80062b2:	9002      	str	r0, [sp, #8]
 80062b4:	4631      	mov	r1, r6
 80062b6:	4620      	mov	r0, r4
 80062b8:	f000 fdf3 	bl	8006ea2 <__mdiff>
 80062bc:	68c3      	ldr	r3, [r0, #12]
 80062be:	4602      	mov	r2, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f040 80e2 	bne.w	800648a <_dtoa_r+0xa92>
 80062c6:	4601      	mov	r1, r0
 80062c8:	9009      	str	r0, [sp, #36]	; 0x24
 80062ca:	4650      	mov	r0, sl
 80062cc:	f000 fdcf 	bl	8006e6e <__mcmp>
 80062d0:	4603      	mov	r3, r0
 80062d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d4:	4611      	mov	r1, r2
 80062d6:	4620      	mov	r0, r4
 80062d8:	9309      	str	r3, [sp, #36]	; 0x24
 80062da:	f000 fbf3 	bl	8006ac4 <_Bfree>
 80062de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 80d4 	bne.w	800648e <_dtoa_r+0xa96>
 80062e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	f040 80d0 	bne.w	800648e <_dtoa_r+0xa96>
 80062ee:	9a08      	ldr	r2, [sp, #32]
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	f040 80cc 	bne.w	800648e <_dtoa_r+0xa96>
 80062f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062fa:	f000 80e8 	beq.w	80064ce <_dtoa_r+0xad6>
 80062fe:	9b02      	ldr	r3, [sp, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	dd01      	ble.n	8006308 <_dtoa_r+0x910>
 8006304:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006308:	f108 0501 	add.w	r5, r8, #1
 800630c:	f888 9000 	strb.w	r9, [r8]
 8006310:	e06b      	b.n	80063ea <_dtoa_r+0x9f2>
 8006312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006314:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006318:	e6f7      	b.n	800610a <_dtoa_r+0x712>
 800631a:	9b08      	ldr	r3, [sp, #32]
 800631c:	f109 36ff 	add.w	r6, r9, #4294967295
 8006320:	42b3      	cmp	r3, r6
 8006322:	bfb7      	itett	lt
 8006324:	9b08      	ldrlt	r3, [sp, #32]
 8006326:	1b9e      	subge	r6, r3, r6
 8006328:	1af2      	sublt	r2, r6, r3
 800632a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800632c:	bfbf      	itttt	lt
 800632e:	9608      	strlt	r6, [sp, #32]
 8006330:	189b      	addlt	r3, r3, r2
 8006332:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006334:	2600      	movlt	r6, #0
 8006336:	f1b9 0f00 	cmp.w	r9, #0
 800633a:	bfb9      	ittee	lt
 800633c:	eba8 0509 	sublt.w	r5, r8, r9
 8006340:	2300      	movlt	r3, #0
 8006342:	4645      	movge	r5, r8
 8006344:	464b      	movge	r3, r9
 8006346:	e6e2      	b.n	800610e <_dtoa_r+0x716>
 8006348:	9e08      	ldr	r6, [sp, #32]
 800634a:	4645      	mov	r5, r8
 800634c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800634e:	e6e7      	b.n	8006120 <_dtoa_r+0x728>
 8006350:	9a08      	ldr	r2, [sp, #32]
 8006352:	e710      	b.n	8006176 <_dtoa_r+0x77e>
 8006354:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006356:	2b01      	cmp	r3, #1
 8006358:	dc18      	bgt.n	800638c <_dtoa_r+0x994>
 800635a:	9b02      	ldr	r3, [sp, #8]
 800635c:	b9b3      	cbnz	r3, 800638c <_dtoa_r+0x994>
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006364:	b9a3      	cbnz	r3, 8006390 <_dtoa_r+0x998>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800636c:	0d1b      	lsrs	r3, r3, #20
 800636e:	051b      	lsls	r3, r3, #20
 8006370:	b12b      	cbz	r3, 800637e <_dtoa_r+0x986>
 8006372:	9b07      	ldr	r3, [sp, #28]
 8006374:	f108 0801 	add.w	r8, r8, #1
 8006378:	3301      	adds	r3, #1
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	2301      	movs	r3, #1
 800637e:	9308      	str	r3, [sp, #32]
 8006380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006382:	2b00      	cmp	r3, #0
 8006384:	f47f af11 	bne.w	80061aa <_dtoa_r+0x7b2>
 8006388:	2001      	movs	r0, #1
 800638a:	e716      	b.n	80061ba <_dtoa_r+0x7c2>
 800638c:	2300      	movs	r3, #0
 800638e:	e7f6      	b.n	800637e <_dtoa_r+0x986>
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	e7f4      	b.n	800637e <_dtoa_r+0x986>
 8006394:	f43f af23 	beq.w	80061de <_dtoa_r+0x7e6>
 8006398:	9a07      	ldr	r2, [sp, #28]
 800639a:	331c      	adds	r3, #28
 800639c:	441a      	add	r2, r3
 800639e:	4498      	add	r8, r3
 80063a0:	441d      	add	r5, r3
 80063a2:	4613      	mov	r3, r2
 80063a4:	e71a      	b.n	80061dc <_dtoa_r+0x7e4>
 80063a6:	4603      	mov	r3, r0
 80063a8:	e7f6      	b.n	8006398 <_dtoa_r+0x9a0>
 80063aa:	bf00      	nop
 80063ac:	40240000 	.word	0x40240000
 80063b0:	f1b9 0f00 	cmp.w	r9, #0
 80063b4:	dc33      	bgt.n	800641e <_dtoa_r+0xa26>
 80063b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	dd30      	ble.n	800641e <_dtoa_r+0xa26>
 80063bc:	f8cd 9010 	str.w	r9, [sp, #16]
 80063c0:	9b04      	ldr	r3, [sp, #16]
 80063c2:	b963      	cbnz	r3, 80063de <_dtoa_r+0x9e6>
 80063c4:	4631      	mov	r1, r6
 80063c6:	2205      	movs	r2, #5
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fb92 	bl	8006af2 <__multadd>
 80063ce:	4601      	mov	r1, r0
 80063d0:	4606      	mov	r6, r0
 80063d2:	4650      	mov	r0, sl
 80063d4:	f000 fd4b 	bl	8006e6e <__mcmp>
 80063d8:	2800      	cmp	r0, #0
 80063da:	f73f ad5c 	bgt.w	8005e96 <_dtoa_r+0x49e>
 80063de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063e0:	9d06      	ldr	r5, [sp, #24]
 80063e2:	ea6f 0b03 	mvn.w	fp, r3
 80063e6:	2300      	movs	r3, #0
 80063e8:	9307      	str	r3, [sp, #28]
 80063ea:	4631      	mov	r1, r6
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 fb69 	bl	8006ac4 <_Bfree>
 80063f2:	2f00      	cmp	r7, #0
 80063f4:	f43f ae4b 	beq.w	800608e <_dtoa_r+0x696>
 80063f8:	9b07      	ldr	r3, [sp, #28]
 80063fa:	b12b      	cbz	r3, 8006408 <_dtoa_r+0xa10>
 80063fc:	42bb      	cmp	r3, r7
 80063fe:	d003      	beq.n	8006408 <_dtoa_r+0xa10>
 8006400:	4619      	mov	r1, r3
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fb5e 	bl	8006ac4 <_Bfree>
 8006408:	4639      	mov	r1, r7
 800640a:	4620      	mov	r0, r4
 800640c:	f000 fb5a 	bl	8006ac4 <_Bfree>
 8006410:	e63d      	b.n	800608e <_dtoa_r+0x696>
 8006412:	2600      	movs	r6, #0
 8006414:	4637      	mov	r7, r6
 8006416:	e7e2      	b.n	80063de <_dtoa_r+0x9e6>
 8006418:	46bb      	mov	fp, r7
 800641a:	4637      	mov	r7, r6
 800641c:	e53b      	b.n	8005e96 <_dtoa_r+0x49e>
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	f8cd 9010 	str.w	r9, [sp, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f47f af12 	bne.w	800624e <_dtoa_r+0x856>
 800642a:	9d06      	ldr	r5, [sp, #24]
 800642c:	4631      	mov	r1, r6
 800642e:	4650      	mov	r0, sl
 8006430:	f7ff fa54 	bl	80058dc <quorem>
 8006434:	9b06      	ldr	r3, [sp, #24]
 8006436:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800643a:	f805 9b01 	strb.w	r9, [r5], #1
 800643e:	9a04      	ldr	r2, [sp, #16]
 8006440:	1aeb      	subs	r3, r5, r3
 8006442:	429a      	cmp	r2, r3
 8006444:	f300 8081 	bgt.w	800654a <_dtoa_r+0xb52>
 8006448:	9b06      	ldr	r3, [sp, #24]
 800644a:	2a01      	cmp	r2, #1
 800644c:	bfac      	ite	ge
 800644e:	189b      	addge	r3, r3, r2
 8006450:	3301      	addlt	r3, #1
 8006452:	4698      	mov	r8, r3
 8006454:	2300      	movs	r3, #0
 8006456:	9307      	str	r3, [sp, #28]
 8006458:	4651      	mov	r1, sl
 800645a:	2201      	movs	r2, #1
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fcb5 	bl	8006dcc <__lshift>
 8006462:	4631      	mov	r1, r6
 8006464:	4682      	mov	sl, r0
 8006466:	f000 fd02 	bl	8006e6e <__mcmp>
 800646a:	2800      	cmp	r0, #0
 800646c:	dc34      	bgt.n	80064d8 <_dtoa_r+0xae0>
 800646e:	d102      	bne.n	8006476 <_dtoa_r+0xa7e>
 8006470:	f019 0f01 	tst.w	r9, #1
 8006474:	d130      	bne.n	80064d8 <_dtoa_r+0xae0>
 8006476:	4645      	mov	r5, r8
 8006478:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800647c:	1e6a      	subs	r2, r5, #1
 800647e:	2b30      	cmp	r3, #48	; 0x30
 8006480:	d1b3      	bne.n	80063ea <_dtoa_r+0x9f2>
 8006482:	4615      	mov	r5, r2
 8006484:	e7f8      	b.n	8006478 <_dtoa_r+0xa80>
 8006486:	4638      	mov	r0, r7
 8006488:	e6ff      	b.n	800628a <_dtoa_r+0x892>
 800648a:	2301      	movs	r3, #1
 800648c:	e722      	b.n	80062d4 <_dtoa_r+0x8dc>
 800648e:	9a02      	ldr	r2, [sp, #8]
 8006490:	2a00      	cmp	r2, #0
 8006492:	db04      	blt.n	800649e <_dtoa_r+0xaa6>
 8006494:	d128      	bne.n	80064e8 <_dtoa_r+0xaf0>
 8006496:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006498:	bb32      	cbnz	r2, 80064e8 <_dtoa_r+0xaf0>
 800649a:	9a08      	ldr	r2, [sp, #32]
 800649c:	bb22      	cbnz	r2, 80064e8 <_dtoa_r+0xaf0>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f77f af32 	ble.w	8006308 <_dtoa_r+0x910>
 80064a4:	4651      	mov	r1, sl
 80064a6:	2201      	movs	r2, #1
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fc8f 	bl	8006dcc <__lshift>
 80064ae:	4631      	mov	r1, r6
 80064b0:	4682      	mov	sl, r0
 80064b2:	f000 fcdc 	bl	8006e6e <__mcmp>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	dc05      	bgt.n	80064c6 <_dtoa_r+0xace>
 80064ba:	f47f af25 	bne.w	8006308 <_dtoa_r+0x910>
 80064be:	f019 0f01 	tst.w	r9, #1
 80064c2:	f43f af21 	beq.w	8006308 <_dtoa_r+0x910>
 80064c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064ca:	f47f af1b 	bne.w	8006304 <_dtoa_r+0x90c>
 80064ce:	2339      	movs	r3, #57	; 0x39
 80064d0:	f108 0801 	add.w	r8, r8, #1
 80064d4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80064d8:	4645      	mov	r5, r8
 80064da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064de:	1e6a      	subs	r2, r5, #1
 80064e0:	2b39      	cmp	r3, #57	; 0x39
 80064e2:	d03a      	beq.n	800655a <_dtoa_r+0xb62>
 80064e4:	3301      	adds	r3, #1
 80064e6:	e03f      	b.n	8006568 <_dtoa_r+0xb70>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f108 0501 	add.w	r5, r8, #1
 80064ee:	dd05      	ble.n	80064fc <_dtoa_r+0xb04>
 80064f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064f4:	d0eb      	beq.n	80064ce <_dtoa_r+0xad6>
 80064f6:	f109 0901 	add.w	r9, r9, #1
 80064fa:	e707      	b.n	800630c <_dtoa_r+0x914>
 80064fc:	9b06      	ldr	r3, [sp, #24]
 80064fe:	9a04      	ldr	r2, [sp, #16]
 8006500:	1aeb      	subs	r3, r5, r3
 8006502:	4293      	cmp	r3, r2
 8006504:	46a8      	mov	r8, r5
 8006506:	f805 9c01 	strb.w	r9, [r5, #-1]
 800650a:	d0a5      	beq.n	8006458 <_dtoa_r+0xa60>
 800650c:	4651      	mov	r1, sl
 800650e:	2300      	movs	r3, #0
 8006510:	220a      	movs	r2, #10
 8006512:	4620      	mov	r0, r4
 8006514:	f000 faed 	bl	8006af2 <__multadd>
 8006518:	9b07      	ldr	r3, [sp, #28]
 800651a:	4682      	mov	sl, r0
 800651c:	42bb      	cmp	r3, r7
 800651e:	f04f 020a 	mov.w	r2, #10
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	9907      	ldr	r1, [sp, #28]
 8006528:	4620      	mov	r0, r4
 800652a:	d104      	bne.n	8006536 <_dtoa_r+0xb3e>
 800652c:	f000 fae1 	bl	8006af2 <__multadd>
 8006530:	9007      	str	r0, [sp, #28]
 8006532:	4607      	mov	r7, r0
 8006534:	e6b1      	b.n	800629a <_dtoa_r+0x8a2>
 8006536:	f000 fadc 	bl	8006af2 <__multadd>
 800653a:	2300      	movs	r3, #0
 800653c:	9007      	str	r0, [sp, #28]
 800653e:	220a      	movs	r2, #10
 8006540:	4639      	mov	r1, r7
 8006542:	4620      	mov	r0, r4
 8006544:	f000 fad5 	bl	8006af2 <__multadd>
 8006548:	e7f3      	b.n	8006532 <_dtoa_r+0xb3a>
 800654a:	4651      	mov	r1, sl
 800654c:	2300      	movs	r3, #0
 800654e:	220a      	movs	r2, #10
 8006550:	4620      	mov	r0, r4
 8006552:	f000 face 	bl	8006af2 <__multadd>
 8006556:	4682      	mov	sl, r0
 8006558:	e768      	b.n	800642c <_dtoa_r+0xa34>
 800655a:	9b06      	ldr	r3, [sp, #24]
 800655c:	4293      	cmp	r3, r2
 800655e:	d105      	bne.n	800656c <_dtoa_r+0xb74>
 8006560:	2331      	movs	r3, #49	; 0x31
 8006562:	9a06      	ldr	r2, [sp, #24]
 8006564:	f10b 0b01 	add.w	fp, fp, #1
 8006568:	7013      	strb	r3, [r2, #0]
 800656a:	e73e      	b.n	80063ea <_dtoa_r+0x9f2>
 800656c:	4615      	mov	r5, r2
 800656e:	e7b4      	b.n	80064da <_dtoa_r+0xae2>
 8006570:	4b09      	ldr	r3, [pc, #36]	; (8006598 <_dtoa_r+0xba0>)
 8006572:	f7ff baa3 	b.w	8005abc <_dtoa_r+0xc4>
 8006576:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006578:	2b00      	cmp	r3, #0
 800657a:	f47f aa7d 	bne.w	8005a78 <_dtoa_r+0x80>
 800657e:	4b07      	ldr	r3, [pc, #28]	; (800659c <_dtoa_r+0xba4>)
 8006580:	f7ff ba9c 	b.w	8005abc <_dtoa_r+0xc4>
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f73f af4f 	bgt.w	800642a <_dtoa_r+0xa32>
 800658c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800658e:	2b02      	cmp	r3, #2
 8006590:	f77f af4b 	ble.w	800642a <_dtoa_r+0xa32>
 8006594:	e714      	b.n	80063c0 <_dtoa_r+0x9c8>
 8006596:	bf00      	nop
 8006598:	08007a9b 	.word	0x08007a9b
 800659c:	08007abd 	.word	0x08007abd

080065a0 <__locale_ctype_ptr_l>:
 80065a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80065a4:	4770      	bx	lr
	...

080065a8 <_localeconv_r>:
 80065a8:	4b04      	ldr	r3, [pc, #16]	; (80065bc <_localeconv_r+0x14>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a18      	ldr	r0, [r3, #32]
 80065ae:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <_localeconv_r+0x18>)
 80065b0:	2800      	cmp	r0, #0
 80065b2:	bf08      	it	eq
 80065b4:	4618      	moveq	r0, r3
 80065b6:	30f0      	adds	r0, #240	; 0xf0
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000164 	.word	0x20000164
 80065c0:	20000258 	.word	0x20000258

080065c4 <malloc>:
 80065c4:	4b02      	ldr	r3, [pc, #8]	; (80065d0 <malloc+0xc>)
 80065c6:	4601      	mov	r1, r0
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	f000 b803 	b.w	80065d4 <_malloc_r>
 80065ce:	bf00      	nop
 80065d0:	20000164 	.word	0x20000164

080065d4 <_malloc_r>:
 80065d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	f101 040b 	add.w	r4, r1, #11
 80065dc:	2c16      	cmp	r4, #22
 80065de:	4681      	mov	r9, r0
 80065e0:	d907      	bls.n	80065f2 <_malloc_r+0x1e>
 80065e2:	f034 0407 	bics.w	r4, r4, #7
 80065e6:	d505      	bpl.n	80065f4 <_malloc_r+0x20>
 80065e8:	230c      	movs	r3, #12
 80065ea:	f8c9 3000 	str.w	r3, [r9]
 80065ee:	2600      	movs	r6, #0
 80065f0:	e131      	b.n	8006856 <_malloc_r+0x282>
 80065f2:	2410      	movs	r4, #16
 80065f4:	428c      	cmp	r4, r1
 80065f6:	d3f7      	bcc.n	80065e8 <_malloc_r+0x14>
 80065f8:	4648      	mov	r0, r9
 80065fa:	f000 fa23 	bl	8006a44 <__malloc_lock>
 80065fe:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006602:	4d9b      	ldr	r5, [pc, #620]	; (8006870 <_malloc_r+0x29c>)
 8006604:	d236      	bcs.n	8006674 <_malloc_r+0xa0>
 8006606:	f104 0208 	add.w	r2, r4, #8
 800660a:	442a      	add	r2, r5
 800660c:	6856      	ldr	r6, [r2, #4]
 800660e:	f1a2 0108 	sub.w	r1, r2, #8
 8006612:	428e      	cmp	r6, r1
 8006614:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8006618:	d102      	bne.n	8006620 <_malloc_r+0x4c>
 800661a:	68d6      	ldr	r6, [r2, #12]
 800661c:	42b2      	cmp	r2, r6
 800661e:	d010      	beq.n	8006642 <_malloc_r+0x6e>
 8006620:	6873      	ldr	r3, [r6, #4]
 8006622:	68f2      	ldr	r2, [r6, #12]
 8006624:	68b1      	ldr	r1, [r6, #8]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	60ca      	str	r2, [r1, #12]
 800662c:	4433      	add	r3, r6
 800662e:	6091      	str	r1, [r2, #8]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	605a      	str	r2, [r3, #4]
 8006638:	4648      	mov	r0, r9
 800663a:	f000 fa09 	bl	8006a50 <__malloc_unlock>
 800663e:	3608      	adds	r6, #8
 8006640:	e109      	b.n	8006856 <_malloc_r+0x282>
 8006642:	3302      	adds	r3, #2
 8006644:	4a8b      	ldr	r2, [pc, #556]	; (8006874 <_malloc_r+0x2a0>)
 8006646:	692e      	ldr	r6, [r5, #16]
 8006648:	4611      	mov	r1, r2
 800664a:	4296      	cmp	r6, r2
 800664c:	d06d      	beq.n	800672a <_malloc_r+0x156>
 800664e:	6870      	ldr	r0, [r6, #4]
 8006650:	f020 0003 	bic.w	r0, r0, #3
 8006654:	1b07      	subs	r7, r0, r4
 8006656:	2f0f      	cmp	r7, #15
 8006658:	dd47      	ble.n	80066ea <_malloc_r+0x116>
 800665a:	1933      	adds	r3, r6, r4
 800665c:	f044 0401 	orr.w	r4, r4, #1
 8006660:	6074      	str	r4, [r6, #4]
 8006662:	616b      	str	r3, [r5, #20]
 8006664:	612b      	str	r3, [r5, #16]
 8006666:	60da      	str	r2, [r3, #12]
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	f047 0201 	orr.w	r2, r7, #1
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	5037      	str	r7, [r6, r0]
 8006672:	e7e1      	b.n	8006638 <_malloc_r+0x64>
 8006674:	0a63      	lsrs	r3, r4, #9
 8006676:	d02a      	beq.n	80066ce <_malloc_r+0xfa>
 8006678:	2b04      	cmp	r3, #4
 800667a:	d812      	bhi.n	80066a2 <_malloc_r+0xce>
 800667c:	09a3      	lsrs	r3, r4, #6
 800667e:	3338      	adds	r3, #56	; 0x38
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006686:	6856      	ldr	r6, [r2, #4]
 8006688:	f1a2 0008 	sub.w	r0, r2, #8
 800668c:	4286      	cmp	r6, r0
 800668e:	d006      	beq.n	800669e <_malloc_r+0xca>
 8006690:	6872      	ldr	r2, [r6, #4]
 8006692:	f022 0203 	bic.w	r2, r2, #3
 8006696:	1b11      	subs	r1, r2, r4
 8006698:	290f      	cmp	r1, #15
 800669a:	dd1c      	ble.n	80066d6 <_malloc_r+0x102>
 800669c:	3b01      	subs	r3, #1
 800669e:	3301      	adds	r3, #1
 80066a0:	e7d0      	b.n	8006644 <_malloc_r+0x70>
 80066a2:	2b14      	cmp	r3, #20
 80066a4:	d801      	bhi.n	80066aa <_malloc_r+0xd6>
 80066a6:	335b      	adds	r3, #91	; 0x5b
 80066a8:	e7ea      	b.n	8006680 <_malloc_r+0xac>
 80066aa:	2b54      	cmp	r3, #84	; 0x54
 80066ac:	d802      	bhi.n	80066b4 <_malloc_r+0xe0>
 80066ae:	0b23      	lsrs	r3, r4, #12
 80066b0:	336e      	adds	r3, #110	; 0x6e
 80066b2:	e7e5      	b.n	8006680 <_malloc_r+0xac>
 80066b4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80066b8:	d802      	bhi.n	80066c0 <_malloc_r+0xec>
 80066ba:	0be3      	lsrs	r3, r4, #15
 80066bc:	3377      	adds	r3, #119	; 0x77
 80066be:	e7df      	b.n	8006680 <_malloc_r+0xac>
 80066c0:	f240 5254 	movw	r2, #1364	; 0x554
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d804      	bhi.n	80066d2 <_malloc_r+0xfe>
 80066c8:	0ca3      	lsrs	r3, r4, #18
 80066ca:	337c      	adds	r3, #124	; 0x7c
 80066cc:	e7d8      	b.n	8006680 <_malloc_r+0xac>
 80066ce:	233f      	movs	r3, #63	; 0x3f
 80066d0:	e7d6      	b.n	8006680 <_malloc_r+0xac>
 80066d2:	237e      	movs	r3, #126	; 0x7e
 80066d4:	e7d4      	b.n	8006680 <_malloc_r+0xac>
 80066d6:	2900      	cmp	r1, #0
 80066d8:	68f1      	ldr	r1, [r6, #12]
 80066da:	db04      	blt.n	80066e6 <_malloc_r+0x112>
 80066dc:	68b3      	ldr	r3, [r6, #8]
 80066de:	60d9      	str	r1, [r3, #12]
 80066e0:	608b      	str	r3, [r1, #8]
 80066e2:	18b3      	adds	r3, r6, r2
 80066e4:	e7a4      	b.n	8006630 <_malloc_r+0x5c>
 80066e6:	460e      	mov	r6, r1
 80066e8:	e7d0      	b.n	800668c <_malloc_r+0xb8>
 80066ea:	2f00      	cmp	r7, #0
 80066ec:	616a      	str	r2, [r5, #20]
 80066ee:	612a      	str	r2, [r5, #16]
 80066f0:	db05      	blt.n	80066fe <_malloc_r+0x12a>
 80066f2:	4430      	add	r0, r6
 80066f4:	6843      	ldr	r3, [r0, #4]
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	6043      	str	r3, [r0, #4]
 80066fc:	e79c      	b.n	8006638 <_malloc_r+0x64>
 80066fe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006702:	d244      	bcs.n	800678e <_malloc_r+0x1ba>
 8006704:	2201      	movs	r2, #1
 8006706:	08c0      	lsrs	r0, r0, #3
 8006708:	1087      	asrs	r7, r0, #2
 800670a:	fa02 f707 	lsl.w	r7, r2, r7
 800670e:	686a      	ldr	r2, [r5, #4]
 8006710:	3001      	adds	r0, #1
 8006712:	433a      	orrs	r2, r7
 8006714:	606a      	str	r2, [r5, #4]
 8006716:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800671a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800671e:	3a08      	subs	r2, #8
 8006720:	60f2      	str	r2, [r6, #12]
 8006722:	60b7      	str	r7, [r6, #8]
 8006724:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8006728:	60fe      	str	r6, [r7, #12]
 800672a:	2001      	movs	r0, #1
 800672c:	109a      	asrs	r2, r3, #2
 800672e:	fa00 f202 	lsl.w	r2, r0, r2
 8006732:	6868      	ldr	r0, [r5, #4]
 8006734:	4282      	cmp	r2, r0
 8006736:	f200 809f 	bhi.w	8006878 <_malloc_r+0x2a4>
 800673a:	4202      	tst	r2, r0
 800673c:	d106      	bne.n	800674c <_malloc_r+0x178>
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	0052      	lsls	r2, r2, #1
 8006744:	4202      	tst	r2, r0
 8006746:	f103 0304 	add.w	r3, r3, #4
 800674a:	d0fa      	beq.n	8006742 <_malloc_r+0x16e>
 800674c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8006750:	46e0      	mov	r8, ip
 8006752:	469e      	mov	lr, r3
 8006754:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006758:	4546      	cmp	r6, r8
 800675a:	d153      	bne.n	8006804 <_malloc_r+0x230>
 800675c:	f10e 0e01 	add.w	lr, lr, #1
 8006760:	f01e 0f03 	tst.w	lr, #3
 8006764:	f108 0808 	add.w	r8, r8, #8
 8006768:	d1f4      	bne.n	8006754 <_malloc_r+0x180>
 800676a:	0798      	lsls	r0, r3, #30
 800676c:	d179      	bne.n	8006862 <_malloc_r+0x28e>
 800676e:	686b      	ldr	r3, [r5, #4]
 8006770:	ea23 0302 	bic.w	r3, r3, r2
 8006774:	606b      	str	r3, [r5, #4]
 8006776:	6868      	ldr	r0, [r5, #4]
 8006778:	0052      	lsls	r2, r2, #1
 800677a:	4282      	cmp	r2, r0
 800677c:	d87c      	bhi.n	8006878 <_malloc_r+0x2a4>
 800677e:	2a00      	cmp	r2, #0
 8006780:	d07a      	beq.n	8006878 <_malloc_r+0x2a4>
 8006782:	4673      	mov	r3, lr
 8006784:	4202      	tst	r2, r0
 8006786:	d1e1      	bne.n	800674c <_malloc_r+0x178>
 8006788:	3304      	adds	r3, #4
 800678a:	0052      	lsls	r2, r2, #1
 800678c:	e7fa      	b.n	8006784 <_malloc_r+0x1b0>
 800678e:	0a42      	lsrs	r2, r0, #9
 8006790:	2a04      	cmp	r2, #4
 8006792:	d815      	bhi.n	80067c0 <_malloc_r+0x1ec>
 8006794:	0982      	lsrs	r2, r0, #6
 8006796:	3238      	adds	r2, #56	; 0x38
 8006798:	1c57      	adds	r7, r2, #1
 800679a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800679e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80067a2:	45be      	cmp	lr, r7
 80067a4:	d126      	bne.n	80067f4 <_malloc_r+0x220>
 80067a6:	2001      	movs	r0, #1
 80067a8:	1092      	asrs	r2, r2, #2
 80067aa:	fa00 f202 	lsl.w	r2, r0, r2
 80067ae:	6868      	ldr	r0, [r5, #4]
 80067b0:	4310      	orrs	r0, r2
 80067b2:	6068      	str	r0, [r5, #4]
 80067b4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80067b8:	60b7      	str	r7, [r6, #8]
 80067ba:	f8ce 6008 	str.w	r6, [lr, #8]
 80067be:	e7b3      	b.n	8006728 <_malloc_r+0x154>
 80067c0:	2a14      	cmp	r2, #20
 80067c2:	d801      	bhi.n	80067c8 <_malloc_r+0x1f4>
 80067c4:	325b      	adds	r2, #91	; 0x5b
 80067c6:	e7e7      	b.n	8006798 <_malloc_r+0x1c4>
 80067c8:	2a54      	cmp	r2, #84	; 0x54
 80067ca:	d802      	bhi.n	80067d2 <_malloc_r+0x1fe>
 80067cc:	0b02      	lsrs	r2, r0, #12
 80067ce:	326e      	adds	r2, #110	; 0x6e
 80067d0:	e7e2      	b.n	8006798 <_malloc_r+0x1c4>
 80067d2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80067d6:	d802      	bhi.n	80067de <_malloc_r+0x20a>
 80067d8:	0bc2      	lsrs	r2, r0, #15
 80067da:	3277      	adds	r2, #119	; 0x77
 80067dc:	e7dc      	b.n	8006798 <_malloc_r+0x1c4>
 80067de:	f240 5754 	movw	r7, #1364	; 0x554
 80067e2:	42ba      	cmp	r2, r7
 80067e4:	bf9a      	itte	ls
 80067e6:	0c82      	lsrls	r2, r0, #18
 80067e8:	327c      	addls	r2, #124	; 0x7c
 80067ea:	227e      	movhi	r2, #126	; 0x7e
 80067ec:	e7d4      	b.n	8006798 <_malloc_r+0x1c4>
 80067ee:	68bf      	ldr	r7, [r7, #8]
 80067f0:	45be      	cmp	lr, r7
 80067f2:	d004      	beq.n	80067fe <_malloc_r+0x22a>
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	f022 0203 	bic.w	r2, r2, #3
 80067fa:	4290      	cmp	r0, r2
 80067fc:	d3f7      	bcc.n	80067ee <_malloc_r+0x21a>
 80067fe:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8006802:	e7d7      	b.n	80067b4 <_malloc_r+0x1e0>
 8006804:	6870      	ldr	r0, [r6, #4]
 8006806:	68f7      	ldr	r7, [r6, #12]
 8006808:	f020 0003 	bic.w	r0, r0, #3
 800680c:	eba0 0a04 	sub.w	sl, r0, r4
 8006810:	f1ba 0f0f 	cmp.w	sl, #15
 8006814:	dd10      	ble.n	8006838 <_malloc_r+0x264>
 8006816:	68b2      	ldr	r2, [r6, #8]
 8006818:	1933      	adds	r3, r6, r4
 800681a:	f044 0401 	orr.w	r4, r4, #1
 800681e:	6074      	str	r4, [r6, #4]
 8006820:	60d7      	str	r7, [r2, #12]
 8006822:	60ba      	str	r2, [r7, #8]
 8006824:	f04a 0201 	orr.w	r2, sl, #1
 8006828:	616b      	str	r3, [r5, #20]
 800682a:	612b      	str	r3, [r5, #16]
 800682c:	60d9      	str	r1, [r3, #12]
 800682e:	6099      	str	r1, [r3, #8]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	f846 a000 	str.w	sl, [r6, r0]
 8006836:	e6ff      	b.n	8006638 <_malloc_r+0x64>
 8006838:	f1ba 0f00 	cmp.w	sl, #0
 800683c:	db0f      	blt.n	800685e <_malloc_r+0x28a>
 800683e:	4430      	add	r0, r6
 8006840:	6843      	ldr	r3, [r0, #4]
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6043      	str	r3, [r0, #4]
 8006848:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800684c:	4648      	mov	r0, r9
 800684e:	60df      	str	r7, [r3, #12]
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	f000 f8fd 	bl	8006a50 <__malloc_unlock>
 8006856:	4630      	mov	r0, r6
 8006858:	b003      	add	sp, #12
 800685a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685e:	463e      	mov	r6, r7
 8006860:	e77a      	b.n	8006758 <_malloc_r+0x184>
 8006862:	f85c 0908 	ldr.w	r0, [ip], #-8
 8006866:	3b01      	subs	r3, #1
 8006868:	4584      	cmp	ip, r0
 800686a:	f43f af7e 	beq.w	800676a <_malloc_r+0x196>
 800686e:	e782      	b.n	8006776 <_malloc_r+0x1a2>
 8006870:	200003c4 	.word	0x200003c4
 8006874:	200003cc 	.word	0x200003cc
 8006878:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800687c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006880:	f026 0603 	bic.w	r6, r6, #3
 8006884:	42b4      	cmp	r4, r6
 8006886:	d803      	bhi.n	8006890 <_malloc_r+0x2bc>
 8006888:	1b33      	subs	r3, r6, r4
 800688a:	2b0f      	cmp	r3, #15
 800688c:	f300 8095 	bgt.w	80069ba <_malloc_r+0x3e6>
 8006890:	4a4f      	ldr	r2, [pc, #316]	; (80069d0 <_malloc_r+0x3fc>)
 8006892:	eb0b 0306 	add.w	r3, fp, r6
 8006896:	6817      	ldr	r7, [r2, #0]
 8006898:	4a4e      	ldr	r2, [pc, #312]	; (80069d4 <_malloc_r+0x400>)
 800689a:	3710      	adds	r7, #16
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	4427      	add	r7, r4
 80068a0:	3101      	adds	r1, #1
 80068a2:	d005      	beq.n	80068b0 <_malloc_r+0x2dc>
 80068a4:	494c      	ldr	r1, [pc, #304]	; (80069d8 <_malloc_r+0x404>)
 80068a6:	3901      	subs	r1, #1
 80068a8:	440f      	add	r7, r1
 80068aa:	3101      	adds	r1, #1
 80068ac:	4249      	negs	r1, r1
 80068ae:	400f      	ands	r7, r1
 80068b0:	4639      	mov	r1, r7
 80068b2:	4648      	mov	r0, r9
 80068b4:	9201      	str	r2, [sp, #4]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	f000 fba2 	bl	8007000 <_sbrk_r>
 80068bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068c0:	4680      	mov	r8, r0
 80068c2:	d055      	beq.n	8006970 <_malloc_r+0x39c>
 80068c4:	9b00      	ldr	r3, [sp, #0]
 80068c6:	9a01      	ldr	r2, [sp, #4]
 80068c8:	4283      	cmp	r3, r0
 80068ca:	d901      	bls.n	80068d0 <_malloc_r+0x2fc>
 80068cc:	45ab      	cmp	fp, r5
 80068ce:	d14f      	bne.n	8006970 <_malloc_r+0x39c>
 80068d0:	4842      	ldr	r0, [pc, #264]	; (80069dc <_malloc_r+0x408>)
 80068d2:	4543      	cmp	r3, r8
 80068d4:	6801      	ldr	r1, [r0, #0]
 80068d6:	4682      	mov	sl, r0
 80068d8:	eb07 0e01 	add.w	lr, r7, r1
 80068dc:	f8c0 e000 	str.w	lr, [r0]
 80068e0:	493f      	ldr	r1, [pc, #252]	; (80069e0 <_malloc_r+0x40c>)
 80068e2:	d113      	bne.n	800690c <_malloc_r+0x338>
 80068e4:	420b      	tst	r3, r1
 80068e6:	d111      	bne.n	800690c <_malloc_r+0x338>
 80068e8:	68ab      	ldr	r3, [r5, #8]
 80068ea:	443e      	add	r6, r7
 80068ec:	f046 0601 	orr.w	r6, r6, #1
 80068f0:	605e      	str	r6, [r3, #4]
 80068f2:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <_malloc_r+0x410>)
 80068f4:	f8da 3000 	ldr.w	r3, [sl]
 80068f8:	6811      	ldr	r1, [r2, #0]
 80068fa:	428b      	cmp	r3, r1
 80068fc:	bf88      	it	hi
 80068fe:	6013      	strhi	r3, [r2, #0]
 8006900:	4a39      	ldr	r2, [pc, #228]	; (80069e8 <_malloc_r+0x414>)
 8006902:	6811      	ldr	r1, [r2, #0]
 8006904:	428b      	cmp	r3, r1
 8006906:	bf88      	it	hi
 8006908:	6013      	strhi	r3, [r2, #0]
 800690a:	e031      	b.n	8006970 <_malloc_r+0x39c>
 800690c:	6810      	ldr	r0, [r2, #0]
 800690e:	3001      	adds	r0, #1
 8006910:	bf1b      	ittet	ne
 8006912:	eba8 0303 	subne.w	r3, r8, r3
 8006916:	4473      	addne	r3, lr
 8006918:	f8c2 8000 	streq.w	r8, [r2]
 800691c:	f8ca 3000 	strne.w	r3, [sl]
 8006920:	f018 0007 	ands.w	r0, r8, #7
 8006924:	bf1c      	itt	ne
 8006926:	f1c0 0008 	rsbne	r0, r0, #8
 800692a:	4480      	addne	r8, r0
 800692c:	4b2a      	ldr	r3, [pc, #168]	; (80069d8 <_malloc_r+0x404>)
 800692e:	4447      	add	r7, r8
 8006930:	4418      	add	r0, r3
 8006932:	400f      	ands	r7, r1
 8006934:	1bc7      	subs	r7, r0, r7
 8006936:	4639      	mov	r1, r7
 8006938:	4648      	mov	r0, r9
 800693a:	f000 fb61 	bl	8007000 <_sbrk_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	bf04      	itt	eq
 8006942:	4640      	moveq	r0, r8
 8006944:	2700      	moveq	r7, #0
 8006946:	f8da 3000 	ldr.w	r3, [sl]
 800694a:	eba0 0008 	sub.w	r0, r0, r8
 800694e:	443b      	add	r3, r7
 8006950:	4407      	add	r7, r0
 8006952:	f047 0701 	orr.w	r7, r7, #1
 8006956:	45ab      	cmp	fp, r5
 8006958:	f8c5 8008 	str.w	r8, [r5, #8]
 800695c:	f8ca 3000 	str.w	r3, [sl]
 8006960:	f8c8 7004 	str.w	r7, [r8, #4]
 8006964:	d0c5      	beq.n	80068f2 <_malloc_r+0x31e>
 8006966:	2e0f      	cmp	r6, #15
 8006968:	d810      	bhi.n	800698c <_malloc_r+0x3b8>
 800696a:	2301      	movs	r3, #1
 800696c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006970:	68ab      	ldr	r3, [r5, #8]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	f022 0203 	bic.w	r2, r2, #3
 8006978:	4294      	cmp	r4, r2
 800697a:	eba2 0304 	sub.w	r3, r2, r4
 800697e:	d801      	bhi.n	8006984 <_malloc_r+0x3b0>
 8006980:	2b0f      	cmp	r3, #15
 8006982:	dc1a      	bgt.n	80069ba <_malloc_r+0x3e6>
 8006984:	4648      	mov	r0, r9
 8006986:	f000 f863 	bl	8006a50 <__malloc_unlock>
 800698a:	e630      	b.n	80065ee <_malloc_r+0x1a>
 800698c:	2205      	movs	r2, #5
 800698e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006992:	3e0c      	subs	r6, #12
 8006994:	f026 0607 	bic.w	r6, r6, #7
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	4333      	orrs	r3, r6
 800699e:	f8cb 3004 	str.w	r3, [fp, #4]
 80069a2:	2e0f      	cmp	r6, #15
 80069a4:	eb0b 0306 	add.w	r3, fp, r6
 80069a8:	605a      	str	r2, [r3, #4]
 80069aa:	609a      	str	r2, [r3, #8]
 80069ac:	d9a1      	bls.n	80068f2 <_malloc_r+0x31e>
 80069ae:	f10b 0108 	add.w	r1, fp, #8
 80069b2:	4648      	mov	r0, r9
 80069b4:	f000 fc3e 	bl	8007234 <_free_r>
 80069b8:	e79b      	b.n	80068f2 <_malloc_r+0x31e>
 80069ba:	68ae      	ldr	r6, [r5, #8]
 80069bc:	f044 0201 	orr.w	r2, r4, #1
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	4434      	add	r4, r6
 80069c6:	6072      	str	r2, [r6, #4]
 80069c8:	60ac      	str	r4, [r5, #8]
 80069ca:	6063      	str	r3, [r4, #4]
 80069cc:	e634      	b.n	8006638 <_malloc_r+0x64>
 80069ce:	bf00      	nop
 80069d0:	20000a60 	.word	0x20000a60
 80069d4:	200007cc 	.word	0x200007cc
 80069d8:	00000080 	.word	0x00000080
 80069dc:	20000a30 	.word	0x20000a30
 80069e0:	0000007f 	.word	0x0000007f
 80069e4:	20000a58 	.word	0x20000a58
 80069e8:	20000a5c 	.word	0x20000a5c

080069ec <__ascii_mbtowc>:
 80069ec:	b082      	sub	sp, #8
 80069ee:	b901      	cbnz	r1, 80069f2 <__ascii_mbtowc+0x6>
 80069f0:	a901      	add	r1, sp, #4
 80069f2:	b142      	cbz	r2, 8006a06 <__ascii_mbtowc+0x1a>
 80069f4:	b14b      	cbz	r3, 8006a0a <__ascii_mbtowc+0x1e>
 80069f6:	7813      	ldrb	r3, [r2, #0]
 80069f8:	600b      	str	r3, [r1, #0]
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	1c10      	adds	r0, r2, #0
 80069fe:	bf18      	it	ne
 8006a00:	2001      	movne	r0, #1
 8006a02:	b002      	add	sp, #8
 8006a04:	4770      	bx	lr
 8006a06:	4610      	mov	r0, r2
 8006a08:	e7fb      	b.n	8006a02 <__ascii_mbtowc+0x16>
 8006a0a:	f06f 0001 	mvn.w	r0, #1
 8006a0e:	e7f8      	b.n	8006a02 <__ascii_mbtowc+0x16>

08006a10 <memchr>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	b2c9      	uxtb	r1, r1
 8006a14:	4402      	add	r2, r0
 8006a16:	4290      	cmp	r0, r2
 8006a18:	4603      	mov	r3, r0
 8006a1a:	d101      	bne.n	8006a20 <memchr+0x10>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	bd10      	pop	{r4, pc}
 8006a20:	781c      	ldrb	r4, [r3, #0]
 8006a22:	3001      	adds	r0, #1
 8006a24:	428c      	cmp	r4, r1
 8006a26:	d1f6      	bne.n	8006a16 <memchr+0x6>
 8006a28:	4618      	mov	r0, r3
 8006a2a:	bd10      	pop	{r4, pc}

08006a2c <memcpy>:
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	1e43      	subs	r3, r0, #1
 8006a30:	440a      	add	r2, r1
 8006a32:	4291      	cmp	r1, r2
 8006a34:	d100      	bne.n	8006a38 <memcpy+0xc>
 8006a36:	bd10      	pop	{r4, pc}
 8006a38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a40:	e7f7      	b.n	8006a32 <memcpy+0x6>
	...

08006a44 <__malloc_lock>:
 8006a44:	4801      	ldr	r0, [pc, #4]	; (8006a4c <__malloc_lock+0x8>)
 8006a46:	f000 bcb1 	b.w	80073ac <__retarget_lock_acquire_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	20001fb0 	.word	0x20001fb0

08006a50 <__malloc_unlock>:
 8006a50:	4801      	ldr	r0, [pc, #4]	; (8006a58 <__malloc_unlock+0x8>)
 8006a52:	f000 bcac 	b.w	80073ae <__retarget_lock_release_recursive>
 8006a56:	bf00      	nop
 8006a58:	20001fb0 	.word	0x20001fb0

08006a5c <_Balloc>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a60:	4604      	mov	r4, r0
 8006a62:	460e      	mov	r6, r1
 8006a64:	b93d      	cbnz	r5, 8006a76 <_Balloc+0x1a>
 8006a66:	2010      	movs	r0, #16
 8006a68:	f7ff fdac 	bl	80065c4 <malloc>
 8006a6c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a6e:	6045      	str	r5, [r0, #4]
 8006a70:	6085      	str	r5, [r0, #8]
 8006a72:	6005      	str	r5, [r0, #0]
 8006a74:	60c5      	str	r5, [r0, #12]
 8006a76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006a78:	68eb      	ldr	r3, [r5, #12]
 8006a7a:	b183      	cbz	r3, 8006a9e <_Balloc+0x42>
 8006a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006a84:	b9b8      	cbnz	r0, 8006ab6 <_Balloc+0x5a>
 8006a86:	2101      	movs	r1, #1
 8006a88:	fa01 f506 	lsl.w	r5, r1, r6
 8006a8c:	1d6a      	adds	r2, r5, #5
 8006a8e:	0092      	lsls	r2, r2, #2
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fb4c 	bl	800712e <_calloc_r>
 8006a96:	b160      	cbz	r0, 8006ab2 <_Balloc+0x56>
 8006a98:	6046      	str	r6, [r0, #4]
 8006a9a:	6085      	str	r5, [r0, #8]
 8006a9c:	e00e      	b.n	8006abc <_Balloc+0x60>
 8006a9e:	2221      	movs	r2, #33	; 0x21
 8006aa0:	2104      	movs	r1, #4
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 fb43 	bl	800712e <_calloc_r>
 8006aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aaa:	60e8      	str	r0, [r5, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e4      	bne.n	8006a7c <_Balloc+0x20>
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	bd70      	pop	{r4, r5, r6, pc}
 8006ab6:	6802      	ldr	r2, [r0, #0]
 8006ab8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006abc:	2300      	movs	r3, #0
 8006abe:	6103      	str	r3, [r0, #16]
 8006ac0:	60c3      	str	r3, [r0, #12]
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}

08006ac4 <_Bfree>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460d      	mov	r5, r1
 8006acc:	b93c      	cbnz	r4, 8006ade <_Bfree+0x1a>
 8006ace:	2010      	movs	r0, #16
 8006ad0:	f7ff fd78 	bl	80065c4 <malloc>
 8006ad4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ad6:	6044      	str	r4, [r0, #4]
 8006ad8:	6084      	str	r4, [r0, #8]
 8006ada:	6004      	str	r4, [r0, #0]
 8006adc:	60c4      	str	r4, [r0, #12]
 8006ade:	b13d      	cbz	r5, 8006af0 <_Bfree+0x2c>
 8006ae0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ae2:	686a      	ldr	r2, [r5, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006aea:	6029      	str	r1, [r5, #0]
 8006aec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006af0:	bd70      	pop	{r4, r5, r6, pc}

08006af2 <__multadd>:
 8006af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af6:	461f      	mov	r7, r3
 8006af8:	4606      	mov	r6, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	2300      	movs	r3, #0
 8006afe:	690d      	ldr	r5, [r1, #16]
 8006b00:	f101 0e14 	add.w	lr, r1, #20
 8006b04:	f8de 0000 	ldr.w	r0, [lr]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	b281      	uxth	r1, r0
 8006b0c:	fb02 7101 	mla	r1, r2, r1, r7
 8006b10:	0c00      	lsrs	r0, r0, #16
 8006b12:	0c0f      	lsrs	r7, r1, #16
 8006b14:	fb02 7000 	mla	r0, r2, r0, r7
 8006b18:	b289      	uxth	r1, r1
 8006b1a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006b1e:	429d      	cmp	r5, r3
 8006b20:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006b24:	f84e 1b04 	str.w	r1, [lr], #4
 8006b28:	dcec      	bgt.n	8006b04 <__multadd+0x12>
 8006b2a:	b1d7      	cbz	r7, 8006b62 <__multadd+0x70>
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	429d      	cmp	r5, r3
 8006b30:	db12      	blt.n	8006b58 <__multadd+0x66>
 8006b32:	6861      	ldr	r1, [r4, #4]
 8006b34:	4630      	mov	r0, r6
 8006b36:	3101      	adds	r1, #1
 8006b38:	f7ff ff90 	bl	8006a5c <_Balloc>
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	6922      	ldr	r2, [r4, #16]
 8006b40:	f104 010c 	add.w	r1, r4, #12
 8006b44:	3202      	adds	r2, #2
 8006b46:	0092      	lsls	r2, r2, #2
 8006b48:	300c      	adds	r0, #12
 8006b4a:	f7ff ff6f 	bl	8006a2c <memcpy>
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7ff ffb7 	bl	8006ac4 <_Bfree>
 8006b56:	4644      	mov	r4, r8
 8006b58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	615f      	str	r7, [r3, #20]
 8006b60:	6125      	str	r5, [r4, #16]
 8006b62:	4620      	mov	r0, r4
 8006b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b68 <__hi0bits>:
 8006b68:	0c02      	lsrs	r2, r0, #16
 8006b6a:	0412      	lsls	r2, r2, #16
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	b9b2      	cbnz	r2, 8006b9e <__hi0bits+0x36>
 8006b70:	0403      	lsls	r3, r0, #16
 8006b72:	2010      	movs	r0, #16
 8006b74:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b78:	bf04      	itt	eq
 8006b7a:	021b      	lsleq	r3, r3, #8
 8006b7c:	3008      	addeq	r0, #8
 8006b7e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b82:	bf04      	itt	eq
 8006b84:	011b      	lsleq	r3, r3, #4
 8006b86:	3004      	addeq	r0, #4
 8006b88:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b8c:	bf04      	itt	eq
 8006b8e:	009b      	lsleq	r3, r3, #2
 8006b90:	3002      	addeq	r0, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	db06      	blt.n	8006ba4 <__hi0bits+0x3c>
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	d503      	bpl.n	8006ba2 <__hi0bits+0x3a>
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	4770      	bx	lr
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e7e8      	b.n	8006b74 <__hi0bits+0xc>
 8006ba2:	2020      	movs	r0, #32
 8006ba4:	4770      	bx	lr

08006ba6 <__lo0bits>:
 8006ba6:	6803      	ldr	r3, [r0, #0]
 8006ba8:	4601      	mov	r1, r0
 8006baa:	f013 0207 	ands.w	r2, r3, #7
 8006bae:	d00b      	beq.n	8006bc8 <__lo0bits+0x22>
 8006bb0:	07da      	lsls	r2, r3, #31
 8006bb2:	d423      	bmi.n	8006bfc <__lo0bits+0x56>
 8006bb4:	0798      	lsls	r0, r3, #30
 8006bb6:	bf49      	itett	mi
 8006bb8:	085b      	lsrmi	r3, r3, #1
 8006bba:	089b      	lsrpl	r3, r3, #2
 8006bbc:	2001      	movmi	r0, #1
 8006bbe:	600b      	strmi	r3, [r1, #0]
 8006bc0:	bf5c      	itt	pl
 8006bc2:	600b      	strpl	r3, [r1, #0]
 8006bc4:	2002      	movpl	r0, #2
 8006bc6:	4770      	bx	lr
 8006bc8:	b298      	uxth	r0, r3
 8006bca:	b9a8      	cbnz	r0, 8006bf8 <__lo0bits+0x52>
 8006bcc:	2010      	movs	r0, #16
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006bd4:	bf04      	itt	eq
 8006bd6:	0a1b      	lsreq	r3, r3, #8
 8006bd8:	3008      	addeq	r0, #8
 8006bda:	071a      	lsls	r2, r3, #28
 8006bdc:	bf04      	itt	eq
 8006bde:	091b      	lsreq	r3, r3, #4
 8006be0:	3004      	addeq	r0, #4
 8006be2:	079a      	lsls	r2, r3, #30
 8006be4:	bf04      	itt	eq
 8006be6:	089b      	lsreq	r3, r3, #2
 8006be8:	3002      	addeq	r0, #2
 8006bea:	07da      	lsls	r2, r3, #31
 8006bec:	d402      	bmi.n	8006bf4 <__lo0bits+0x4e>
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	d006      	beq.n	8006c00 <__lo0bits+0x5a>
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	600b      	str	r3, [r1, #0]
 8006bf6:	4770      	bx	lr
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	e7e9      	b.n	8006bd0 <__lo0bits+0x2a>
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	4770      	bx	lr
 8006c00:	2020      	movs	r0, #32
 8006c02:	4770      	bx	lr

08006c04 <__i2b>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	2101      	movs	r1, #1
 8006c0a:	f7ff ff27 	bl	8006a5c <_Balloc>
 8006c0e:	2201      	movs	r2, #1
 8006c10:	6144      	str	r4, [r0, #20]
 8006c12:	6102      	str	r2, [r0, #16]
 8006c14:	bd10      	pop	{r4, pc}

08006c16 <__multiply>:
 8006c16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	690a      	ldr	r2, [r1, #16]
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	4689      	mov	r9, r1
 8006c22:	429a      	cmp	r2, r3
 8006c24:	bfbe      	ittt	lt
 8006c26:	460b      	movlt	r3, r1
 8006c28:	46a1      	movlt	r9, r4
 8006c2a:	461c      	movlt	r4, r3
 8006c2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c34:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006c38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c3c:	eb07 060a 	add.w	r6, r7, sl
 8006c40:	429e      	cmp	r6, r3
 8006c42:	bfc8      	it	gt
 8006c44:	3101      	addgt	r1, #1
 8006c46:	f7ff ff09 	bl	8006a5c <_Balloc>
 8006c4a:	f100 0514 	add.w	r5, r0, #20
 8006c4e:	462b      	mov	r3, r5
 8006c50:	2200      	movs	r2, #0
 8006c52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c56:	4543      	cmp	r3, r8
 8006c58:	d316      	bcc.n	8006c88 <__multiply+0x72>
 8006c5a:	f104 0214 	add.w	r2, r4, #20
 8006c5e:	f109 0114 	add.w	r1, r9, #20
 8006c62:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006c66:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	9c01      	ldr	r4, [sp, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	4294      	cmp	r4, r2
 8006c72:	d80c      	bhi.n	8006c8e <__multiply+0x78>
 8006c74:	2e00      	cmp	r6, #0
 8006c76:	dd03      	ble.n	8006c80 <__multiply+0x6a>
 8006c78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d054      	beq.n	8006d2a <__multiply+0x114>
 8006c80:	6106      	str	r6, [r0, #16]
 8006c82:	b003      	add	sp, #12
 8006c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c88:	f843 2b04 	str.w	r2, [r3], #4
 8006c8c:	e7e3      	b.n	8006c56 <__multiply+0x40>
 8006c8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c92:	3204      	adds	r2, #4
 8006c94:	f1ba 0f00 	cmp.w	sl, #0
 8006c98:	d020      	beq.n	8006cdc <__multiply+0xc6>
 8006c9a:	46ae      	mov	lr, r5
 8006c9c:	4689      	mov	r9, r1
 8006c9e:	f04f 0c00 	mov.w	ip, #0
 8006ca2:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ca6:	f8be b000 	ldrh.w	fp, [lr]
 8006caa:	b2a3      	uxth	r3, r4
 8006cac:	fb0a b303 	mla	r3, sl, r3, fp
 8006cb0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006cb4:	f8de 4000 	ldr.w	r4, [lr]
 8006cb8:	4463      	add	r3, ip
 8006cba:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006cbe:	fb0a c40b 	mla	r4, sl, fp, ip
 8006cc2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ccc:	454f      	cmp	r7, r9
 8006cce:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006cd2:	f84e 3b04 	str.w	r3, [lr], #4
 8006cd6:	d8e4      	bhi.n	8006ca2 <__multiply+0x8c>
 8006cd8:	f8ce c000 	str.w	ip, [lr]
 8006cdc:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006ce0:	f1b9 0f00 	cmp.w	r9, #0
 8006ce4:	d01f      	beq.n	8006d26 <__multiply+0x110>
 8006ce6:	46ae      	mov	lr, r5
 8006ce8:	468c      	mov	ip, r1
 8006cea:	f04f 0a00 	mov.w	sl, #0
 8006cee:	682b      	ldr	r3, [r5, #0]
 8006cf0:	f8bc 4000 	ldrh.w	r4, [ip]
 8006cf4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	fb09 b404 	mla	r4, r9, r4, fp
 8006cfe:	44a2      	add	sl, r4
 8006d00:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006d04:	f84e 3b04 	str.w	r3, [lr], #4
 8006d08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d0c:	f8be 4000 	ldrh.w	r4, [lr]
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	fb09 4303 	mla	r3, r9, r3, r4
 8006d16:	4567      	cmp	r7, ip
 8006d18:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006d1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d20:	d8e6      	bhi.n	8006cf0 <__multiply+0xda>
 8006d22:	f8ce 3000 	str.w	r3, [lr]
 8006d26:	3504      	adds	r5, #4
 8006d28:	e7a0      	b.n	8006c6c <__multiply+0x56>
 8006d2a:	3e01      	subs	r6, #1
 8006d2c:	e7a2      	b.n	8006c74 <__multiply+0x5e>
	...

08006d30 <__pow5mult>:
 8006d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d34:	4615      	mov	r5, r2
 8006d36:	f012 0203 	ands.w	r2, r2, #3
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	460f      	mov	r7, r1
 8006d3e:	d007      	beq.n	8006d50 <__pow5mult+0x20>
 8006d40:	4c21      	ldr	r4, [pc, #132]	; (8006dc8 <__pow5mult+0x98>)
 8006d42:	3a01      	subs	r2, #1
 8006d44:	2300      	movs	r3, #0
 8006d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d4a:	f7ff fed2 	bl	8006af2 <__multadd>
 8006d4e:	4607      	mov	r7, r0
 8006d50:	10ad      	asrs	r5, r5, #2
 8006d52:	d035      	beq.n	8006dc0 <__pow5mult+0x90>
 8006d54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d56:	b93c      	cbnz	r4, 8006d68 <__pow5mult+0x38>
 8006d58:	2010      	movs	r0, #16
 8006d5a:	f7ff fc33 	bl	80065c4 <malloc>
 8006d5e:	6270      	str	r0, [r6, #36]	; 0x24
 8006d60:	6044      	str	r4, [r0, #4]
 8006d62:	6084      	str	r4, [r0, #8]
 8006d64:	6004      	str	r4, [r0, #0]
 8006d66:	60c4      	str	r4, [r0, #12]
 8006d68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d70:	b94c      	cbnz	r4, 8006d86 <__pow5mult+0x56>
 8006d72:	f240 2171 	movw	r1, #625	; 0x271
 8006d76:	4630      	mov	r0, r6
 8006d78:	f7ff ff44 	bl	8006c04 <__i2b>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	f04f 0800 	mov.w	r8, #0
 8006d8a:	07eb      	lsls	r3, r5, #31
 8006d8c:	d50a      	bpl.n	8006da4 <__pow5mult+0x74>
 8006d8e:	4639      	mov	r1, r7
 8006d90:	4622      	mov	r2, r4
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff ff3f 	bl	8006c16 <__multiply>
 8006d98:	4681      	mov	r9, r0
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7ff fe91 	bl	8006ac4 <_Bfree>
 8006da2:	464f      	mov	r7, r9
 8006da4:	106d      	asrs	r5, r5, #1
 8006da6:	d00b      	beq.n	8006dc0 <__pow5mult+0x90>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	b938      	cbnz	r0, 8006dbc <__pow5mult+0x8c>
 8006dac:	4622      	mov	r2, r4
 8006dae:	4621      	mov	r1, r4
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7ff ff30 	bl	8006c16 <__multiply>
 8006db6:	6020      	str	r0, [r4, #0]
 8006db8:	f8c0 8000 	str.w	r8, [r0]
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	e7e4      	b.n	8006d8a <__pow5mult+0x5a>
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08007bc8 	.word	0x08007bc8

08006dcc <__lshift>:
 8006dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ddc:	eb0a 0903 	add.w	r9, sl, r3
 8006de0:	6849      	ldr	r1, [r1, #4]
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	f109 0501 	add.w	r5, r9, #1
 8006de8:	42ab      	cmp	r3, r5
 8006dea:	db31      	blt.n	8006e50 <__lshift+0x84>
 8006dec:	4638      	mov	r0, r7
 8006dee:	f7ff fe35 	bl	8006a5c <_Balloc>
 8006df2:	2200      	movs	r2, #0
 8006df4:	4680      	mov	r8, r0
 8006df6:	4611      	mov	r1, r2
 8006df8:	f100 0314 	add.w	r3, r0, #20
 8006dfc:	4552      	cmp	r2, sl
 8006dfe:	db2a      	blt.n	8006e56 <__lshift+0x8a>
 8006e00:	6920      	ldr	r0, [r4, #16]
 8006e02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e06:	f104 0114 	add.w	r1, r4, #20
 8006e0a:	f016 021f 	ands.w	r2, r6, #31
 8006e0e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006e12:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006e16:	d022      	beq.n	8006e5e <__lshift+0x92>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	f1c2 0c20 	rsb	ip, r2, #32
 8006e1e:	680e      	ldr	r6, [r1, #0]
 8006e20:	4096      	lsls	r6, r2
 8006e22:	4330      	orrs	r0, r6
 8006e24:	f843 0b04 	str.w	r0, [r3], #4
 8006e28:	f851 0b04 	ldr.w	r0, [r1], #4
 8006e2c:	458e      	cmp	lr, r1
 8006e2e:	fa20 f00c 	lsr.w	r0, r0, ip
 8006e32:	d8f4      	bhi.n	8006e1e <__lshift+0x52>
 8006e34:	6018      	str	r0, [r3, #0]
 8006e36:	b108      	cbz	r0, 8006e3c <__lshift+0x70>
 8006e38:	f109 0502 	add.w	r5, r9, #2
 8006e3c:	3d01      	subs	r5, #1
 8006e3e:	4638      	mov	r0, r7
 8006e40:	f8c8 5010 	str.w	r5, [r8, #16]
 8006e44:	4621      	mov	r1, r4
 8006e46:	f7ff fe3d 	bl	8006ac4 <_Bfree>
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	3101      	adds	r1, #1
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	e7c8      	b.n	8006de8 <__lshift+0x1c>
 8006e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e5a:	3201      	adds	r2, #1
 8006e5c:	e7ce      	b.n	8006dfc <__lshift+0x30>
 8006e5e:	3b04      	subs	r3, #4
 8006e60:	f851 2b04 	ldr.w	r2, [r1], #4
 8006e64:	458e      	cmp	lr, r1
 8006e66:	f843 2f04 	str.w	r2, [r3, #4]!
 8006e6a:	d8f9      	bhi.n	8006e60 <__lshift+0x94>
 8006e6c:	e7e6      	b.n	8006e3c <__lshift+0x70>

08006e6e <__mcmp>:
 8006e6e:	6903      	ldr	r3, [r0, #16]
 8006e70:	690a      	ldr	r2, [r1, #16]
 8006e72:	b530      	push	{r4, r5, lr}
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	d10c      	bne.n	8006e92 <__mcmp+0x24>
 8006e78:	0092      	lsls	r2, r2, #2
 8006e7a:	3014      	adds	r0, #20
 8006e7c:	3114      	adds	r1, #20
 8006e7e:	1884      	adds	r4, r0, r2
 8006e80:	4411      	add	r1, r2
 8006e82:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e86:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e8a:	4295      	cmp	r5, r2
 8006e8c:	d003      	beq.n	8006e96 <__mcmp+0x28>
 8006e8e:	d305      	bcc.n	8006e9c <__mcmp+0x2e>
 8006e90:	2301      	movs	r3, #1
 8006e92:	4618      	mov	r0, r3
 8006e94:	bd30      	pop	{r4, r5, pc}
 8006e96:	42a0      	cmp	r0, r4
 8006e98:	d3f3      	bcc.n	8006e82 <__mcmp+0x14>
 8006e9a:	e7fa      	b.n	8006e92 <__mcmp+0x24>
 8006e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea0:	e7f7      	b.n	8006e92 <__mcmp+0x24>

08006ea2 <__mdiff>:
 8006ea2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	4611      	mov	r1, r2
 8006eac:	4628      	mov	r0, r5
 8006eae:	4614      	mov	r4, r2
 8006eb0:	f7ff ffdd 	bl	8006e6e <__mcmp>
 8006eb4:	1e06      	subs	r6, r0, #0
 8006eb6:	d108      	bne.n	8006eca <__mdiff+0x28>
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4638      	mov	r0, r7
 8006ebc:	f7ff fdce 	bl	8006a5c <_Balloc>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	6146      	str	r6, [r0, #20]
 8006ec4:	6103      	str	r3, [r0, #16]
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	bfa4      	itt	ge
 8006ecc:	4623      	movge	r3, r4
 8006ece:	462c      	movge	r4, r5
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	6861      	ldr	r1, [r4, #4]
 8006ed4:	bfa6      	itte	ge
 8006ed6:	461d      	movge	r5, r3
 8006ed8:	2600      	movge	r6, #0
 8006eda:	2601      	movlt	r6, #1
 8006edc:	f7ff fdbe 	bl	8006a5c <_Balloc>
 8006ee0:	f04f 0c00 	mov.w	ip, #0
 8006ee4:	60c6      	str	r6, [r0, #12]
 8006ee6:	692b      	ldr	r3, [r5, #16]
 8006ee8:	6926      	ldr	r6, [r4, #16]
 8006eea:	f104 0214 	add.w	r2, r4, #20
 8006eee:	f105 0914 	add.w	r9, r5, #20
 8006ef2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006ef6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006efa:	f100 0114 	add.w	r1, r0, #20
 8006efe:	f852 ab04 	ldr.w	sl, [r2], #4
 8006f02:	f859 5b04 	ldr.w	r5, [r9], #4
 8006f06:	fa1f f38a 	uxth.w	r3, sl
 8006f0a:	4463      	add	r3, ip
 8006f0c:	b2ac      	uxth	r4, r5
 8006f0e:	1b1b      	subs	r3, r3, r4
 8006f10:	0c2c      	lsrs	r4, r5, #16
 8006f12:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006f16:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006f20:	45c8      	cmp	r8, r9
 8006f22:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006f26:	4696      	mov	lr, r2
 8006f28:	f841 4b04 	str.w	r4, [r1], #4
 8006f2c:	d8e7      	bhi.n	8006efe <__mdiff+0x5c>
 8006f2e:	45be      	cmp	lr, r7
 8006f30:	d305      	bcc.n	8006f3e <__mdiff+0x9c>
 8006f32:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f36:	b18b      	cbz	r3, 8006f5c <__mdiff+0xba>
 8006f38:	6106      	str	r6, [r0, #16]
 8006f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006f42:	b2a2      	uxth	r2, r4
 8006f44:	4462      	add	r2, ip
 8006f46:	1413      	asrs	r3, r2, #16
 8006f48:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f4c:	b292      	uxth	r2, r2
 8006f4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f56:	f841 2b04 	str.w	r2, [r1], #4
 8006f5a:	e7e8      	b.n	8006f2e <__mdiff+0x8c>
 8006f5c:	3e01      	subs	r6, #1
 8006f5e:	e7e8      	b.n	8006f32 <__mdiff+0x90>

08006f60 <__d2b>:
 8006f60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f64:	461c      	mov	r4, r3
 8006f66:	2101      	movs	r1, #1
 8006f68:	4690      	mov	r8, r2
 8006f6a:	9e08      	ldr	r6, [sp, #32]
 8006f6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f6e:	f7ff fd75 	bl	8006a5c <_Balloc>
 8006f72:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006f76:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006f7a:	4607      	mov	r7, r0
 8006f7c:	bb34      	cbnz	r4, 8006fcc <__d2b+0x6c>
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	d027      	beq.n	8006fd6 <__d2b+0x76>
 8006f86:	a802      	add	r0, sp, #8
 8006f88:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006f8c:	f7ff fe0b 	bl	8006ba6 <__lo0bits>
 8006f90:	9900      	ldr	r1, [sp, #0]
 8006f92:	b1f0      	cbz	r0, 8006fd2 <__d2b+0x72>
 8006f94:	9a01      	ldr	r2, [sp, #4]
 8006f96:	f1c0 0320 	rsb	r3, r0, #32
 8006f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	40c2      	lsrs	r2, r0
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	9201      	str	r2, [sp, #4]
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf14      	ite	ne
 8006fac:	2102      	movne	r1, #2
 8006fae:	2101      	moveq	r1, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	6139      	str	r1, [r7, #16]
 8006fb4:	b1c4      	cbz	r4, 8006fe8 <__d2b+0x88>
 8006fb6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006fba:	4404      	add	r4, r0
 8006fbc:	6034      	str	r4, [r6, #0]
 8006fbe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fc2:	6028      	str	r0, [r5, #0]
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	b002      	add	sp, #8
 8006fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fcc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006fd0:	e7d5      	b.n	8006f7e <__d2b+0x1e>
 8006fd2:	6179      	str	r1, [r7, #20]
 8006fd4:	e7e7      	b.n	8006fa6 <__d2b+0x46>
 8006fd6:	a801      	add	r0, sp, #4
 8006fd8:	f7ff fde5 	bl	8006ba6 <__lo0bits>
 8006fdc:	2101      	movs	r1, #1
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	6139      	str	r1, [r7, #16]
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	3020      	adds	r0, #32
 8006fe6:	e7e5      	b.n	8006fb4 <__d2b+0x54>
 8006fe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006ff0:	6030      	str	r0, [r6, #0]
 8006ff2:	6918      	ldr	r0, [r3, #16]
 8006ff4:	f7ff fdb8 	bl	8006b68 <__hi0bits>
 8006ff8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006ffc:	e7e1      	b.n	8006fc2 <__d2b+0x62>
	...

08007000 <_sbrk_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	2300      	movs	r3, #0
 8007004:	4c05      	ldr	r4, [pc, #20]	; (800701c <_sbrk_r+0x1c>)
 8007006:	4605      	mov	r5, r0
 8007008:	4608      	mov	r0, r1
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	f000 fb6c 	bl	80076e8 <_sbrk>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_sbrk_r+0x1a>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	b103      	cbz	r3, 800701a <_sbrk_r+0x1a>
 8007018:	602b      	str	r3, [r5, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20001fb8 	.word	0x20001fb8

08007020 <__ssprint_r>:
 8007020:	6893      	ldr	r3, [r2, #8]
 8007022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007026:	4681      	mov	r9, r0
 8007028:	460c      	mov	r4, r1
 800702a:	4617      	mov	r7, r2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d060      	beq.n	80070f2 <__ssprint_r+0xd2>
 8007030:	f04f 0b00 	mov.w	fp, #0
 8007034:	465e      	mov	r6, fp
 8007036:	f8d2 a000 	ldr.w	sl, [r2]
 800703a:	b356      	cbz	r6, 8007092 <__ssprint_r+0x72>
 800703c:	68a3      	ldr	r3, [r4, #8]
 800703e:	429e      	cmp	r6, r3
 8007040:	d344      	bcc.n	80070cc <__ssprint_r+0xac>
 8007042:	89a2      	ldrh	r2, [r4, #12]
 8007044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007048:	d03e      	beq.n	80070c8 <__ssprint_r+0xa8>
 800704a:	2302      	movs	r3, #2
 800704c:	6825      	ldr	r5, [r4, #0]
 800704e:	6921      	ldr	r1, [r4, #16]
 8007050:	eba5 0801 	sub.w	r8, r5, r1
 8007054:	6965      	ldr	r5, [r4, #20]
 8007056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800705a:	fb95 f5f3 	sdiv	r5, r5, r3
 800705e:	f108 0301 	add.w	r3, r8, #1
 8007062:	4433      	add	r3, r6
 8007064:	429d      	cmp	r5, r3
 8007066:	bf38      	it	cc
 8007068:	461d      	movcc	r5, r3
 800706a:	0553      	lsls	r3, r2, #21
 800706c:	d546      	bpl.n	80070fc <__ssprint_r+0xdc>
 800706e:	4629      	mov	r1, r5
 8007070:	4648      	mov	r0, r9
 8007072:	f7ff faaf 	bl	80065d4 <_malloc_r>
 8007076:	b998      	cbnz	r0, 80070a0 <__ssprint_r+0x80>
 8007078:	230c      	movs	r3, #12
 800707a:	f8c9 3000 	str.w	r3, [r9]
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	2300      	movs	r3, #0
 800708c:	60bb      	str	r3, [r7, #8]
 800708e:	607b      	str	r3, [r7, #4]
 8007090:	e031      	b.n	80070f6 <__ssprint_r+0xd6>
 8007092:	f8da b000 	ldr.w	fp, [sl]
 8007096:	f8da 6004 	ldr.w	r6, [sl, #4]
 800709a:	f10a 0a08 	add.w	sl, sl, #8
 800709e:	e7cc      	b.n	800703a <__ssprint_r+0x1a>
 80070a0:	4642      	mov	r2, r8
 80070a2:	6921      	ldr	r1, [r4, #16]
 80070a4:	9001      	str	r0, [sp, #4]
 80070a6:	f7ff fcc1 	bl	8006a2c <memcpy>
 80070aa:	89a2      	ldrh	r2, [r4, #12]
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80070b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070b6:	81a2      	strh	r2, [r4, #12]
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	4443      	add	r3, r8
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	4633      	mov	r3, r6
 80070c0:	6165      	str	r5, [r4, #20]
 80070c2:	eba5 0508 	sub.w	r5, r5, r8
 80070c6:	60a5      	str	r5, [r4, #8]
 80070c8:	429e      	cmp	r6, r3
 80070ca:	d200      	bcs.n	80070ce <__ssprint_r+0xae>
 80070cc:	4633      	mov	r3, r6
 80070ce:	461a      	mov	r2, r3
 80070d0:	4659      	mov	r1, fp
 80070d2:	6820      	ldr	r0, [r4, #0]
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	f000 f96b 	bl	80073b0 <memmove>
 80070da:	68a2      	ldr	r2, [r4, #8]
 80070dc:	9b01      	ldr	r3, [sp, #4]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	60a2      	str	r2, [r4, #8]
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	4413      	add	r3, r2
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	1b9e      	subs	r6, r3, r6
 80070ec:	60be      	str	r6, [r7, #8]
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	d1cf      	bne.n	8007092 <__ssprint_r+0x72>
 80070f2:	2000      	movs	r0, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	b003      	add	sp, #12
 80070f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fc:	462a      	mov	r2, r5
 80070fe:	4648      	mov	r0, r9
 8007100:	f000 f970 	bl	80073e4 <_realloc_r>
 8007104:	4603      	mov	r3, r0
 8007106:	2800      	cmp	r0, #0
 8007108:	d1d6      	bne.n	80070b8 <__ssprint_r+0x98>
 800710a:	6921      	ldr	r1, [r4, #16]
 800710c:	4648      	mov	r0, r9
 800710e:	f000 f891 	bl	8007234 <_free_r>
 8007112:	e7b1      	b.n	8007078 <__ssprint_r+0x58>

08007114 <__ascii_wctomb>:
 8007114:	b149      	cbz	r1, 800712a <__ascii_wctomb+0x16>
 8007116:	2aff      	cmp	r2, #255	; 0xff
 8007118:	bf8b      	itete	hi
 800711a:	238a      	movhi	r3, #138	; 0x8a
 800711c:	700a      	strbls	r2, [r1, #0]
 800711e:	6003      	strhi	r3, [r0, #0]
 8007120:	2001      	movls	r0, #1
 8007122:	bf88      	it	hi
 8007124:	f04f 30ff 	movhi.w	r0, #4294967295
 8007128:	4770      	bx	lr
 800712a:	4608      	mov	r0, r1
 800712c:	4770      	bx	lr

0800712e <_calloc_r>:
 800712e:	b510      	push	{r4, lr}
 8007130:	4351      	muls	r1, r2
 8007132:	f7ff fa4f 	bl	80065d4 <_malloc_r>
 8007136:	4604      	mov	r4, r0
 8007138:	b198      	cbz	r0, 8007162 <_calloc_r+0x34>
 800713a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800713e:	f022 0203 	bic.w	r2, r2, #3
 8007142:	3a04      	subs	r2, #4
 8007144:	2a24      	cmp	r2, #36	; 0x24
 8007146:	d81b      	bhi.n	8007180 <_calloc_r+0x52>
 8007148:	2a13      	cmp	r2, #19
 800714a:	d917      	bls.n	800717c <_calloc_r+0x4e>
 800714c:	2100      	movs	r1, #0
 800714e:	2a1b      	cmp	r2, #27
 8007150:	6001      	str	r1, [r0, #0]
 8007152:	6041      	str	r1, [r0, #4]
 8007154:	d807      	bhi.n	8007166 <_calloc_r+0x38>
 8007156:	f100 0308 	add.w	r3, r0, #8
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	605a      	str	r2, [r3, #4]
 8007160:	609a      	str	r2, [r3, #8]
 8007162:	4620      	mov	r0, r4
 8007164:	bd10      	pop	{r4, pc}
 8007166:	2a24      	cmp	r2, #36	; 0x24
 8007168:	6081      	str	r1, [r0, #8]
 800716a:	60c1      	str	r1, [r0, #12]
 800716c:	bf11      	iteee	ne
 800716e:	f100 0310 	addne.w	r3, r0, #16
 8007172:	6101      	streq	r1, [r0, #16]
 8007174:	f100 0318 	addeq.w	r3, r0, #24
 8007178:	6141      	streq	r1, [r0, #20]
 800717a:	e7ee      	b.n	800715a <_calloc_r+0x2c>
 800717c:	4603      	mov	r3, r0
 800717e:	e7ec      	b.n	800715a <_calloc_r+0x2c>
 8007180:	2100      	movs	r1, #0
 8007182:	f7fd fb07 	bl	8004794 <memset>
 8007186:	e7ec      	b.n	8007162 <_calloc_r+0x34>

08007188 <_malloc_trim_r>:
 8007188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800718c:	4689      	mov	r9, r1
 800718e:	4f25      	ldr	r7, [pc, #148]	; (8007224 <_malloc_trim_r+0x9c>)
 8007190:	4606      	mov	r6, r0
 8007192:	f7ff fc57 	bl	8006a44 <__malloc_lock>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8007230 <_malloc_trim_r+0xa8>
 800719c:	685d      	ldr	r5, [r3, #4]
 800719e:	f1a8 0411 	sub.w	r4, r8, #17
 80071a2:	f025 0503 	bic.w	r5, r5, #3
 80071a6:	eba4 0409 	sub.w	r4, r4, r9
 80071aa:	442c      	add	r4, r5
 80071ac:	fbb4 f4f8 	udiv	r4, r4, r8
 80071b0:	3c01      	subs	r4, #1
 80071b2:	fb08 f404 	mul.w	r4, r8, r4
 80071b6:	4544      	cmp	r4, r8
 80071b8:	da05      	bge.n	80071c6 <_malloc_trim_r+0x3e>
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff fc48 	bl	8006a50 <__malloc_unlock>
 80071c0:	2000      	movs	r0, #0
 80071c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c6:	2100      	movs	r1, #0
 80071c8:	4630      	mov	r0, r6
 80071ca:	f7ff ff19 	bl	8007000 <_sbrk_r>
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	442b      	add	r3, r5
 80071d2:	4298      	cmp	r0, r3
 80071d4:	d1f1      	bne.n	80071ba <_malloc_trim_r+0x32>
 80071d6:	4261      	negs	r1, r4
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff ff11 	bl	8007000 <_sbrk_r>
 80071de:	3001      	adds	r0, #1
 80071e0:	d110      	bne.n	8007204 <_malloc_trim_r+0x7c>
 80071e2:	2100      	movs	r1, #0
 80071e4:	4630      	mov	r0, r6
 80071e6:	f7ff ff0b 	bl	8007000 <_sbrk_r>
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	1a83      	subs	r3, r0, r2
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	dde3      	ble.n	80071ba <_malloc_trim_r+0x32>
 80071f2:	490d      	ldr	r1, [pc, #52]	; (8007228 <_malloc_trim_r+0xa0>)
 80071f4:	f043 0301 	orr.w	r3, r3, #1
 80071f8:	6809      	ldr	r1, [r1, #0]
 80071fa:	6053      	str	r3, [r2, #4]
 80071fc:	1a40      	subs	r0, r0, r1
 80071fe:	490b      	ldr	r1, [pc, #44]	; (800722c <_malloc_trim_r+0xa4>)
 8007200:	6008      	str	r0, [r1, #0]
 8007202:	e7da      	b.n	80071ba <_malloc_trim_r+0x32>
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4a09      	ldr	r2, [pc, #36]	; (800722c <_malloc_trim_r+0xa4>)
 8007208:	1b2d      	subs	r5, r5, r4
 800720a:	f045 0501 	orr.w	r5, r5, #1
 800720e:	605d      	str	r5, [r3, #4]
 8007210:	6813      	ldr	r3, [r2, #0]
 8007212:	4630      	mov	r0, r6
 8007214:	1b1c      	subs	r4, r3, r4
 8007216:	6014      	str	r4, [r2, #0]
 8007218:	f7ff fc1a 	bl	8006a50 <__malloc_unlock>
 800721c:	2001      	movs	r0, #1
 800721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007222:	bf00      	nop
 8007224:	200003c4 	.word	0x200003c4
 8007228:	200007cc 	.word	0x200007cc
 800722c:	20000a30 	.word	0x20000a30
 8007230:	00000080 	.word	0x00000080

08007234 <_free_r>:
 8007234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	4604      	mov	r4, r0
 800723a:	4688      	mov	r8, r1
 800723c:	2900      	cmp	r1, #0
 800723e:	f000 80ab 	beq.w	8007398 <_free_r+0x164>
 8007242:	f7ff fbff 	bl	8006a44 <__malloc_lock>
 8007246:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800724a:	4d54      	ldr	r5, [pc, #336]	; (800739c <_free_r+0x168>)
 800724c:	f022 0001 	bic.w	r0, r2, #1
 8007250:	f1a8 0308 	sub.w	r3, r8, #8
 8007254:	181f      	adds	r7, r3, r0
 8007256:	68a9      	ldr	r1, [r5, #8]
 8007258:	687e      	ldr	r6, [r7, #4]
 800725a:	428f      	cmp	r7, r1
 800725c:	f026 0603 	bic.w	r6, r6, #3
 8007260:	f002 0201 	and.w	r2, r2, #1
 8007264:	d11b      	bne.n	800729e <_free_r+0x6a>
 8007266:	4430      	add	r0, r6
 8007268:	b93a      	cbnz	r2, 800727a <_free_r+0x46>
 800726a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	6899      	ldr	r1, [r3, #8]
 8007272:	4410      	add	r0, r2
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	60ca      	str	r2, [r1, #12]
 8007278:	6091      	str	r1, [r2, #8]
 800727a:	f040 0201 	orr.w	r2, r0, #1
 800727e:	605a      	str	r2, [r3, #4]
 8007280:	60ab      	str	r3, [r5, #8]
 8007282:	4b47      	ldr	r3, [pc, #284]	; (80073a0 <_free_r+0x16c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4298      	cmp	r0, r3
 8007288:	d304      	bcc.n	8007294 <_free_r+0x60>
 800728a:	4b46      	ldr	r3, [pc, #280]	; (80073a4 <_free_r+0x170>)
 800728c:	4620      	mov	r0, r4
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	f7ff ff7a 	bl	8007188 <_malloc_trim_r>
 8007294:	4620      	mov	r0, r4
 8007296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800729a:	f7ff bbd9 	b.w	8006a50 <__malloc_unlock>
 800729e:	607e      	str	r6, [r7, #4]
 80072a0:	2a00      	cmp	r2, #0
 80072a2:	d139      	bne.n	8007318 <_free_r+0xe4>
 80072a4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80072a8:	f105 0e08 	add.w	lr, r5, #8
 80072ac:	1a5b      	subs	r3, r3, r1
 80072ae:	4408      	add	r0, r1
 80072b0:	6899      	ldr	r1, [r3, #8]
 80072b2:	4571      	cmp	r1, lr
 80072b4:	d032      	beq.n	800731c <_free_r+0xe8>
 80072b6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80072ba:	f8c1 e00c 	str.w	lr, [r1, #12]
 80072be:	f8ce 1008 	str.w	r1, [lr, #8]
 80072c2:	19b9      	adds	r1, r7, r6
 80072c4:	6849      	ldr	r1, [r1, #4]
 80072c6:	07c9      	lsls	r1, r1, #31
 80072c8:	d40a      	bmi.n	80072e0 <_free_r+0xac>
 80072ca:	4430      	add	r0, r6
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	bb3a      	cbnz	r2, 8007320 <_free_r+0xec>
 80072d0:	4e35      	ldr	r6, [pc, #212]	; (80073a8 <_free_r+0x174>)
 80072d2:	42b1      	cmp	r1, r6
 80072d4:	d124      	bne.n	8007320 <_free_r+0xec>
 80072d6:	2201      	movs	r2, #1
 80072d8:	616b      	str	r3, [r5, #20]
 80072da:	612b      	str	r3, [r5, #16]
 80072dc:	60d9      	str	r1, [r3, #12]
 80072de:	6099      	str	r1, [r3, #8]
 80072e0:	f040 0101 	orr.w	r1, r0, #1
 80072e4:	6059      	str	r1, [r3, #4]
 80072e6:	5018      	str	r0, [r3, r0]
 80072e8:	2a00      	cmp	r2, #0
 80072ea:	d1d3      	bne.n	8007294 <_free_r+0x60>
 80072ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80072f0:	d21a      	bcs.n	8007328 <_free_r+0xf4>
 80072f2:	2201      	movs	r2, #1
 80072f4:	08c0      	lsrs	r0, r0, #3
 80072f6:	1081      	asrs	r1, r0, #2
 80072f8:	408a      	lsls	r2, r1
 80072fa:	6869      	ldr	r1, [r5, #4]
 80072fc:	3001      	adds	r0, #1
 80072fe:	430a      	orrs	r2, r1
 8007300:	606a      	str	r2, [r5, #4]
 8007302:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007306:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800730a:	3a08      	subs	r2, #8
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	6099      	str	r1, [r3, #8]
 8007310:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007314:	60cb      	str	r3, [r1, #12]
 8007316:	e7bd      	b.n	8007294 <_free_r+0x60>
 8007318:	2200      	movs	r2, #0
 800731a:	e7d2      	b.n	80072c2 <_free_r+0x8e>
 800731c:	2201      	movs	r2, #1
 800731e:	e7d0      	b.n	80072c2 <_free_r+0x8e>
 8007320:	68fe      	ldr	r6, [r7, #12]
 8007322:	60ce      	str	r6, [r1, #12]
 8007324:	60b1      	str	r1, [r6, #8]
 8007326:	e7db      	b.n	80072e0 <_free_r+0xac>
 8007328:	0a42      	lsrs	r2, r0, #9
 800732a:	2a04      	cmp	r2, #4
 800732c:	d813      	bhi.n	8007356 <_free_r+0x122>
 800732e:	0982      	lsrs	r2, r0, #6
 8007330:	3238      	adds	r2, #56	; 0x38
 8007332:	1c51      	adds	r1, r2, #1
 8007334:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007338:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800733c:	428e      	cmp	r6, r1
 800733e:	d124      	bne.n	800738a <_free_r+0x156>
 8007340:	2001      	movs	r0, #1
 8007342:	1092      	asrs	r2, r2, #2
 8007344:	fa00 f202 	lsl.w	r2, r0, r2
 8007348:	6868      	ldr	r0, [r5, #4]
 800734a:	4302      	orrs	r2, r0
 800734c:	606a      	str	r2, [r5, #4]
 800734e:	60de      	str	r6, [r3, #12]
 8007350:	6099      	str	r1, [r3, #8]
 8007352:	60b3      	str	r3, [r6, #8]
 8007354:	e7de      	b.n	8007314 <_free_r+0xe0>
 8007356:	2a14      	cmp	r2, #20
 8007358:	d801      	bhi.n	800735e <_free_r+0x12a>
 800735a:	325b      	adds	r2, #91	; 0x5b
 800735c:	e7e9      	b.n	8007332 <_free_r+0xfe>
 800735e:	2a54      	cmp	r2, #84	; 0x54
 8007360:	d802      	bhi.n	8007368 <_free_r+0x134>
 8007362:	0b02      	lsrs	r2, r0, #12
 8007364:	326e      	adds	r2, #110	; 0x6e
 8007366:	e7e4      	b.n	8007332 <_free_r+0xfe>
 8007368:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800736c:	d802      	bhi.n	8007374 <_free_r+0x140>
 800736e:	0bc2      	lsrs	r2, r0, #15
 8007370:	3277      	adds	r2, #119	; 0x77
 8007372:	e7de      	b.n	8007332 <_free_r+0xfe>
 8007374:	f240 5154 	movw	r1, #1364	; 0x554
 8007378:	428a      	cmp	r2, r1
 800737a:	bf9a      	itte	ls
 800737c:	0c82      	lsrls	r2, r0, #18
 800737e:	327c      	addls	r2, #124	; 0x7c
 8007380:	227e      	movhi	r2, #126	; 0x7e
 8007382:	e7d6      	b.n	8007332 <_free_r+0xfe>
 8007384:	6889      	ldr	r1, [r1, #8]
 8007386:	428e      	cmp	r6, r1
 8007388:	d004      	beq.n	8007394 <_free_r+0x160>
 800738a:	684a      	ldr	r2, [r1, #4]
 800738c:	f022 0203 	bic.w	r2, r2, #3
 8007390:	4290      	cmp	r0, r2
 8007392:	d3f7      	bcc.n	8007384 <_free_r+0x150>
 8007394:	68ce      	ldr	r6, [r1, #12]
 8007396:	e7da      	b.n	800734e <_free_r+0x11a>
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739c:	200003c4 	.word	0x200003c4
 80073a0:	200007d0 	.word	0x200007d0
 80073a4:	20000a60 	.word	0x20000a60
 80073a8:	200003cc 	.word	0x200003cc

080073ac <__retarget_lock_acquire_recursive>:
 80073ac:	4770      	bx	lr

080073ae <__retarget_lock_release_recursive>:
 80073ae:	4770      	bx	lr

080073b0 <memmove>:
 80073b0:	4288      	cmp	r0, r1
 80073b2:	b510      	push	{r4, lr}
 80073b4:	eb01 0302 	add.w	r3, r1, r2
 80073b8:	d803      	bhi.n	80073c2 <memmove+0x12>
 80073ba:	1e42      	subs	r2, r0, #1
 80073bc:	4299      	cmp	r1, r3
 80073be:	d10c      	bne.n	80073da <memmove+0x2a>
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	4298      	cmp	r0, r3
 80073c4:	d2f9      	bcs.n	80073ba <memmove+0xa>
 80073c6:	1881      	adds	r1, r0, r2
 80073c8:	1ad2      	subs	r2, r2, r3
 80073ca:	42d3      	cmn	r3, r2
 80073cc:	d100      	bne.n	80073d0 <memmove+0x20>
 80073ce:	bd10      	pop	{r4, pc}
 80073d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80073d8:	e7f7      	b.n	80073ca <memmove+0x1a>
 80073da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073e2:	e7eb      	b.n	80073bc <memmove+0xc>

080073e4 <_realloc_r>:
 80073e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e8:	4682      	mov	sl, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	b929      	cbnz	r1, 80073fa <_realloc_r+0x16>
 80073ee:	4611      	mov	r1, r2
 80073f0:	b003      	add	sp, #12
 80073f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f6:	f7ff b8ed 	b.w	80065d4 <_malloc_r>
 80073fa:	9201      	str	r2, [sp, #4]
 80073fc:	f7ff fb22 	bl	8006a44 <__malloc_lock>
 8007400:	9a01      	ldr	r2, [sp, #4]
 8007402:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007406:	f102 080b 	add.w	r8, r2, #11
 800740a:	f1b8 0f16 	cmp.w	r8, #22
 800740e:	f1a4 0908 	sub.w	r9, r4, #8
 8007412:	f025 0603 	bic.w	r6, r5, #3
 8007416:	d90a      	bls.n	800742e <_realloc_r+0x4a>
 8007418:	f038 0807 	bics.w	r8, r8, #7
 800741c:	d509      	bpl.n	8007432 <_realloc_r+0x4e>
 800741e:	230c      	movs	r3, #12
 8007420:	2700      	movs	r7, #0
 8007422:	f8ca 3000 	str.w	r3, [sl]
 8007426:	4638      	mov	r0, r7
 8007428:	b003      	add	sp, #12
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	f04f 0810 	mov.w	r8, #16
 8007432:	4590      	cmp	r8, r2
 8007434:	d3f3      	bcc.n	800741e <_realloc_r+0x3a>
 8007436:	45b0      	cmp	r8, r6
 8007438:	f340 8148 	ble.w	80076cc <_realloc_r+0x2e8>
 800743c:	4ba9      	ldr	r3, [pc, #676]	; (80076e4 <_realloc_r+0x300>)
 800743e:	eb09 0106 	add.w	r1, r9, r6
 8007442:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8007446:	469b      	mov	fp, r3
 8007448:	4571      	cmp	r1, lr
 800744a:	684b      	ldr	r3, [r1, #4]
 800744c:	d005      	beq.n	800745a <_realloc_r+0x76>
 800744e:	f023 0001 	bic.w	r0, r3, #1
 8007452:	4408      	add	r0, r1
 8007454:	6840      	ldr	r0, [r0, #4]
 8007456:	07c7      	lsls	r7, r0, #31
 8007458:	d447      	bmi.n	80074ea <_realloc_r+0x106>
 800745a:	f023 0303 	bic.w	r3, r3, #3
 800745e:	4571      	cmp	r1, lr
 8007460:	eb06 0703 	add.w	r7, r6, r3
 8007464:	d119      	bne.n	800749a <_realloc_r+0xb6>
 8007466:	f108 0010 	add.w	r0, r8, #16
 800746a:	4287      	cmp	r7, r0
 800746c:	db3f      	blt.n	80074ee <_realloc_r+0x10a>
 800746e:	eba7 0708 	sub.w	r7, r7, r8
 8007472:	eb09 0308 	add.w	r3, r9, r8
 8007476:	f047 0701 	orr.w	r7, r7, #1
 800747a:	f8cb 3008 	str.w	r3, [fp, #8]
 800747e:	605f      	str	r7, [r3, #4]
 8007480:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007484:	4650      	mov	r0, sl
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	ea43 0308 	orr.w	r3, r3, r8
 800748e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007492:	f7ff fadd 	bl	8006a50 <__malloc_unlock>
 8007496:	4627      	mov	r7, r4
 8007498:	e7c5      	b.n	8007426 <_realloc_r+0x42>
 800749a:	45b8      	cmp	r8, r7
 800749c:	dc27      	bgt.n	80074ee <_realloc_r+0x10a>
 800749e:	68cb      	ldr	r3, [r1, #12]
 80074a0:	688a      	ldr	r2, [r1, #8]
 80074a2:	60d3      	str	r3, [r2, #12]
 80074a4:	609a      	str	r2, [r3, #8]
 80074a6:	eba7 0008 	sub.w	r0, r7, r8
 80074aa:	280f      	cmp	r0, #15
 80074ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80074b0:	eb09 0207 	add.w	r2, r9, r7
 80074b4:	f240 810c 	bls.w	80076d0 <_realloc_r+0x2ec>
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	eb09 0108 	add.w	r1, r9, r8
 80074c0:	ea43 0308 	orr.w	r3, r3, r8
 80074c4:	f040 0001 	orr.w	r0, r0, #1
 80074c8:	f8c9 3004 	str.w	r3, [r9, #4]
 80074cc:	6048      	str	r0, [r1, #4]
 80074ce:	6853      	ldr	r3, [r2, #4]
 80074d0:	3108      	adds	r1, #8
 80074d2:	f043 0301 	orr.w	r3, r3, #1
 80074d6:	6053      	str	r3, [r2, #4]
 80074d8:	4650      	mov	r0, sl
 80074da:	f7ff feab 	bl	8007234 <_free_r>
 80074de:	4650      	mov	r0, sl
 80074e0:	f7ff fab6 	bl	8006a50 <__malloc_unlock>
 80074e4:	f109 0708 	add.w	r7, r9, #8
 80074e8:	e79d      	b.n	8007426 <_realloc_r+0x42>
 80074ea:	2300      	movs	r3, #0
 80074ec:	4619      	mov	r1, r3
 80074ee:	07e8      	lsls	r0, r5, #31
 80074f0:	f100 8085 	bmi.w	80075fe <_realloc_r+0x21a>
 80074f4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80074f8:	eba9 0505 	sub.w	r5, r9, r5
 80074fc:	6868      	ldr	r0, [r5, #4]
 80074fe:	f020 0003 	bic.w	r0, r0, #3
 8007502:	4430      	add	r0, r6
 8007504:	2900      	cmp	r1, #0
 8007506:	d077      	beq.n	80075f8 <_realloc_r+0x214>
 8007508:	4571      	cmp	r1, lr
 800750a:	d151      	bne.n	80075b0 <_realloc_r+0x1cc>
 800750c:	4403      	add	r3, r0
 800750e:	f108 0110 	add.w	r1, r8, #16
 8007512:	428b      	cmp	r3, r1
 8007514:	db70      	blt.n	80075f8 <_realloc_r+0x214>
 8007516:	462f      	mov	r7, r5
 8007518:	68ea      	ldr	r2, [r5, #12]
 800751a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800751e:	60ca      	str	r2, [r1, #12]
 8007520:	6091      	str	r1, [r2, #8]
 8007522:	1f32      	subs	r2, r6, #4
 8007524:	2a24      	cmp	r2, #36	; 0x24
 8007526:	d83c      	bhi.n	80075a2 <_realloc_r+0x1be>
 8007528:	2a13      	cmp	r2, #19
 800752a:	d937      	bls.n	800759c <_realloc_r+0x1b8>
 800752c:	6821      	ldr	r1, [r4, #0]
 800752e:	2a1b      	cmp	r2, #27
 8007530:	60a9      	str	r1, [r5, #8]
 8007532:	6861      	ldr	r1, [r4, #4]
 8007534:	60e9      	str	r1, [r5, #12]
 8007536:	d81c      	bhi.n	8007572 <_realloc_r+0x18e>
 8007538:	f105 0210 	add.w	r2, r5, #16
 800753c:	f104 0108 	add.w	r1, r4, #8
 8007540:	6808      	ldr	r0, [r1, #0]
 8007542:	6010      	str	r0, [r2, #0]
 8007544:	6848      	ldr	r0, [r1, #4]
 8007546:	6050      	str	r0, [r2, #4]
 8007548:	6889      	ldr	r1, [r1, #8]
 800754a:	6091      	str	r1, [r2, #8]
 800754c:	eba3 0308 	sub.w	r3, r3, r8
 8007550:	eb05 0208 	add.w	r2, r5, r8
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	f8cb 2008 	str.w	r2, [fp, #8]
 800755c:	6053      	str	r3, [r2, #4]
 800755e:	686b      	ldr	r3, [r5, #4]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	ea43 0308 	orr.w	r3, r3, r8
 8007568:	606b      	str	r3, [r5, #4]
 800756a:	4650      	mov	r0, sl
 800756c:	f7ff fa70 	bl	8006a50 <__malloc_unlock>
 8007570:	e759      	b.n	8007426 <_realloc_r+0x42>
 8007572:	68a1      	ldr	r1, [r4, #8]
 8007574:	2a24      	cmp	r2, #36	; 0x24
 8007576:	6129      	str	r1, [r5, #16]
 8007578:	68e1      	ldr	r1, [r4, #12]
 800757a:	bf18      	it	ne
 800757c:	f105 0218 	addne.w	r2, r5, #24
 8007580:	6169      	str	r1, [r5, #20]
 8007582:	bf09      	itett	eq
 8007584:	6922      	ldreq	r2, [r4, #16]
 8007586:	f104 0110 	addne.w	r1, r4, #16
 800758a:	61aa      	streq	r2, [r5, #24]
 800758c:	6960      	ldreq	r0, [r4, #20]
 800758e:	bf02      	ittt	eq
 8007590:	f105 0220 	addeq.w	r2, r5, #32
 8007594:	f104 0118 	addeq.w	r1, r4, #24
 8007598:	61e8      	streq	r0, [r5, #28]
 800759a:	e7d1      	b.n	8007540 <_realloc_r+0x15c>
 800759c:	463a      	mov	r2, r7
 800759e:	4621      	mov	r1, r4
 80075a0:	e7ce      	b.n	8007540 <_realloc_r+0x15c>
 80075a2:	4621      	mov	r1, r4
 80075a4:	4638      	mov	r0, r7
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	f7ff ff02 	bl	80073b0 <memmove>
 80075ac:	9b01      	ldr	r3, [sp, #4]
 80075ae:	e7cd      	b.n	800754c <_realloc_r+0x168>
 80075b0:	18c7      	adds	r7, r0, r3
 80075b2:	45b8      	cmp	r8, r7
 80075b4:	dc20      	bgt.n	80075f8 <_realloc_r+0x214>
 80075b6:	68cb      	ldr	r3, [r1, #12]
 80075b8:	688a      	ldr	r2, [r1, #8]
 80075ba:	60d3      	str	r3, [r2, #12]
 80075bc:	609a      	str	r2, [r3, #8]
 80075be:	4628      	mov	r0, r5
 80075c0:	68eb      	ldr	r3, [r5, #12]
 80075c2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80075c6:	60d3      	str	r3, [r2, #12]
 80075c8:	609a      	str	r2, [r3, #8]
 80075ca:	1f32      	subs	r2, r6, #4
 80075cc:	2a24      	cmp	r2, #36	; 0x24
 80075ce:	d843      	bhi.n	8007658 <_realloc_r+0x274>
 80075d0:	2a13      	cmp	r2, #19
 80075d2:	d93f      	bls.n	8007654 <_realloc_r+0x270>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	2a1b      	cmp	r2, #27
 80075d8:	60ab      	str	r3, [r5, #8]
 80075da:	6863      	ldr	r3, [r4, #4]
 80075dc:	60eb      	str	r3, [r5, #12]
 80075de:	d824      	bhi.n	800762a <_realloc_r+0x246>
 80075e0:	f105 0010 	add.w	r0, r5, #16
 80075e4:	f104 0308 	add.w	r3, r4, #8
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	6002      	str	r2, [r0, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	6042      	str	r2, [r0, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	6083      	str	r3, [r0, #8]
 80075f4:	46a9      	mov	r9, r5
 80075f6:	e756      	b.n	80074a6 <_realloc_r+0xc2>
 80075f8:	4580      	cmp	r8, r0
 80075fa:	4607      	mov	r7, r0
 80075fc:	dddf      	ble.n	80075be <_realloc_r+0x1da>
 80075fe:	4611      	mov	r1, r2
 8007600:	4650      	mov	r0, sl
 8007602:	f7fe ffe7 	bl	80065d4 <_malloc_r>
 8007606:	4607      	mov	r7, r0
 8007608:	2800      	cmp	r0, #0
 800760a:	d0ae      	beq.n	800756a <_realloc_r+0x186>
 800760c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007610:	f1a0 0208 	sub.w	r2, r0, #8
 8007614:	f023 0301 	bic.w	r3, r3, #1
 8007618:	444b      	add	r3, r9
 800761a:	429a      	cmp	r2, r3
 800761c:	d120      	bne.n	8007660 <_realloc_r+0x27c>
 800761e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007622:	f027 0703 	bic.w	r7, r7, #3
 8007626:	4437      	add	r7, r6
 8007628:	e73d      	b.n	80074a6 <_realloc_r+0xc2>
 800762a:	68a3      	ldr	r3, [r4, #8]
 800762c:	2a24      	cmp	r2, #36	; 0x24
 800762e:	612b      	str	r3, [r5, #16]
 8007630:	68e3      	ldr	r3, [r4, #12]
 8007632:	bf18      	it	ne
 8007634:	f105 0018 	addne.w	r0, r5, #24
 8007638:	616b      	str	r3, [r5, #20]
 800763a:	bf09      	itett	eq
 800763c:	6923      	ldreq	r3, [r4, #16]
 800763e:	f104 0310 	addne.w	r3, r4, #16
 8007642:	61ab      	streq	r3, [r5, #24]
 8007644:	6962      	ldreq	r2, [r4, #20]
 8007646:	bf02      	ittt	eq
 8007648:	f105 0020 	addeq.w	r0, r5, #32
 800764c:	f104 0318 	addeq.w	r3, r4, #24
 8007650:	61ea      	streq	r2, [r5, #28]
 8007652:	e7c9      	b.n	80075e8 <_realloc_r+0x204>
 8007654:	4623      	mov	r3, r4
 8007656:	e7c7      	b.n	80075e8 <_realloc_r+0x204>
 8007658:	4621      	mov	r1, r4
 800765a:	f7ff fea9 	bl	80073b0 <memmove>
 800765e:	e7c9      	b.n	80075f4 <_realloc_r+0x210>
 8007660:	1f32      	subs	r2, r6, #4
 8007662:	2a24      	cmp	r2, #36	; 0x24
 8007664:	d82e      	bhi.n	80076c4 <_realloc_r+0x2e0>
 8007666:	2a13      	cmp	r2, #19
 8007668:	d929      	bls.n	80076be <_realloc_r+0x2da>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	2a1b      	cmp	r2, #27
 800766e:	6003      	str	r3, [r0, #0]
 8007670:	6863      	ldr	r3, [r4, #4]
 8007672:	6043      	str	r3, [r0, #4]
 8007674:	d80e      	bhi.n	8007694 <_realloc_r+0x2b0>
 8007676:	f100 0308 	add.w	r3, r0, #8
 800767a:	f104 0208 	add.w	r2, r4, #8
 800767e:	6811      	ldr	r1, [r2, #0]
 8007680:	6019      	str	r1, [r3, #0]
 8007682:	6851      	ldr	r1, [r2, #4]
 8007684:	6059      	str	r1, [r3, #4]
 8007686:	6892      	ldr	r2, [r2, #8]
 8007688:	609a      	str	r2, [r3, #8]
 800768a:	4621      	mov	r1, r4
 800768c:	4650      	mov	r0, sl
 800768e:	f7ff fdd1 	bl	8007234 <_free_r>
 8007692:	e76a      	b.n	800756a <_realloc_r+0x186>
 8007694:	68a3      	ldr	r3, [r4, #8]
 8007696:	2a24      	cmp	r2, #36	; 0x24
 8007698:	6083      	str	r3, [r0, #8]
 800769a:	68e3      	ldr	r3, [r4, #12]
 800769c:	bf18      	it	ne
 800769e:	f104 0210 	addne.w	r2, r4, #16
 80076a2:	60c3      	str	r3, [r0, #12]
 80076a4:	bf09      	itett	eq
 80076a6:	6923      	ldreq	r3, [r4, #16]
 80076a8:	f100 0310 	addne.w	r3, r0, #16
 80076ac:	6103      	streq	r3, [r0, #16]
 80076ae:	6961      	ldreq	r1, [r4, #20]
 80076b0:	bf02      	ittt	eq
 80076b2:	f100 0318 	addeq.w	r3, r0, #24
 80076b6:	f104 0218 	addeq.w	r2, r4, #24
 80076ba:	6141      	streq	r1, [r0, #20]
 80076bc:	e7df      	b.n	800767e <_realloc_r+0x29a>
 80076be:	4603      	mov	r3, r0
 80076c0:	4622      	mov	r2, r4
 80076c2:	e7dc      	b.n	800767e <_realloc_r+0x29a>
 80076c4:	4621      	mov	r1, r4
 80076c6:	f7ff fe73 	bl	80073b0 <memmove>
 80076ca:	e7de      	b.n	800768a <_realloc_r+0x2a6>
 80076cc:	4637      	mov	r7, r6
 80076ce:	e6ea      	b.n	80074a6 <_realloc_r+0xc2>
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	431f      	orrs	r7, r3
 80076d6:	f8c9 7004 	str.w	r7, [r9, #4]
 80076da:	6853      	ldr	r3, [r2, #4]
 80076dc:	f043 0301 	orr.w	r3, r3, #1
 80076e0:	6053      	str	r3, [r2, #4]
 80076e2:	e6fc      	b.n	80074de <_realloc_r+0xfa>
 80076e4:	200003c4 	.word	0x200003c4

080076e8 <_sbrk>:
 80076e8:	4b04      	ldr	r3, [pc, #16]	; (80076fc <_sbrk+0x14>)
 80076ea:	4602      	mov	r2, r0
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	b909      	cbnz	r1, 80076f4 <_sbrk+0xc>
 80076f0:	4903      	ldr	r1, [pc, #12]	; (8007700 <_sbrk+0x18>)
 80076f2:	6019      	str	r1, [r3, #0]
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	4402      	add	r2, r0
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	4770      	bx	lr
 80076fc:	20000a64 	.word	0x20000a64
 8007700:	20001fbc 	.word	0x20001fbc

08007704 <_init>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	bf00      	nop
 8007708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770a:	bc08      	pop	{r3}
 800770c:	469e      	mov	lr, r3
 800770e:	4770      	bx	lr

08007710 <_fini>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr
